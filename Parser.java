
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0112\000\002\002\004\000\002\002\003\000\002\163" +
    "\006\000\002\164\003\000\002\164\005\000\002\164\005" +
    "\000\002\165\003\000\002\165\005\000\002\003\002\000" +
    "\002\003\004\000\002\003\003\000\002\004\003\000\002" +
    "\004\003\000\002\005\010\000\002\005\007\000\002\005" +
    "\005\000\002\006\003\000\002\006\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\010\004\000" +
    "\002\011\011\000\002\011\007\000\002\166\003\000\002" +
    "\166\006\000\002\012\005\000\002\012\004\000\002\013" +
    "\003\000\002\013\005\000\002\013\007\000\002\013\003" +
    "\000\002\013\005\000\002\013\003\000\002\014\003\000" +
    "\002\014\005\000\002\015\003\000\002\015\004\000\002" +
    "\015\005\000\002\016\004\000\002\016\005\000\002\017" +
    "\003\000\002\017\005\000\002\020\005\000\002\020\003" +
    "\000\002\021\003\000\002\021\005\000\002\021\007\000" +
    "\002\021\005\000\002\021\003\000\002\022\003\000\002" +
    "\022\005\000\002\023\003\000\002\023\004\000\002\023" +
    "\005\000\002\024\004\000\002\024\005\000\002\025\003" +
    "\000\002\025\005\000\002\026\003\000\002\027\003\000" +
    "\002\027\003\000\002\030\005\000\002\030\004\000\002" +
    "\030\003\000\002\031\003\000\002\031\005\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\033\003\000\002\033\004\000\002" +
    "\034\003\000\002\034\004\000\002\034\004\000\002\036" +
    "\006\000\002\036\004\000\002\042\004\000\002\043\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\045\003\000\002\046\003\000\002\047\003\000\002" +
    "\047\004\000\002\057\003\000\002\057\005\000\002\062" +
    "\003\000\002\062\005\000\002\063\003\000\002\063\005" +
    "\000\002\064\004\000\002\064\005\000\002\065\004\000" +
    "\002\065\005\000\002\066\006\000\002\066\004\000\002" +
    "\067\003\000\002\067\003\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\003\000\002\070\004\000" +
    "\002\070\004\000\002\070\004\000\002\071\006\000\002" +
    "\071\011\000\002\071\007\000\002\071\012\000\002\072" +
    "\006\000\002\072\007\000\002\073\006\000\002\074\010" +
    "\000\002\075\006\000\002\075\014\000\002\075\011\000" +
    "\002\075\011\000\002\075\010\000\002\076\005\000\002" +
    "\076\006\000\002\077\005\000\002\100\004\000\002\100" +
    "\005\000\002\101\003\000\002\101\005\000\002\102\003" +
    "\000\002\102\004\000\002\102\006\000\002\103\003\000" +
    "\002\103\006\000\002\104\003\000\002\104\004\000\002" +
    "\105\003\000\002\106\003\000\002\111\003\000\002\111" +
    "\005\000\002\112\003\000\002\112\005\000\002\113\004" +
    "\000\002\113\003\000\002\114\003\000\002\114\005\000" +
    "\002\115\003\000\002\115\003\000\002\115\003\000\002" +
    "\115\003\000\002\115\003\000\002\115\003\000\002\115" +
    "\003\000\002\115\004\000\002\115\003\000\002\115\004" +
    "\000\002\116\004\000\002\117\005\000\002\117\005\000" +
    "\002\117\005\000\002\117\005\000\002\117\005\000\002" +
    "\117\005\000\002\117\005\000\002\117\005\000\002\117" +
    "\005\000\002\117\005\000\002\117\005\000\002\117\005" +
    "\000\002\117\004\000\002\117\004\000\002\117\003\000" +
    "\002\125\004\000\002\125\004\000\002\125\003\000\002" +
    "\126\003\000\002\126\005\000\002\127\003\000\002\127" +
    "\004\000\002\130\004\000\002\130\005\000\002\130\004" +
    "\000\002\130\005\000\002\130\004\000\002\130\005\000" +
    "\002\130\003\000\002\130\003\000\002\130\003\000\002" +
    "\130\003\000\002\130\003\000\002\130\003\000\002\130" +
    "\003\000\002\130\003\000\002\131\003\000\002\131\004" +
    "\000\002\132\004\000\002\132\004\000\002\132\003\000" +
    "\002\132\004\000\002\133\003\000\002\133\003\000\002" +
    "\133\005\000\002\133\005\000\002\134\004\000\002\134" +
    "\005\000\002\134\005\000\002\134\004\000\002\135\003" +
    "\000\002\135\004\000\002\136\003\000\002\136\005\000" +
    "\002\137\003\000\002\137\006\000\002\137\005\000\002" +
    "\137\005\000\002\137\005\000\002\137\004\000\002\137" +
    "\004\000\002\137\004\000\002\137\003\000\002\140\003" +
    "\000\002\140\004\000\002\141\003\000\002\141\004\000" +
    "\002\142\003\000\002\142\005\000\002\143\003\000\002" +
    "\143\004\000\002\144\003\000\002\144\005\000\002\145" +
    "\003\000\002\145\003\000\002\146\006\000\002\146\005" +
    "\000\002\146\004\000\002\146\003\000\002\147\005\000" +
    "\002\147\004\000\002\147\007\000\002\147\006\000\002" +
    "\150\004\000\002\150\004\000\002\150\003\000\002\150" +
    "\004\000\002\151\003\000\002\151\003\000\002\151\005" +
    "\000\002\151\005\000\002\152\011\000\002\152\006\000" +
    "\002\152\010\000\002\153\003\000\002\153\004\000\002" +
    "\154\003\000\002\154\005\000\002\155\003\000\002\155" +
    "\004\000\002\155\005\000\002\155\004\000\002\155\004" +
    "\000\002\156\003\000\002\156\003\000\002\157\007\000" +
    "\002\157\006\000\002\160\004\000\002\161\004\000\002" +
    "\161\005\000\002\162\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0192\000\102\002\ufff9\005\046\006\106\007\027\010" +
    "\051\011\061\012\021\013\112\016\100\017\016\021\067" +
    "\022\044\023\076\024\031\025\025\032\062\034\104\035" +
    "\077\042\020\043\030\045\022\047\063\050\065\051\057" +
    "\052\114\054\056\056\105\063\053\064\075\076\023\102" +
    "\005\132\015\001\002\000\006\062\u0191\132\u0192\001\002" +
    "\000\004\012\u0187\001\002\000\120\006\u0185\014\uff3f\015" +
    "\uff3f\017\uff3f\035\uff3f\037\uff3f\040\uff3f\043\uff3f\044\uff3f" +
    "\054\uff3f\055\uff3f\056\uff3f\057\uff3f\060\uff3f\061\uff3f\062" +
    "\uff3f\063\uff3f\064\uff3f\065\uff3f\066\uff3f\067\uff3f\070\uff3f" +
    "\071\uff3f\072\uff3f\073\uff3f\074\uff3f\075\uff3f\077\uff3f\100" +
    "\uff3f\102\uff3f\103\uff3f\104\uff3f\105\uff3f\106\uff3f\107\uff3f" +
    "\110\uff3f\114\uff3f\116\uff3f\132\uff3f\001\002\000\006\062" +
    "\uffb7\132\uffb7\001\002\000\116\014\uff4c\015\uff4c\017\uff4c" +
    "\035\uff4c\037\uff4c\040\uff4c\043\uff4c\044\uff4c\054\u016b\055" +
    "\uff4c\056\u016d\057\uff4c\060\uff4c\061\uff4c\062\uff4c\063\uff4c" +
    "\064\uff4c\065\uff4c\066\uff4c\067\uff4c\070\uff4c\071\uff4c\072" +
    "\uff4c\073\uff4c\074\u016e\075\uff4c\077\uff4c\100\uff4c\102\uff4c" +
    "\103\uff4c\104\uff4c\105\uff4c\106\uff4c\107\uff4c\110\uff4c\114" +
    "\u016a\116\uff4c\132\uff4c\001\002\000\102\002\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\016" +
    "\ufff5\017\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\032\ufff5\034\ufff5\035\ufff5\042\ufff5\043\ufff5\045\ufff5\047" +
    "\ufff5\050\ufff5\051\ufff5\052\ufff5\054\ufff5\056\ufff5\063\ufff5" +
    "\064\ufff5\076\ufff5\102\ufff5\132\ufff5\001\002\000\106\014" +
    "\uff50\015\uff50\017\uff50\035\uff50\037\uff50\040\uff50\043\uff50" +
    "\044\uff50\055\uff50\057\uff50\060\uff50\061\uff50\062\uff50\063" +
    "\uff50\064\uff50\065\uff50\066\uff50\067\uff50\070\uff50\071\uff50" +
    "\072\uff50\073\uff50\075\uff50\077\uff50\100\uff50\102\uff50\103" +
    "\uff50\104\uff50\105\uff50\106\uff50\107\uff50\110\uff50\116\uff50" +
    "\132\uff50\001\002\000\106\014\uff6b\015\uff6b\017\uff6b\035" +
    "\uff6b\037\uff6b\040\uff6b\043\uff6b\044\uff6b\055\uff6b\057\uff6b" +
    "\060\uff6b\061\uff6b\062\uff6b\063\132\064\121\065\131\066" +
    "\122\067\133\070\124\071\uff6b\072\uff6b\073\uff6b\075\127" +
    "\077\uff6b\100\130\102\134\103\uff6b\104\uff6b\105\uff6b\106" +
    "\126\107\uff6b\110\125\116\123\132\uff6b\001\002\000\006" +
    "\062\uffbb\132\uffbb\001\002\000\102\002\ufff6\005\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\016\ufff6" +
    "\017\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\032" +
    "\ufff6\034\ufff6\035\ufff6\042\ufff6\043\ufff6\045\ufff6\047\ufff6" +
    "\050\ufff6\051\ufff6\052\ufff6\054\ufff6\056\ufff6\063\ufff6\064" +
    "\ufff6\076\ufff6\102\ufff6\132\ufff6\001\002\000\010\024\031" +
    "\032\062\052\114\001\002\000\104\002\uff93\005\uff93\006" +
    "\uff93\007\uff93\010\uff93\011\uff93\012\uff93\013\uff93\016\uff93" +
    "\017\uff93\021\uff93\022\uff93\023\uff93\024\uff93\025\uff93\032" +
    "\uff93\034\uff93\035\uff93\042\uff93\043\uff93\045\uff93\047\uff93" +
    "\050\uff93\051\uff93\052\uff93\054\uff93\056\uff93\063\uff93\064" +
    "\uff93\076\uff93\102\uff93\132\uff93\134\uff93\001\002\000\004" +
    "\012\u0166\001\002\000\120\014\uff42\015\uff42\017\uff42\035" +
    "\uff42\037\uff42\040\uff42\043\uff42\044\uff42\054\uff42\055\uff42" +
    "\056\uff42\057\uff42\060\uff42\061\uff42\062\uff42\063\uff42\064" +
    "\uff42\065\uff42\066\uff42\067\uff42\070\uff42\071\uff42\072\uff42" +
    "\073\uff42\074\uff42\075\uff42\076\u0163\077\uff42\100\uff42\102" +
    "\uff42\103\uff42\104\uff42\105\uff42\106\uff42\107\uff42\110\uff42" +
    "\114\uff42\116\uff42\132\uff42\001\002\000\006\062\uffae\132" +
    "\uffae\001\002\000\042\005\046\006\106\007\027\010\051" +
    "\011\061\012\021\013\112\043\030\054\056\056\105\063" +
    "\053\064\075\065\154\076\023\077\u0149\114\u014e\001\002" +
    "\000\010\061\u0147\062\uffb9\132\uffb9\001\002\000\032\005" +
    "\046\006\106\007\027\010\051\011\061\012\021\013\112" +
    "\054\056\056\105\063\053\064\075\076\023\001\002\000" +
    "\006\062\uffbe\132\uffbe\001\002\000\116\014\uff3b\015\uff3b" +
    "\017\uff3b\035\uff3b\037\uff3b\040\uff3b\043\uff3b\044\uff3b\054" +
    "\uff3b\055\uff3b\056\uff3b\057\uff3b\060\uff3b\061\uff3b\062\uff3b" +
    "\063\uff3b\064\uff3b\065\uff3b\066\uff3b\067\uff3b\070\uff3b\071" +
    "\uff3b\072\uff3b\073\uff3b\074\uff3b\075\uff3b\077\uff3b\100\uff3b" +
    "\102\uff3b\103\uff3b\104\uff3b\105\uff3b\106\uff3b\107\uff3b\110" +
    "\uff3b\114\uff3b\116\uff3b\132\uff3b\001\002\000\034\005\046" +
    "\006\106\007\027\010\051\011\061\012\021\013\112\043" +
    "\030\054\056\056\105\063\053\064\075\076\023\001\002" +
    "\000\004\012\u0116\001\002\000\116\014\uff41\015\uff41\017" +
    "\uff41\035\uff41\037\uff41\040\uff41\043\uff41\044\uff41\054\uff41" +
    "\055\uff41\056\uff41\057\uff41\060\uff41\061\uff41\062\uff41\063" +
    "\uff41\064\uff41\065\uff41\066\uff41\067\uff41\070\uff41\071\uff41" +
    "\072\uff41\073\uff41\074\uff41\075\uff41\077\uff41\100\uff41\102" +
    "\uff41\103\uff41\104\uff41\105\uff41\106\uff41\107\uff41\110\uff41" +
    "\114\uff41\116\uff41\132\uff41\001\002\000\116\014\uff4a\015" +
    "\uff4a\017\uff4a\035\uff4a\037\uff4a\040\uff4a\043\uff4a\044\uff4a" +
    "\054\uff4a\055\uff4a\056\uff4a\057\uff4a\060\uff4a\061\uff4a\062" +
    "\uff4a\063\uff4a\064\uff4a\065\uff4a\066\uff4a\067\uff4a\070\uff4a" +
    "\071\uff4a\072\uff4a\073\uff4a\074\uff4a\075\uff4a\077\uff4a\100" +
    "\uff4a\102\uff4a\103\uff4a\104\uff4a\105\uff4a\106\uff4a\107\uff4a" +
    "\110\uff4a\114\uff4a\116\uff4a\132\uff4a\001\002\000\104\002" +
    "\uff94\005\uff94\006\uff94\007\uff94\010\uff94\011\uff94\012\uff94" +
    "\013\uff94\016\uff94\017\uff94\021\uff94\022\uff94\023\uff94\024" +
    "\uff94\025\uff94\032\uff94\034\uff94\035\uff94\042\uff94\043\uff94" +
    "\045\uff94\047\uff94\050\uff94\051\uff94\052\uff94\054\uff94\056" +
    "\uff94\063\uff94\064\uff94\076\uff94\102\uff94\132\uff94\134\uff94" +
    "\001\002\000\006\062\uffba\132\uffba\001\002\000\034\014" +
    "\uff6f\015\uff6f\017\uff6f\035\uff6f\044\uff6f\055\uff6f\057\uff6f" +
    "\060\uff6f\061\uff6f\062\uff6f\073\uff6f\077\uff6f\132\uff6f\001" +
    "\002\000\006\062\uffbc\132\uffbc\001\002\000\006\062\uffab" +
    "\132\uffab\001\002\000\104\002\uff99\005\uff99\006\uff99\007" +
    "\uff99\010\uff99\011\uff99\012\uff99\013\uff99\016\uff99\017\uff99" +
    "\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99\032\uff99\034" +
    "\uff99\035\uff99\042\uff99\043\uff99\045\uff99\047\uff99\050\uff99" +
    "\051\uff99\052\uff99\054\uff99\056\uff99\063\uff99\064\uff99\076" +
    "\uff99\102\uff99\132\uff99\134\uff99\001\002\000\104\002\uff9a" +
    "\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013" +
    "\uff9a\016\uff9a\017\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a" +
    "\025\uff9a\032\uff9a\034\uff9a\035\uff9a\042\uff9a\043\uff9a\045" +
    "\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\054\uff9a\056\uff9a" +
    "\063\uff9a\064\uff9a\076\uff9a\102\uff9a\132\uff9a\134\uff9a\001" +
    "\002\000\102\002\000\005\046\006\106\007\027\010\051" +
    "\011\061\012\021\013\112\016\100\017\016\021\067\022" +
    "\044\023\076\024\031\025\025\032\062\034\104\035\077" +
    "\042\020\043\030\045\022\047\063\050\065\051\057\052" +
    "\114\054\056\056\105\063\053\064\075\076\023\102\005" +
    "\132\015\001\002\000\004\012\375\001\002\000\012\017" +
    "\ufff1\022\ufff1\024\ufff1\102\ufff1\001\002\000\116\014\uff40" +
    "\015\uff40\017\uff40\035\uff40\037\uff40\040\uff40\043\uff40\044" +
    "\uff40\054\uff40\055\uff40\056\uff40\057\uff40\060\uff40\061\uff40" +
    "\062\uff40\063\uff40\064\uff40\065\uff40\066\uff40\067\uff40\070" +
    "\uff40\071\uff40\072\uff40\073\uff40\074\uff40\075\uff40\077\uff40" +
    "\100\uff40\102\uff40\103\uff40\104\uff40\105\uff40\106\uff40\107" +
    "\uff40\110\uff40\114\uff40\116\uff40\132\uff40\001\002\000\102" +
    "\002\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\016\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7" +
    "\024\ufff7\025\ufff7\032\ufff7\034\ufff7\035\ufff7\042\ufff7\043" +
    "\ufff7\045\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\054\ufff7" +
    "\056\ufff7\063\ufff7\064\ufff7\076\ufff7\102\ufff7\132\ufff7\001" +
    "\002\000\104\002\uff96\005\uff96\006\uff96\007\uff96\010\uff96" +
    "\011\uff96\012\uff96\013\uff96\016\uff96\017\uff96\021\uff96\022" +
    "\uff96\023\uff96\024\uff96\025\uff96\032\uff96\034\uff96\035\uff96" +
    "\042\uff96\043\uff96\045\uff96\047\uff96\050\uff96\051\uff96\052" +
    "\uff96\054\uff96\056\uff96\063\uff96\064\uff96\076\uff96\102\uff96" +
    "\132\uff96\134\uff96\001\002\000\116\014\uff3c\015\uff3c\017" +
    "\uff3c\035\uff3c\037\uff3c\040\uff3c\043\uff3c\044\uff3c\054\uff3c" +
    "\055\uff3c\056\uff3c\057\uff3c\060\uff3c\061\uff3c\062\uff3c\063" +
    "\uff3c\064\uff3c\065\uff3c\066\uff3c\067\uff3c\070\uff3c\071\uff3c" +
    "\072\uff3c\073\uff3c\074\uff3c\075\uff3c\077\uff3c\100\uff3c\102" +
    "\uff3c\103\uff3c\104\uff3c\105\uff3c\106\uff3c\107\uff3c\110\uff3c" +
    "\114\uff3c\116\uff3c\132\uff3c\001\002\000\056\014\uff6c\015" +
    "\uff6c\017\uff6c\035\uff6c\037\361\040\371\043\370\044\uff6c" +
    "\055\uff6c\057\uff6c\060\uff6c\061\uff6c\062\uff6c\071\366\072" +
    "\363\073\uff6c\077\uff6c\103\365\104\360\105\364\107\367" +
    "\132\uff6c\001\002\000\032\005\046\006\106\007\027\010" +
    "\051\011\061\012\021\013\112\054\056\056\105\063\251" +
    "\064\254\076\023\001\002\000\104\002\uffc4\005\uffc4\006" +
    "\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\016\uffc4" +
    "\017\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\032" +
    "\uffc4\034\uffc4\035\uffc4\042\uffc4\043\uffc4\045\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\052\uffc4\054\uffc4\056\uffc4\063\uffc4\064" +
    "\uffc4\076\uffc4\102\uffc4\132\uffc4\134\uffc4\001\002\000\010" +
    "\061\355\062\uffb8\132\uffb8\001\002\000\040\005\046\006" +
    "\106\007\027\010\051\011\061\012\021\013\112\043\030" +
    "\054\056\055\353\056\105\063\053\064\075\065\154\076" +
    "\023\001\002\000\034\005\046\006\106\007\027\010\051" +
    "\011\061\012\021\013\112\043\030\054\056\056\105\063" +
    "\053\064\075\076\023\001\002\000\006\060\344\061\343" +
    "\001\002\000\116\014\uff3d\015\uff3d\017\uff3d\035\uff3d\037" +
    "\uff3d\040\uff3d\043\uff3d\044\uff3d\054\uff3d\055\uff3d\056\uff3d" +
    "\057\uff3d\060\uff3d\061\uff3d\062\uff3d\063\uff3d\064\uff3d\065" +
    "\uff3d\066\uff3d\067\uff3d\070\uff3d\071\uff3d\072\uff3d\073\uff3d" +
    "\074\uff3d\075\uff3d\077\uff3d\100\uff3d\102\uff3d\103\uff3d\104" +
    "\uff3d\105\uff3d\106\uff3d\107\uff3d\110\uff3d\114\uff3d\116\uff3d" +
    "\132\uff3d\001\002\000\032\005\046\006\106\007\027\010" +
    "\051\011\061\012\021\013\112\054\056\056\105\063\053" +
    "\064\075\076\023\001\002\000\040\005\046\006\106\007" +
    "\027\010\051\011\061\012\021\013\112\043\030\054\056" +
    "\056\105\062\uffa8\063\053\064\075\076\023\132\uffa8\001" +
    "\002\000\012\017\326\022\044\024\031\102\005\001\002" +
    "\000\004\060\272\001\002\000\012\060\261\062\uffb6\073" +
    "\260\132\uffb6\001\002\000\006\062\uffaa\132\uffaa\001\002" +
    "\000\104\002\uff92\005\uff92\006\uff92\007\uff92\010\uff92\011" +
    "\uff92\012\uff92\013\uff92\016\uff92\017\uff92\021\uff92\022\uff92" +
    "\023\uff92\024\uff92\025\uff92\032\uff92\034\uff92\035\uff92\042" +
    "\uff92\043\uff92\045\uff92\047\uff92\050\uff92\051\uff92\052\uff92" +
    "\054\uff92\056\uff92\063\uff92\064\uff92\076\uff92\102\uff92\132" +
    "\uff92\134\uff92\001\002\000\006\062\uffbd\132\uffbd\001\002" +
    "\000\030\015\uff73\017\uff73\044\177\055\uff73\057\uff73\060" +
    "\uff73\061\uff73\062\uff73\073\uff73\077\uff73\132\uff73\001\002" +
    "\000\104\002\uff98\005\uff98\006\uff98\007\uff98\010\uff98\011" +
    "\uff98\012\uff98\013\uff98\016\uff98\017\uff98\021\uff98\022\uff98" +
    "\023\uff98\024\uff98\025\uff98\032\uff98\034\uff98\035\uff98\042" +
    "\uff98\043\uff98\045\uff98\047\uff98\050\uff98\051\uff98\052\uff98" +
    "\054\uff98\056\uff98\063\uff98\064\uff98\076\uff98\102\uff98\132" +
    "\uff98\134\uff98\001\002\000\004\002\257\001\002\000\032" +
    "\005\046\006\106\007\027\010\051\011\061\012\021\013" +
    "\112\054\056\056\105\063\251\064\254\076\023\001\002" +
    "\000\006\062\uffa9\132\uffa9\001\002\000\034\005\046\006" +
    "\106\007\027\010\051\011\061\012\021\013\112\043\030" +
    "\054\056\056\105\063\053\064\075\076\023\001\002\000" +
    "\034\005\046\006\106\007\027\010\051\011\061\012\021" +
    "\013\112\043\030\054\056\056\105\063\053\064\075\076" +
    "\023\001\002\000\006\062\uffac\132\uffac\001\002\000\104" +
    "\002\uff95\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012" +
    "\uff95\013\uff95\016\uff95\017\uff95\021\uff95\022\uff95\023\uff95" +
    "\024\uff95\025\uff95\032\uff95\034\uff95\035\uff95\042\uff95\043" +
    "\uff95\045\uff95\047\uff95\050\uff95\051\uff95\052\uff95\054\uff95" +
    "\056\uff95\063\uff95\064\uff95\076\uff95\102\uff95\132\uff95\134" +
    "\uff95\001\002\000\104\002\uff97\005\uff97\006\uff97\007\uff97" +
    "\010\uff97\011\uff97\012\uff97\013\uff97\016\uff97\017\uff97\021" +
    "\uff97\022\uff97\023\uff97\024\uff97\025\uff97\032\uff97\034\uff97" +
    "\035\uff97\042\uff97\043\uff97\045\uff97\047\uff97\050\uff97\051" +
    "\uff97\052\uff97\054\uff97\056\uff97\063\uff97\064\uff97\076\uff97" +
    "\102\uff97\132\uff97\134\uff97\001\002\000\004\012\213\001" +
    "\002\000\040\005\046\006\106\007\027\010\051\011\061" +
    "\012\021\013\112\043\030\054\056\056\105\057\155\063" +
    "\053\064\075\065\154\076\023\001\002\000\120\006\uff3a" +
    "\014\uff3a\015\uff3a\017\uff3a\035\uff3a\037\uff3a\040\uff3a\043" +
    "\uff3a\044\uff3a\054\uff3a\055\uff3a\056\uff3a\057\uff3a\060\uff3a" +
    "\061\uff3a\062\uff3a\063\uff3a\064\uff3a\065\uff3a\066\uff3a\067" +
    "\uff3a\070\uff3a\071\uff3a\072\uff3a\073\uff3a\074\uff3a\075\uff3a" +
    "\077\uff3a\100\uff3a\102\uff3a\103\uff3a\104\uff3a\105\uff3a\106" +
    "\uff3a\107\uff3a\110\uff3a\114\uff3a\116\uff3a\132\uff3a\001\002" +
    "\000\006\062\uffc0\132\uffc0\001\002\000\104\002\uffc5\005" +
    "\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5" +
    "\016\uffc5\017\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025" +
    "\uffc5\032\uffc5\034\uffc5\035\uffc5\042\uffc5\043\uffc5\045\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\052\uffc5\054\uffc5\056\uffc5\063" +
    "\uffc5\064\uffc5\076\uffc5\102\uffc5\132\uffc5\134\uffc5\001\002" +
    "\000\034\014\151\015\uff71\017\uff71\035\uff71\044\uff71\055" +
    "\uff71\057\uff71\060\uff71\061\uff71\062\uff71\073\uff71\077\uff71" +
    "\132\uff71\001\002\000\116\014\uff3e\015\uff3e\017\uff3e\035" +
    "\uff3e\037\uff3e\040\uff3e\043\uff3e\044\uff3e\054\uff3e\055\uff3e" +
    "\056\uff3e\057\uff3e\060\uff3e\061\uff3e\062\uff3e\063\uff3e\064" +
    "\uff3e\065\uff3e\066\uff3e\067\uff3e\070\uff3e\071\uff3e\072\uff3e" +
    "\073\uff3e\074\uff3e\075\uff3e\077\uff3e\100\uff3e\102\uff3e\103" +
    "\uff3e\104\uff3e\105\uff3e\106\uff3e\107\uff3e\110\uff3e\114\uff3e" +
    "\116\uff3e\132\uff3e\001\002\000\006\062\uffad\132\uffad\001" +
    "\002\000\034\005\046\006\106\007\027\010\051\011\061" +
    "\012\021\013\112\043\030\054\056\056\105\063\053\064" +
    "\075\076\023\001\002\000\010\015\117\060\uff7c\061\uff7c" +
    "\001\002\000\006\060\uff7e\061\uff7e\001\002\000\032\005" +
    "\046\006\106\007\027\010\051\011\061\012\021\013\112" +
    "\054\056\056\105\063\053\064\075\076\023\001\002\000" +
    "\036\060\uff7b\061\uff7b\063\132\064\121\065\131\066\122" +
    "\067\133\070\124\075\127\100\130\102\134\106\126\110" +
    "\125\116\123\001\002\000\032\005\046\006\106\007\027" +
    "\010\051\011\061\012\021\013\112\054\056\056\105\063" +
    "\053\064\075\076\023\001\002\000\032\005\046\006\106" +
    "\007\027\010\051\011\061\012\021\013\112\054\056\056" +
    "\105\063\053\064\075\076\023\001\002\000\032\005\046" +
    "\006\106\007\027\010\051\011\061\012\021\013\112\054" +
    "\056\056\105\063\053\064\075\076\023\001\002\000\032" +
    "\005\046\006\106\007\027\010\051\011\061\012\021\013" +
    "\112\054\056\056\105\063\053\064\075\076\023\001\002" +
    "\000\032\005\046\006\106\007\027\010\051\011\061\012" +
    "\021\013\112\054\056\056\105\063\053\064\075\076\023" +
    "\001\002\000\032\005\046\006\106\007\027\010\051\011" +
    "\061\012\021\013\112\054\056\056\105\063\053\064\075" +
    "\076\023\001\002\000\032\005\046\006\106\007\027\010" +
    "\051\011\061\012\021\013\112\054\056\056\105\063\053" +
    "\064\075\076\023\001\002\000\032\005\046\006\106\007" +
    "\027\010\051\011\061\012\021\013\112\054\056\056\105" +
    "\063\053\064\075\076\023\001\002\000\032\005\046\006" +
    "\106\007\027\010\051\011\061\012\021\013\112\054\056" +
    "\056\105\063\053\064\075\076\023\001\002\000\032\005" +
    "\046\006\106\007\027\010\051\011\061\012\021\013\112" +
    "\054\056\056\105\063\053\064\075\076\023\001\002\000" +
    "\032\005\046\006\106\007\027\010\051\011\061\012\021" +
    "\013\112\054\056\056\105\063\053\064\075\076\023\001" +
    "\002\000\032\005\046\006\106\007\027\010\051\011\061" +
    "\012\021\013\112\054\056\056\105\063\053\064\075\076" +
    "\023\001\002\000\106\014\uff56\015\uff56\017\uff56\035\uff56" +
    "\037\uff56\040\uff56\043\uff56\044\uff56\055\uff56\057\uff56\060" +
    "\uff56\061\uff56\062\uff56\063\uff56\064\uff56\065\uff56\066\uff56" +
    "\067\uff56\070\uff56\071\uff56\072\uff56\073\uff56\075\uff56\077" +
    "\uff56\100\uff56\102\uff56\103\uff56\104\uff56\105\uff56\106\uff56" +
    "\107\uff56\110\uff56\116\uff56\132\uff56\001\002\000\106\014" +
    "\uff5e\015\uff5e\017\uff5e\035\uff5e\037\uff5e\040\uff5e\043\uff5e" +
    "\044\uff5e\055\uff5e\057\uff5e\060\uff5e\061\uff5e\062\uff5e\063" +
    "\132\064\121\065\131\066\122\067\uff5e\070\124\071\uff5e" +
    "\072\uff5e\073\uff5e\075\127\077\uff5e\100\130\102\134\103" +
    "\uff5e\104\uff5e\105\uff5e\106\126\107\uff5e\110\125\116\123" +
    "\132\uff5e\001\002\000\106\014\uff59\015\uff59\017\uff59\035" +
    "\uff59\037\uff59\040\uff59\043\uff59\044\uff59\055\uff59\057\uff59" +
    "\060\uff59\061\uff59\062\uff59\063\uff59\064\uff59\065\131\066" +
    "\122\067\uff59\070\uff59\071\uff59\072\uff59\073\uff59\075\127" +
    "\077\uff59\100\uff59\102\134\103\uff59\104\uff59\105\uff59\106" +
    "\uff59\107\uff59\110\uff59\116\123\132\uff59\001\002\000\106" +
    "\014\uff57\015\uff57\017\uff57\035\uff57\037\uff57\040\uff57\043" +
    "\uff57\044\uff57\055\uff57\057\uff57\060\uff57\061\uff57\062\uff57" +
    "\063\uff57\064\uff57\065\uff57\066\uff57\067\uff57\070\uff57\071" +
    "\uff57\072\uff57\073\uff57\075\uff57\077\uff57\100\uff57\102\uff57" +
    "\103\uff57\104\uff57\105\uff57\106\uff57\107\uff57\110\uff57\116" +
    "\uff57\132\uff57\001\002\000\106\014\uff5d\015\uff5d\017\uff5d" +
    "\035\uff5d\037\uff5d\040\uff5d\043\uff5d\044\uff5d\055\uff5d\057" +
    "\uff5d\060\uff5d\061\uff5d\062\uff5d\063\132\064\121\065\131" +
    "\066\122\067\uff5d\070\124\071\uff5d\072\uff5d\073\uff5d\075" +
    "\127\077\uff5d\100\uff5d\102\134\103\uff5d\104\uff5d\105\uff5d" +
    "\106\126\107\uff5d\110\125\116\123\132\uff5d\001\002\000" +
    "\106\014\uff55\015\uff55\017\uff55\035\uff55\037\uff55\040\uff55" +
    "\043\uff55\044\uff55\055\uff55\057\uff55\060\uff55\061\uff55\062" +
    "\uff55\063\uff55\064\uff55\065\uff55\066\uff55\067\uff55\070\uff55" +
    "\071\uff55\072\uff55\073\uff55\075\uff55\077\uff55\100\uff55\102" +
    "\uff55\103\uff55\104\uff55\105\uff55\106\uff55\107\uff55\110\uff55" +
    "\116\uff55\132\uff55\001\002\000\106\014\uff5b\015\uff5b\017" +
    "\uff5b\035\uff5b\037\uff5b\040\uff5b\043\uff5b\044\uff5b\055\uff5b" +
    "\057\uff5b\060\uff5b\061\uff5b\062\uff5b\063\132\064\121\065" +
    "\131\066\122\067\uff5b\070\uff5b\071\uff5b\072\uff5b\073\uff5b" +
    "\075\127\077\uff5b\100\uff5b\102\134\103\uff5b\104\uff5b\105" +
    "\uff5b\106\uff5b\107\uff5b\110\uff5b\116\123\132\uff5b\001\002" +
    "\000\106\014\uff5a\015\uff5a\017\uff5a\035\uff5a\037\uff5a\040" +
    "\uff5a\043\uff5a\044\uff5a\055\uff5a\057\uff5a\060\uff5a\061\uff5a" +
    "\062\uff5a\063\132\064\121\065\131\066\122\067\uff5a\070" +
    "\uff5a\071\uff5a\072\uff5a\073\uff5a\075\127\077\uff5a\100\uff5a" +
    "\102\134\103\uff5a\104\uff5a\105\uff5a\106\uff5a\107\uff5a\110" +
    "\uff5a\116\123\132\uff5a\001\002\000\106\014\uff5c\015\uff5c" +
    "\017\uff5c\035\uff5c\037\uff5c\040\uff5c\043\uff5c\044\uff5c\055" +
    "\uff5c\057\uff5c\060\uff5c\061\uff5c\062\uff5c\063\132\064\121" +
    "\065\131\066\122\067\uff5c\070\uff5c\071\uff5c\072\uff5c\073" +
    "\uff5c\075\127\077\uff5c\100\uff5c\102\134\103\uff5c\104\uff5c" +
    "\105\uff5c\106\126\107\uff5c\110\125\116\123\132\uff5c\001" +
    "\002\000\106\014\uff53\015\uff53\017\uff53\035\uff53\037\uff53" +
    "\040\uff53\043\uff53\044\uff53\055\uff53\057\uff53\060\uff53\061" +
    "\uff53\062\uff53\063\uff53\064\uff53\065\uff53\066\uff53\067\uff53" +
    "\070\uff53\071\uff53\072\uff53\073\uff53\075\uff53\077\uff53\100" +
    "\uff53\102\uff53\103\uff53\104\uff53\105\uff53\106\uff53\107\uff53" +
    "\110\uff53\116\uff53\132\uff53\001\002\000\106\014\uff54\015" +
    "\uff54\017\uff54\035\uff54\037\uff54\040\uff54\043\uff54\044\uff54" +
    "\055\uff54\057\uff54\060\uff54\061\uff54\062\uff54\063\uff54\064" +
    "\uff54\065\uff54\066\uff54\067\uff54\070\uff54\071\uff54\072\uff54" +
    "\073\uff54\075\uff54\077\uff54\100\uff54\102\uff54\103\uff54\104" +
    "\uff54\105\uff54\106\uff54\107\uff54\110\uff54\116\uff54\132\uff54" +
    "\001\002\000\106\014\uff58\015\uff58\017\uff58\035\uff58\037" +
    "\uff58\040\uff58\043\uff58\044\uff58\055\uff58\057\uff58\060\uff58" +
    "\061\uff58\062\uff58\063\uff58\064\uff58\065\131\066\122\067" +
    "\uff58\070\uff58\071\uff58\072\uff58\073\uff58\075\127\077\uff58" +
    "\100\uff58\102\134\103\uff58\104\uff58\105\uff58\106\uff58\107" +
    "\uff58\110\uff58\116\123\132\uff58\001\002\000\034\005\046" +
    "\006\106\007\027\010\051\011\061\012\021\013\112\043" +
    "\030\054\056\056\105\063\053\064\075\076\023\001\002" +
    "\000\034\014\uff6e\015\uff6e\017\uff6e\035\uff6e\044\uff6e\055" +
    "\uff6e\057\uff6e\060\uff6e\061\uff6e\062\uff6e\073\uff6e\077\uff6e" +
    "\132\uff6e\001\002\000\004\057\212\001\002\000\032\005" +
    "\046\006\106\007\027\010\051\011\061\012\021\013\112" +
    "\054\056\056\105\063\053\064\075\076\023\001\002\000" +
    "\116\014\uff46\015\uff46\017\uff46\035\uff46\037\uff46\040\uff46" +
    "\043\uff46\044\uff46\054\uff46\055\uff46\056\uff46\057\uff46\060" +
    "\uff46\061\uff46\062\uff46\063\uff46\064\uff46\065\uff46\066\uff46" +
    "\067\uff46\070\uff46\071\uff46\072\uff46\073\uff46\074\uff46\075" +
    "\uff46\077\uff46\100\uff46\102\uff46\103\uff46\104\uff46\105\uff46" +
    "\106\uff46\107\uff46\110\uff46\114\uff46\116\uff46\132\uff46\001" +
    "\002\000\010\055\uff36\057\uff36\061\206\001\002\000\012" +
    "\017\162\055\uff33\057\uff33\061\uff33\001\002\000\012\017" +
    "\162\055\uff34\057\uff34\061\uff34\001\002\000\006\055\uff38" +
    "\057\uff38\001\002\000\004\032\163\001\002\000\032\005" +
    "\046\006\106\007\027\010\051\011\061\012\021\013\112" +
    "\054\056\056\105\063\053\064\075\076\023\001\002\000" +
    "\012\055\ufef3\057\ufef3\061\ufef3\077\ufef3\001\002\000\004" +
    "\037\172\001\002\000\042\037\uff1b\061\uff1b\062\uff1b\063" +
    "\132\064\121\065\131\066\122\067\133\070\124\075\127" +
    "\100\130\102\134\106\126\110\125\116\123\132\uff1b\001" +
    "\002\000\012\037\uff1d\061\170\062\uff1d\132\uff1d\001\002" +
    "\000\040\005\046\006\106\007\027\010\051\011\061\012" +
    "\021\013\112\037\uff1c\054\056\056\105\062\uff1c\063\053" +
    "\064\075\076\023\132\uff1c\001\002\000\042\037\uff1a\061" +
    "\uff1a\062\uff1a\063\132\064\121\065\131\066\122\067\133" +
    "\070\124\075\127\100\130\102\134\106\126\110\125\116" +
    "\123\132\uff1a\001\002\000\034\005\046\006\106\007\027" +
    "\010\051\011\061\012\021\013\112\043\030\054\056\056" +
    "\105\063\053\064\075\076\023\001\002\000\020\017\162" +
    "\035\200\044\177\055\ufef4\057\ufef4\061\ufef4\077\ufef4\001" +
    "\002\000\012\055\ufef5\057\ufef5\061\ufef5\077\ufef5\001\002" +
    "\000\012\055\ufef7\057\ufef7\061\ufef7\077\ufef7\001\002\000" +
    "\012\055\ufef6\057\ufef6\061\ufef6\077\ufef6\001\002\000\034" +
    "\005\046\006\106\007\027\010\051\011\061\012\021\013" +
    "\112\043\030\054\056\056\105\063\053\064\075\076\023" +
    "\001\002\000\034\005\046\006\106\007\027\010\051\011" +
    "\061\012\021\013\112\043\030\054\056\056\105\063\053" +
    "\064\075\076\023\001\002\000\020\017\uff72\035\uff72\044" +
    "\177\055\uff72\057\uff72\061\uff72\077\uff72\001\002\000\016" +
    "\017\162\035\200\055\ufef2\057\ufef2\061\ufef2\077\ufef2\001" +
    "\002\000\012\055\ufef1\057\ufef1\061\ufef1\077\ufef1\001\002" +
    "\000\034\014\151\015\uff70\017\uff70\035\uff70\044\uff70\055" +
    "\uff70\057\uff70\060\uff70\061\uff70\062\uff70\073\uff70\077\uff70" +
    "\132\uff70\001\002\000\006\055\uff37\057\uff37\001\002\000" +
    "\042\005\046\006\106\007\027\010\051\011\061\012\021" +
    "\013\112\043\030\054\056\055\uff35\056\105\057\uff35\063" +
    "\053\064\075\065\154\076\023\001\002\000\010\055\uff31" +
    "\057\uff31\061\uff31\001\002\000\010\055\uff32\057\uff32\061" +
    "\uff32\001\002\000\044\017\uff5f\055\uff5f\057\uff5f\061\uff5f" +
    "\063\132\064\121\065\131\066\122\067\133\070\124\075" +
    "\127\077\uff5f\100\130\102\134\106\126\110\125\116\123" +
    "\001\002\000\116\014\uff45\015\uff45\017\uff45\035\uff45\037" +
    "\uff45\040\uff45\043\uff45\044\uff45\054\uff45\055\uff45\056\uff45" +
    "\057\uff45\060\uff45\061\uff45\062\uff45\063\uff45\064\uff45\065" +
    "\uff45\066\uff45\067\uff45\070\uff45\071\uff45\072\uff45\073\uff45" +
    "\074\uff45\075\uff45\077\uff45\100\uff45\102\uff45\103\uff45\104" +
    "\uff45\105\uff45\106\uff45\107\uff45\110\uff45\114\uff45\116\uff45" +
    "\132\uff45\001\002\000\010\061\uffa0\062\uffa0\132\uffa0\001" +
    "\002\000\010\061\215\062\uff9b\132\uff9b\001\002\000\034" +
    "\005\046\006\106\007\027\010\051\011\061\012\021\013" +
    "\112\043\030\054\056\056\105\063\053\064\075\076\023" +
    "\001\002\000\006\062\uff9c\132\uff9c\001\002\000\004\060" +
    "\220\001\002\000\056\005\046\006\106\007\027\010\051" +
    "\011\061\012\021\013\112\016\100\021\067\023\076\025" +
    "\025\034\104\042\020\043\030\045\022\047\063\054\056" +
    "\056\105\063\053\064\075\076\023\132\222\001\002\000" +
    "\110\002\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e" +
    "\012\uff8e\013\uff8e\016\uff8e\017\uff8e\021\uff8e\022\uff8e\023" +
    "\uff8e\024\uff8e\025\uff8e\026\233\027\232\032\uff8e\034\uff8e" +
    "\035\uff8e\042\uff8e\043\uff8e\045\uff8e\047\uff8e\050\uff8e\051" +
    "\uff8e\052\uff8e\054\uff8e\056\uff8e\063\uff8e\064\uff8e\076\uff8e" +
    "\102\uff8e\132\uff8e\134\uff8e\001\002\000\116\002\uffc1\005" +
    "\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1" +
    "\016\uffc1\017\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\034\uffc1" +
    "\035\uffc1\042\uffc1\043\uffc1\045\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\054\uffc1\056\uffc1\063\uffc1\064\uffc1\076\uffc1" +
    "\102\uffc1\132\uffc1\133\224\134\uffc1\001\002\000\114\002" +
    "\uff77\005\uff77\006\uff77\007\uff77\010\uff77\011\uff77\012\uff77" +
    "\013\uff77\016\uff77\017\uff77\021\uff77\022\uff77\023\uff77\024" +
    "\uff77\025\uff77\026\uff77\027\uff77\030\uff77\031\uff77\032\uff77" +
    "\034\uff77\035\uff77\042\uff77\043\uff77\045\uff77\047\uff77\050" +
    "\uff77\051\uff77\052\uff77\054\uff77\056\uff77\063\uff77\064\uff77" +
    "\076\uff77\102\uff77\132\uff77\134\uff77\001\002\000\100\005" +
    "\046\006\106\007\027\010\051\011\061\012\021\013\112" +
    "\016\100\017\016\021\067\022\044\023\076\024\031\025" +
    "\025\032\062\034\104\035\077\042\020\043\030\045\022" +
    "\047\063\050\065\051\057\052\114\054\056\056\105\063" +
    "\053\064\075\076\023\102\005\132\226\001\002\000\102" +
    "\005\046\006\106\007\027\010\051\011\061\012\021\013" +
    "\112\016\100\017\016\021\067\022\044\023\076\024\031" +
    "\025\025\032\062\034\104\035\077\042\020\043\030\045" +
    "\022\047\063\050\065\051\057\052\114\054\056\056\105" +
    "\063\053\064\075\076\023\102\005\132\226\134\230\001" +
    "\002\000\102\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1" +
    "\012\uffc1\013\uffc1\016\uffc1\017\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\025\uffc1\032\uffc1\034\uffc1\035\uffc1\042\uffc1" +
    "\043\uffc1\045\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\054" +
    "\uffc1\056\uffc1\063\uffc1\064\uffc1\076\uffc1\102\uffc1\132\uffc1" +
    "\134\uffc1\001\002\000\102\005\uff75\006\uff75\007\uff75\010" +
    "\uff75\011\uff75\012\uff75\013\uff75\016\uff75\017\uff75\021\uff75" +
    "\022\uff75\023\uff75\024\uff75\025\uff75\032\uff75\034\uff75\035" +
    "\uff75\042\uff75\043\uff75\045\uff75\047\uff75\050\uff75\051\uff75" +
    "\052\uff75\054\uff75\056\uff75\063\uff75\064\uff75\076\uff75\102" +
    "\uff75\132\uff75\134\uff75\001\002\000\114\002\uff76\005\uff76" +
    "\006\uff76\007\uff76\010\uff76\011\uff76\012\uff76\013\uff76\016" +
    "\uff76\017\uff76\021\uff76\022\uff76\023\uff76\024\uff76\025\uff76" +
    "\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76\034\uff76\035" +
    "\uff76\042\uff76\043\uff76\045\uff76\047\uff76\050\uff76\051\uff76" +
    "\052\uff76\054\uff76\056\uff76\063\uff76\064\uff76\076\uff76\102" +
    "\uff76\132\uff76\134\uff76\001\002\000\102\005\uff74\006\uff74" +
    "\007\uff74\010\uff74\011\uff74\012\uff74\013\uff74\016\uff74\017" +
    "\uff74\021\uff74\022\uff74\023\uff74\024\uff74\025\uff74\032\uff74" +
    "\034\uff74\035\uff74\042\uff74\043\uff74\045\uff74\047\uff74\050" +
    "\uff74\051\uff74\052\uff74\054\uff74\056\uff74\063\uff74\064\uff74" +
    "\076\uff74\102\uff74\132\uff74\134\uff74\001\002\000\004\060" +
    "\247\001\002\000\034\005\046\006\106\007\027\010\051" +
    "\011\061\012\021\013\112\043\030\054\056\056\105\063" +
    "\053\064\075\076\023\001\002\000\110\002\uff8c\005\uff8c" +
    "\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\016" +
    "\uff8c\017\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c" +
    "\026\236\027\235\032\uff8c\034\uff8c\035\uff8c\042\uff8c\043" +
    "\uff8c\045\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\054\uff8c" +
    "\056\uff8c\063\uff8c\064\uff8c\076\uff8c\102\uff8c\132\uff8c\134" +
    "\uff8c\001\002\000\004\060\242\001\002\000\034\005\046" +
    "\006\106\007\027\010\051\011\061\012\021\013\112\043" +
    "\030\054\056\056\105\063\053\064\075\076\023\001\002" +
    "\000\004\060\240\001\002\000\056\005\046\006\106\007" +
    "\027\010\051\011\061\012\021\013\112\016\100\021\067" +
    "\023\076\025\025\034\104\042\020\043\030\045\022\047" +
    "\063\054\056\056\105\063\053\064\075\076\023\132\222" +
    "\001\002\000\110\002\uff89\005\uff89\006\uff89\007\uff89\010" +
    "\uff89\011\uff89\012\uff89\013\uff89\016\uff89\017\uff89\021\uff89" +
    "\022\uff89\023\uff89\024\uff89\025\uff89\026\uff89\027\uff89\032" +
    "\uff89\034\uff89\035\uff89\042\uff89\043\uff89\045\uff89\047\uff89" +
    "\050\uff89\051\uff89\052\uff89\054\uff89\056\uff89\063\uff89\064" +
    "\uff89\076\uff89\102\uff89\132\uff89\134\uff89\001\002\000\056" +
    "\005\046\006\106\007\027\010\051\011\061\012\021\013" +
    "\112\016\100\021\067\023\076\025\025\034\104\042\020" +
    "\043\030\045\022\047\063\054\056\056\105\063\053\064" +
    "\075\076\023\132\222\001\002\000\104\002\uff8b\005\uff8b" +
    "\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b\016" +
    "\uff8b\017\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b" +
    "\032\uff8b\034\uff8b\035\uff8b\042\uff8b\043\uff8b\045\uff8b\047" +
    "\uff8b\050\uff8b\051\uff8b\052\uff8b\054\uff8b\056\uff8b\063\uff8b" +
    "\064\uff8b\076\uff8b\102\uff8b\132\uff8b\134\uff8b\001\002\000" +
    "\004\060\245\001\002\000\056\005\046\006\106\007\027" +
    "\010\051\011\061\012\021\013\112\016\100\021\067\023" +
    "\076\025\025\034\104\042\020\043\030\045\022\047\063" +
    "\054\056\056\105\063\053\064\075\076\023\132\222\001" +
    "\002\000\110\002\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a" +
    "\011\uff8a\012\uff8a\013\uff8a\016\uff8a\017\uff8a\021\uff8a\022" +
    "\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\032\uff8a" +
    "\034\uff8a\035\uff8a\042\uff8a\043\uff8a\045\uff8a\047\uff8a\050" +
    "\uff8a\051\uff8a\052\uff8a\054\uff8a\056\uff8a\063\uff8a\064\uff8a" +
    "\076\uff8a\102\uff8a\132\uff8a\134\uff8a\001\002\000\056\005" +
    "\046\006\106\007\027\010\051\011\061\012\021\013\112" +
    "\016\100\021\067\023\076\025\025\034\104\042\020\043" +
    "\030\045\022\047\063\054\056\056\105\063\053\064\075" +
    "\076\023\132\222\001\002\000\104\002\uff8d\005\uff8d\006" +
    "\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\016\uff8d" +
    "\017\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\032" +
    "\uff8d\034\uff8d\035\uff8d\042\uff8d\043\uff8d\045\uff8d\047\uff8d" +
    "\050\uff8d\051\uff8d\052\uff8d\054\uff8d\056\uff8d\063\uff8d\064" +
    "\uff8d\076\uff8d\102\uff8d\132\uff8d\134\uff8d\001\002\000\032" +
    "\005\046\006\106\007\027\010\051\011\061\012\021\013" +
    "\112\054\056\056\105\063\251\064\254\076\023\001\002" +
    "\000\106\014\uff4d\015\uff4d\017\uff4d\035\uff4d\037\uff4d\040" +
    "\uff4d\043\uff4d\044\uff4d\055\uff4d\057\uff4d\060\uff4d\061\uff4d" +
    "\062\uff4d\063\uff4d\064\uff4d\065\uff4d\066\uff4d\067\uff4d\070" +
    "\uff4d\071\uff4d\072\uff4d\073\uff4d\075\uff4d\077\uff4d\100\uff4d" +
    "\102\uff4d\103\uff4d\104\uff4d\105\uff4d\106\uff4d\107\uff4d\110" +
    "\uff4d\116\uff4d\132\uff4d\001\002\000\106\014\uff51\015\uff51" +
    "\017\uff51\035\uff51\037\uff51\040\uff51\043\uff51\044\uff51\055" +
    "\uff51\057\uff51\060\uff51\061\uff51\062\uff51\063\uff51\064\uff51" +
    "\065\uff51\066\uff51\067\uff51\070\uff51\071\uff51\072\uff51\073" +
    "\uff51\075\uff51\077\uff51\100\uff51\102\uff51\103\uff51\104\uff51" +
    "\105\uff51\106\uff51\107\uff51\110\uff51\116\uff51\132\uff51\001" +
    "\002\000\032\005\046\006\106\007\027\010\051\011\061" +
    "\012\021\013\112\054\056\056\105\063\251\064\254\076" +
    "\023\001\002\000\106\014\uff4e\015\uff4e\017\uff4e\035\uff4e" +
    "\037\uff4e\040\uff4e\043\uff4e\044\uff4e\055\uff4e\057\uff4e\060" +
    "\uff4e\061\uff4e\062\uff4e\063\uff4e\064\uff4e\065\uff4e\066\uff4e" +
    "\067\uff4e\070\uff4e\071\uff4e\072\uff4e\073\uff4e\075\uff4e\077" +
    "\uff4e\100\uff4e\102\uff4e\103\uff4e\104\uff4e\105\uff4e\106\uff4e" +
    "\107\uff4e\110\uff4e\116\uff4e\132\uff4e\001\002\000\106\014" +
    "\uff4f\015\uff4f\017\uff4f\035\uff4f\037\uff4f\040\uff4f\043\uff4f" +
    "\044\uff4f\055\uff4f\057\uff4f\060\uff4f\061\uff4f\062\uff4f\063" +
    "\uff4f\064\uff4f\065\uff4f\066\uff4f\067\uff4f\070\uff4f\071\uff4f" +
    "\072\uff4f\073\uff4f\075\uff4f\077\uff4f\100\uff4f\102\uff4f\103" +
    "\uff4f\104\uff4f\105\uff4f\106\uff4f\107\uff4f\110\uff4f\116\uff4f" +
    "\132\uff4f\001\002\000\004\002\001\001\002\000\034\005" +
    "\046\006\106\007\027\010\051\011\061\012\021\013\112" +
    "\043\030\054\056\056\105\063\053\064\075\076\023\001" +
    "\002\000\034\005\046\006\106\007\027\010\051\011\061" +
    "\012\021\013\112\043\030\054\056\056\105\063\053\064" +
    "\075\076\023\001\002\000\006\062\uffb4\132\uffb4\001\002" +
    "\000\034\005\046\006\106\007\027\010\051\011\061\012" +
    "\021\013\112\043\030\054\056\056\105\063\053\064\075" +
    "\076\023\001\002\000\006\062\uffb5\132\uffb5\001\002\000" +
    "\006\062\uffb3\132\uffb3\001\002\000\010\062\uffb0\073\267" +
    "\132\uffb0\001\002\000\034\005\046\006\106\007\027\010" +
    "\051\011\061\012\021\013\112\043\030\054\056\056\105" +
    "\063\053\064\075\076\023\001\002\000\006\062\uffb1\132" +
    "\uffb1\001\002\000\006\062\uffb2\132\uffb2\001\002\000\056" +
    "\005\046\006\106\007\027\010\051\011\061\012\021\013" +
    "\112\016\100\021\067\023\076\025\025\034\104\042\020" +
    "\043\030\045\022\047\063\054\056\056\105\063\053\064" +
    "\075\076\023\132\222\001\002\000\006\030\275\031\274" +
    "\001\002\000\004\060\321\001\002\000\036\005\046\006" +
    "\106\007\027\010\051\011\061\012\021\013\112\043\030" +
    "\054\056\056\105\060\uff7a\063\053\064\075\076\023\001" +
    "\002\000\004\060\314\001\002\000\112\002\uff86\005\uff86" +
    "\006\uff86\007\uff86\010\uff86\011\uff86\012\uff86\013\uff86\016" +
    "\uff86\017\uff86\021\uff86\022\uff86\023\uff86\024\uff86\025\uff86" +
    "\027\302\030\275\031\300\032\uff86\034\uff86\035\uff86\042" +
    "\uff86\043\uff86\045\uff86\047\uff86\050\uff86\051\uff86\052\uff86" +
    "\054\uff86\056\uff86\063\uff86\064\uff86\076\uff86\102\uff86\132" +
    "\uff86\134\uff86\001\002\000\004\060\312\001\002\000\004" +
    "\060\310\001\002\000\004\060\303\001\002\000\056\005" +
    "\046\006\106\007\027\010\051\011\061\012\021\013\112" +
    "\016\100\021\067\023\076\025\025\034\104\042\020\043" +
    "\030\045\022\047\063\054\056\056\105\063\053\064\075" +
    "\076\023\132\222\001\002\000\106\002\uff84\005\uff84\006" +
    "\uff84\007\uff84\010\uff84\011\uff84\012\uff84\013\uff84\016\uff84" +
    "\017\uff84\021\uff84\022\uff84\023\uff84\024\uff84\025\uff84\031" +
    "\305\032\uff84\034\uff84\035\uff84\042\uff84\043\uff84\045\uff84" +
    "\047\uff84\050\uff84\051\uff84\052\uff84\054\uff84\056\uff84\063" +
    "\uff84\064\uff84\076\uff84\102\uff84\132\uff84\134\uff84\001\002" +
    "\000\004\060\306\001\002\000\056\005\046\006\106\007" +
    "\027\010\051\011\061\012\021\013\112\016\100\021\067" +
    "\023\076\025\025\034\104\042\020\043\030\045\022\047" +
    "\063\054\056\056\105\063\053\064\075\076\023\132\222" +
    "\001\002\000\104\002\uff85\005\uff85\006\uff85\007\uff85\010" +
    "\uff85\011\uff85\012\uff85\013\uff85\016\uff85\017\uff85\021\uff85" +
    "\022\uff85\023\uff85\024\uff85\025\uff85\032\uff85\034\uff85\035" +
    "\uff85\042\uff85\043\uff85\045\uff85\047\uff85\050\uff85\051\uff85" +
    "\052\uff85\054\uff85\056\uff85\063\uff85\064\uff85\076\uff85\102" +
    "\uff85\132\uff85\134\uff85\001\002\000\056\005\046\006\106" +
    "\007\027\010\051\011\061\012\021\013\112\016\100\021" +
    "\067\023\076\025\025\034\104\042\020\043\030\045\022" +
    "\047\063\054\056\056\105\063\053\064\075\076\023\132" +
    "\222\001\002\000\112\002\uff80\005\uff80\006\uff80\007\uff80" +
    "\010\uff80\011\uff80\012\uff80\013\uff80\016\uff80\017\uff80\021" +
    "\uff80\022\uff80\023\uff80\024\uff80\025\uff80\027\uff80\030\uff80" +
    "\031\uff80\032\uff80\034\uff80\035\uff80\042\uff80\043\uff80\045" +
    "\uff80\047\uff80\050\uff80\051\uff80\052\uff80\054\uff80\056\uff80" +
    "\063\uff80\064\uff80\076\uff80\102\uff80\132\uff80\134\uff80\001" +
    "\002\000\056\005\046\006\106\007\027\010\051\011\061" +
    "\012\021\013\112\016\100\021\067\023\076\025\025\034" +
    "\104\042\020\043\030\045\022\047\063\054\056\056\105" +
    "\063\053\064\075\076\023\132\222\001\002\000\104\002" +
    "\uff83\005\uff83\006\uff83\007\uff83\010\uff83\011\uff83\012\uff83" +
    "\013\uff83\016\uff83\017\uff83\021\uff83\022\uff83\023\uff83\024" +
    "\uff83\025\uff83\032\uff83\034\uff83\035\uff83\042\uff83\043\uff83" +
    "\045\uff83\047\uff83\050\uff83\051\uff83\052\uff83\054\uff83\056" +
    "\uff83\063\uff83\064\uff83\076\uff83\102\uff83\132\uff83\134\uff83" +
    "\001\002\000\056\005\046\006\106\007\027\010\051\011" +
    "\061\012\021\013\112\016\100\021\067\023\076\025\025" +
    "\034\104\042\020\043\030\045\022\047\063\054\056\056" +
    "\105\063\053\064\075\076\023\132\222\001\002\000\112" +
    "\002\uff81\005\uff81\006\uff81\007\uff81\010\uff81\011\uff81\012" +
    "\uff81\013\uff81\016\uff81\017\uff81\021\uff81\022\uff81\023\uff81" +
    "\024\uff81\025\uff81\027\uff81\030\uff81\031\uff81\032\uff81\034" +
    "\uff81\035\uff81\042\uff81\043\uff81\045\uff81\047\uff81\050\uff81" +
    "\051\uff81\052\uff81\054\uff81\056\uff81\063\uff81\064\uff81\076" +
    "\uff81\102\uff81\132\uff81\134\uff81\001\002\000\006\015\317" +
    "\060\uff79\001\002\000\004\012\320\001\002\000\004\060" +
    "\uff78\001\002\000\056\005\046\006\106\007\027\010\051" +
    "\011\061\012\021\013\112\016\100\021\067\023\076\025" +
    "\025\034\104\042\020\043\030\045\022\047\063\054\056" +
    "\056\105\063\053\064\075\076\023\132\222\001\002\000" +
    "\104\002\uff82\005\uff82\006\uff82\007\uff82\010\uff82\011\uff82" +
    "\012\uff82\013\uff82\016\uff82\017\uff82\021\uff82\022\uff82\023" +
    "\uff82\024\uff82\025\uff82\032\uff82\034\uff82\035\uff82\042\uff82" +
    "\043\uff82\045\uff82\047\uff82\050\uff82\051\uff82\052\uff82\054" +
    "\uff82\056\uff82\063\uff82\064\uff82\076\uff82\102\uff82\132\uff82" +
    "\134\uff82\001\002\000\104\002\uffed\005\uffed\006\uffed\007" +
    "\uffed\010\uffed\011\uffed\012\uffed\013\uffed\016\uffed\017\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\032\uffed\034" +
    "\uffed\035\uffed\042\uffed\043\uffed\045\uffed\047\uffed\050\uffed" +
    "\051\uffed\052\uffed\054\uffed\056\uffed\063\uffed\064\uffed\076" +
    "\uffed\102\uffed\132\uffed\134\uffed\001\002\000\012\017\ufff0" +
    "\022\ufff0\024\ufff0\102\ufff0\001\002\000\104\002\uffee\005" +
    "\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee" +
    "\016\uffee\017\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025" +
    "\uffee\032\uffee\034\uffee\035\uffee\042\uffee\043\uffee\045\uffee" +
    "\047\uffee\050\uffee\051\uffee\052\uffee\054\uffee\056\uffee\063" +
    "\uffee\064\uffee\076\uffee\102\uffee\132\uffee\134\uffee\001\002" +
    "\000\004\024\031\001\002\000\104\002\uffef\005\uffef\006" +
    "\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\016\uffef" +
    "\017\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\032" +
    "\uffef\034\uffef\035\uffef\042\uffef\043\uffef\045\uffef\047\uffef" +
    "\050\uffef\051\uffef\052\uffef\054\uffef\056\uffef\063\uffef\064" +
    "\uffef\076\uffef\102\uffef\132\uffef\134\uffef\001\002\000\104" +
    "\002\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\013\uffec\016\uffec\017\uffec\021\uffec\022\uffec\023\uffec" +
    "\024\uffec\025\uffec\032\uffec\034\uffec\035\uffec\042\uffec\043" +
    "\uffec\045\uffec\047\uffec\050\uffec\051\uffec\052\uffec\054\uffec" +
    "\056\uffec\063\uffec\064\uffec\076\uffec\102\uffec\132\uffec\134" +
    "\uffec\001\002\000\012\060\uff19\061\334\062\uff19\132\uff19" +
    "\001\002\000\012\060\uff17\061\uff17\062\uff17\132\uff17\001" +
    "\002\000\006\062\uffa7\132\uffa7\001\002\000\042\005\046" +
    "\006\106\007\027\010\051\011\061\012\021\013\112\043" +
    "\030\054\056\056\105\060\uff18\062\uff18\063\053\064\075" +
    "\076\023\132\uff18\001\002\000\012\060\uff16\061\uff16\062" +
    "\uff16\132\uff16\001\002\000\004\037\337\001\002\000\034" +
    "\005\046\006\106\007\027\010\051\011\061\012\021\013" +
    "\112\043\030\054\056\056\105\063\053\064\075\076\023" +
    "\001\002\000\004\060\341\001\002\000\056\005\046\006" +
    "\106\007\027\010\051\011\061\012\021\013\112\016\100" +
    "\021\067\023\076\025\025\034\104\042\020\043\030\045" +
    "\022\047\063\054\056\056\105\063\053\064\075\076\023" +
    "\132\222\001\002\000\104\002\uff87\005\uff87\006\uff87\007" +
    "\uff87\010\uff87\011\uff87\012\uff87\013\uff87\016\uff87\017\uff87" +
    "\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87\032\uff87\034" +
    "\uff87\035\uff87\042\uff87\043\uff87\045\uff87\047\uff87\050\uff87" +
    "\051\uff87\052\uff87\054\uff87\056\uff87\063\uff87\064\uff87\076" +
    "\uff87\102\uff87\132\uff87\134\uff87\001\002\000\034\005\046" +
    "\006\106\007\027\010\051\011\061\012\021\013\112\043" +
    "\030\054\056\056\105\063\053\064\075\076\023\001\002" +
    "\000\056\005\046\006\106\007\027\010\051\011\061\012" +
    "\021\013\112\016\100\021\067\023\076\025\025\034\104" +
    "\042\020\043\030\045\022\047\063\054\056\056\105\063" +
    "\053\064\075\076\023\132\222\001\002\000\104\002\uff7f" +
    "\005\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f\012\uff7f\013" +
    "\uff7f\016\uff7f\017\uff7f\021\uff7f\022\uff7f\023\uff7f\024\uff7f" +
    "\025\uff7f\032\uff7f\034\uff7f\035\uff7f\042\uff7f\043\uff7f\045" +
    "\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f\054\uff7f\056\uff7f" +
    "\063\uff7f\064\uff7f\076\uff7f\102\uff7f\132\uff7f\134\uff7f\001" +
    "\002\000\006\060\uff7d\061\uff7d\001\002\000\004\060\350" +
    "\001\002\000\056\005\046\006\106\007\027\010\051\011" +
    "\061\012\021\013\112\016\100\021\067\023\076\025\025" +
    "\034\104\042\020\043\030\045\022\047\063\054\056\056" +
    "\105\063\053\064\075\076\023\132\222\001\002\000\104" +
    "\002\uff88\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012" +
    "\uff88\013\uff88\016\uff88\017\uff88\021\uff88\022\uff88\023\uff88" +
    "\024\uff88\025\uff88\032\uff88\034\uff88\035\uff88\042\uff88\043" +
    "\uff88\045\uff88\047\uff88\050\uff88\051\uff88\052\uff88\054\uff88" +
    "\056\uff88\063\uff88\064\uff88\076\uff88\102\uff88\132\uff88\134" +
    "\uff88\001\002\000\004\055\354\001\002\000\116\014\uff48" +
    "\015\uff48\017\uff48\035\uff48\037\uff48\040\uff48\043\uff48\044" +
    "\uff48\054\uff48\055\uff48\056\uff48\057\uff48\060\uff48\061\uff48" +
    "\062\uff48\063\uff48\064\uff48\065\uff48\066\uff48\067\uff48\070" +
    "\uff48\071\uff48\072\uff48\073\uff48\074\uff48\075\uff48\077\uff48" +
    "\100\uff48\102\uff48\103\uff48\104\uff48\105\uff48\106\uff48\107" +
    "\uff48\110\uff48\114\uff48\116\uff48\132\uff48\001\002\000\116" +
    "\014\uff47\015\uff47\017\uff47\035\uff47\037\uff47\040\uff47\043" +
    "\uff47\044\uff47\054\uff47\055\uff47\056\uff47\057\uff47\060\uff47" +
    "\061\uff47\062\uff47\063\uff47\064\uff47\065\uff47\066\uff47\067" +
    "\uff47\070\uff47\071\uff47\072\uff47\073\uff47\074\uff47\075\uff47" +
    "\077\uff47\100\uff47\102\uff47\103\uff47\104\uff47\105\uff47\106" +
    "\uff47\107\uff47\110\uff47\114\uff47\116\uff47\132\uff47\001\002" +
    "\000\004\012\356\001\002\000\010\061\uff9d\062\uff9d\132" +
    "\uff9d\001\002\000\106\014\uff52\015\uff52\017\uff52\035\uff52" +
    "\037\uff52\040\uff52\043\uff52\044\uff52\055\uff52\057\uff52\060" +
    "\uff52\061\uff52\062\uff52\063\uff52\064\uff52\065\uff52\066\uff52" +
    "\067\uff52\070\uff52\071\uff52\072\uff52\073\uff52\075\uff52\077" +
    "\uff52\100\uff52\102\uff52\103\uff52\104\uff52\105\uff52\106\uff52" +
    "\107\uff52\110\uff52\116\uff52\132\uff52\001\002\000\032\005" +
    "\uff64\006\uff64\007\uff64\010\uff64\011\uff64\012\uff64\013\uff64" +
    "\054\uff64\056\uff64\063\uff64\064\uff64\076\uff64\001\002\000" +
    "\032\005\uff63\006\uff63\007\uff63\010\uff63\011\uff63\012\uff63" +
    "\013\uff63\054\uff63\056\uff63\063\uff63\064\uff63\076\uff63\001" +
    "\002\000\032\005\046\006\106\007\027\010\051\011\061" +
    "\012\021\013\112\054\056\056\105\063\053\064\075\076" +
    "\023\001\002\000\032\005\uff68\006\uff68\007\uff68\010\uff68" +
    "\011\uff68\012\uff68\013\uff68\054\uff68\056\uff68\063\uff68\064" +
    "\uff68\076\uff68\001\002\000\032\005\uff65\006\uff65\007\uff65" +
    "\010\uff65\011\uff65\012\uff65\013\uff65\054\uff65\056\uff65\063" +
    "\uff65\064\uff65\076\uff65\001\002\000\032\005\uff67\006\uff67" +
    "\007\uff67\010\uff67\011\uff67\012\uff67\013\uff67\054\uff67\056" +
    "\uff67\063\uff67\064\uff67\076\uff67\001\002\000\032\005\uff69" +
    "\006\uff69\007\uff69\010\uff69\011\uff69\012\uff69\013\uff69\054" +
    "\uff69\056\uff69\063\uff69\064\uff69\076\uff69\001\002\000\032" +
    "\005\uff66\006\uff66\007\uff66\010\uff66\011\uff66\012\uff66\013" +
    "\uff66\054\uff66\056\uff66\063\uff66\064\uff66\076\uff66\001\002" +
    "\000\004\037\373\001\002\000\034\005\uff61\006\uff61\007" +
    "\uff61\010\uff61\011\uff61\012\uff61\013\uff61\043\372\054\uff61" +
    "\056\uff61\063\uff61\064\uff61\076\uff61\001\002\000\032\005" +
    "\uff60\006\uff60\007\uff60\010\uff60\011\uff60\012\uff60\013\uff60" +
    "\054\uff60\056\uff60\063\uff60\064\uff60\076\uff60\001\002\000" +
    "\032\005\uff62\006\uff62\007\uff62\010\uff62\011\uff62\012\uff62" +
    "\013\uff62\054\uff62\056\uff62\063\uff62\064\uff62\076\uff62\001" +
    "\002\000\106\014\uff6a\015\uff6a\017\uff6a\035\uff6a\037\uff6a" +
    "\040\uff6a\043\uff6a\044\uff6a\055\uff6a\057\uff6a\060\uff6a\061" +
    "\uff6a\062\uff6a\063\132\064\121\065\131\066\122\067\133" +
    "\070\124\071\uff6a\072\uff6a\073\uff6a\075\127\077\uff6a\100" +
    "\130\102\134\103\uff6a\104\uff6a\105\uff6a\106\126\107\uff6a" +
    "\110\125\116\123\132\uff6a\001\002\000\006\054\376\060" +
    "\377\001\002\000\042\005\046\006\106\007\027\010\051" +
    "\011\061\012\021\013\112\043\030\054\056\055\u0107\056" +
    "\105\063\053\064\075\065\u0102\076\023\114\u0104\001\002" +
    "\000\056\005\046\006\106\007\027\010\051\011\061\012" +
    "\021\013\112\016\100\021\067\023\076\025\025\034\104" +
    "\042\020\043\030\045\022\047\063\054\056\056\105\063" +
    "\053\064\075\076\023\132\222\001\002\000\104\002\uff02" +
    "\005\uff02\006\uff02\007\uff02\010\uff02\011\uff02\012\uff02\013" +
    "\uff02\016\uff02\017\uff02\021\uff02\022\uff02\023\uff02\024\uff02" +
    "\025\uff02\032\uff02\034\uff02\035\uff02\042\uff02\043\uff02\045" +
    "\uff02\047\uff02\050\uff02\051\uff02\052\uff02\054\uff02\056\uff02" +
    "\063\uff02\064\uff02\076\uff02\102\uff02\132\uff02\134\uff02\001" +
    "\002\000\004\055\u0111\001\002\000\034\005\046\006\106" +
    "\007\027\010\051\011\061\012\021\013\112\043\030\054" +
    "\056\056\105\063\053\064\075\076\023\001\002\000\006" +
    "\055\ufefe\061\ufefe\001\002\000\034\005\046\006\106\007" +
    "\027\010\051\011\061\012\021\013\112\043\030\054\056" +
    "\056\105\063\053\064\075\076\023\001\002\000\006\055" +
    "\uff00\061\u010d\001\002\000\012\017\162\055\ufefc\061\ufefc" +
    "\073\u010b\001\002\000\004\060\u0108\001\002\000\056\005" +
    "\046\006\106\007\027\010\051\011\061\012\021\013\112" +
    "\016\100\021\067\023\076\025\025\034\104\042\020\043" +
    "\030\045\022\047\063\054\056\056\105\063\053\064\075" +
    "\076\023\132\222\001\002\000\104\002\uff01\005\uff01\006" +
    "\uff01\007\uff01\010\uff01\011\uff01\012\uff01\013\uff01\016\uff01" +
    "\017\uff01\021\uff01\022\uff01\023\uff01\024\uff01\025\uff01\032" +
    "\uff01\034\uff01\035\uff01\042\uff01\043\uff01\045\uff01\047\uff01" +
    "\050\uff01\051\uff01\052\uff01\054\uff01\056\uff01\063\uff01\064" +
    "\uff01\076\uff01\102\uff01\132\uff01\134\uff01\001\002\000\006" +
    "\055\ufefb\061\ufefb\001\002\000\034\005\046\006\106\007" +
    "\027\010\051\011\061\012\021\013\112\043\030\054\056" +
    "\056\105\063\053\064\075\076\023\001\002\000\006\055" +
    "\ufefa\061\ufefa\001\002\000\042\005\046\006\106\007\027" +
    "\010\051\011\061\012\021\013\112\043\030\054\056\055" +
    "\ufeff\056\105\063\053\064\075\065\u0102\076\023\114\u0104" +
    "\001\002\000\006\055\ufefd\061\ufefd\001\002\000\006\055" +
    "\ufef9\061\ufef9\001\002\000\006\055\ufef8\061\ufef8\001\002" +
    "\000\004\060\u0112\001\002\000\056\005\046\006\106\007" +
    "\027\010\051\011\061\012\021\013\112\016\100\021\067" +
    "\023\076\025\025\034\104\042\020\043\030\045\022\047" +
    "\063\054\056\056\105\063\053\064\075\076\023\132\222" +
    "\001\002\000\104\002\uff03\005\uff03\006\uff03\007\uff03\010" +
    "\uff03\011\uff03\012\uff03\013\uff03\016\uff03\017\uff03\021\uff03" +
    "\022\uff03\023\uff03\024\uff03\025\uff03\032\uff03\034\uff03\035" +
    "\uff03\042\uff03\043\uff03\045\uff03\047\uff03\050\uff03\051\uff03" +
    "\052\uff03\054\uff03\056\uff03\063\uff03\064\uff03\076\uff03\102" +
    "\uff03\132\uff03\134\uff03\001\002\000\102\002\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\016" +
    "\ufff8\017\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8" +
    "\032\ufff8\034\ufff8\035\ufff8\042\ufff8\043\ufff8\045\ufff8\047" +
    "\ufff8\050\ufff8\051\ufff8\052\ufff8\054\ufff8\056\ufff8\063\ufff8" +
    "\064\ufff8\076\ufff8\102\ufff8\132\ufff8\001\002\000\004\054" +
    "\u0123\001\002\000\006\054\uffe9\076\u0117\001\002\000\006" +
    "\012\u011b\054\u0118\001\002\000\006\012\u011b\054\u0118\001" +
    "\002\000\012\014\ufffe\044\ufffe\055\ufffe\077\ufffe\001\002" +
    "\000\010\014\u011c\044\u011e\077\u011d\001\002\000\012\014" +
    "\ufffb\044\ufffb\055\ufffb\077\ufffb\001\002\000\006\012\u011b" +
    "\054\u0118\001\002\000\004\054\uffe8\001\002\000\006\012" +
    "\u011b\054\u0118\001\002\000\012\014\u011c\044\ufffc\055\ufffc" +
    "\077\ufffc\001\002\000\012\014\ufffd\044\ufffd\055\ufffd\077" +
    "\ufffd\001\002\000\010\014\u011c\044\u011e\055\u0122\001\002" +
    "\000\012\014\ufffa\044\ufffa\055\ufffa\077\ufffa\001\002\000" +
    "\012\012\u0134\055\u0133\065\u0130\114\u012e\001\002\000\006" +
    "\060\u0126\113\u0125\001\002\000\034\005\046\006\106\007" +
    "\027\010\051\011\061\012\021\013\112\043\030\054\056" +
    "\056\105\063\053\064\075\076\023\001\002\000\056\005" +
    "\046\006\106\007\027\010\051\011\061\012\021\013\112" +
    "\016\100\021\067\023\076\025\025\034\104\042\020\043" +
    "\030\045\022\047\063\054\056\056\105\063\053\064\075" +
    "\076\023\132\222\001\002\000\104\002\uffea\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\016\uffea" +
    "\017\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\032" +
    "\uffea\034\uffea\035\uffea\042\uffea\043\uffea\045\uffea\047\uffea" +
    "\050\uffea\051\uffea\052\uffea\054\uffea\056\uffea\063\uffea\064" +
    "\uffea\076\uffea\102\uffea\132\uffea\134\uffea\001\002\000\004" +
    "\060\u0129\001\002\000\056\005\046\006\106\007\027\010" +
    "\051\011\061\012\021\013\112\016\100\021\067\023\076" +
    "\025\025\034\104\042\020\043\030\045\022\047\063\054" +
    "\056\056\105\063\053\064\075\076\023\132\222\001\002" +
    "\000\104\002\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\016\uffeb\017\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\032\uffeb\034\uffeb\035\uffeb\042" +
    "\uffeb\043\uffeb\045\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb" +
    "\054\uffeb\056\uffeb\063\uffeb\064\uffeb\076\uffeb\102\uffeb\132" +
    "\uffeb\134\uffeb\001\002\000\006\055\uffe5\061\u0140\001\002" +
    "\000\006\055\uffe2\061\u013d\001\002\000\004\055\uffe0\001" +
    "\002\000\004\012\u0134\001\002\000\006\055\uffdf\061\uffdf" +
    "\001\002\000\010\012\u0134\055\uffdd\061\uffdd\001\002\000" +
    "\004\055\u0139\001\002\000\010\055\uffd8\061\uffd8\073\u0137" +
    "\001\002\000\006\060\uffe6\113\uffe6\001\002\000\012\055" +
    "\uffd5\060\u0135\061\uffd5\073\uffd5\001\002\000\034\005\046" +
    "\006\106\007\027\010\051\011\061\012\021\013\112\043" +
    "\030\054\056\056\105\063\053\064\075\076\023\001\002" +
    "\000\010\055\uffd6\061\uffd6\073\uffd6\001\002\000\034\005" +
    "\046\006\106\007\027\010\051\011\061\012\021\013\112" +
    "\043\030\054\056\056\105\063\053\064\075\076\023\001" +
    "\002\000\006\055\uffd7\061\uffd7\001\002\000\006\060\uffe7" +
    "\113\uffe7\001\002\000\006\055\uffdc\061\uffdc\001\002\000" +
    "\006\055\uffda\061\u013c\001\002\000\004\055\uffd9\001\002" +
    "\000\006\012\u0134\114\u012e\001\002\000\004\055\uffe1\001" +
    "\002\000\006\055\uffdb\061\uffdb\001\002\000\006\012\u0134" +
    "\065\u0130\001\002\000\006\055\uffe4\061\u0143\001\002\000" +
    "\006\055\uffde\061\uffde\001\002\000\006\012\u0134\114\u012e" +
    "\001\002\000\004\055\uffe3\001\002\000\034\014\uff6d\015" +
    "\uff6d\017\uff6d\035\uff6d\044\uff6d\055\uff6d\057\uff6d\060\uff6d" +
    "\061\uff6d\062\uff6d\073\uff6d\077\uff6d\132\uff6d\001\002\000" +
    "\006\062\uffaf\132\uffaf\001\002\000\004\012\u0148\001\002" +
    "\000\010\061\uff9f\062\uff9f\132\uff9f\001\002\000\116\014" +
    "\uff44\015\uff44\017\uff44\035\uff44\037\uff44\040\uff44\043\uff44" +
    "\044\uff44\054\uff44\055\uff44\056\uff44\057\uff44\060\uff44\061" +
    "\uff44\062\uff44\063\uff44\064\uff44\065\uff44\066\uff44\067\uff44" +
    "\070\uff44\071\uff44\072\uff44\073\uff44\074\uff44\075\uff44\077" +
    "\uff44\100\uff44\102\uff44\103\uff44\104\uff44\105\uff44\106\uff44" +
    "\107\uff44\110\uff44\114\uff44\116\uff44\132\uff44\001\002\000" +
    "\006\061\u015d\077\uff10\001\002\000\004\077\u015c\001\002" +
    "\000\004\077\uff14\001\002\000\004\077\uff15\001\002\000" +
    "\032\005\046\006\106\007\027\010\051\011\061\012\021" +
    "\013\112\054\056\056\105\063\053\064\075\076\023\001" +
    "\002\000\010\017\162\061\uff06\077\uff06\001\002\000\006" +
    "\061\u0156\077\uff09\001\002\000\012\017\162\060\u0153\061" +
    "\uff07\077\uff07\001\002\000\004\077\uff0b\001\002\000\034" +
    "\005\046\006\106\007\027\010\051\011\061\012\021\013" +
    "\112\043\030\054\056\056\105\063\053\064\075\076\023" +
    "\001\002\000\010\017\162\061\uff0f\077\uff0f\001\002\000" +
    "\004\077\uff13\001\002\000\040\005\046\006\106\007\027" +
    "\010\051\011\061\012\021\013\112\043\030\054\056\056" +
    "\105\063\053\064\075\065\154\076\023\077\uff08\001\002" +
    "\000\006\061\uff04\077\uff04\001\002\000\006\061\uff05\077" +
    "\uff05\001\002\000\004\077\uff0a\001\002\000\040\017\162" +
    "\061\uff0e\063\132\064\121\065\131\066\122\067\133\070" +
    "\124\075\127\077\uff0e\100\130\102\134\106\126\110\125" +
    "\116\123\001\002\000\004\077\uff12\001\002\000\116\014" +
    "\uff43\015\uff43\017\uff43\035\uff43\037\uff43\040\uff43\043\uff43" +
    "\044\uff43\054\uff43\055\uff43\056\uff43\057\uff43\060\uff43\061" +
    "\uff43\062\uff43\063\uff43\064\uff43\065\uff43\066\uff43\067\uff43" +
    "\070\uff43\071\uff43\072\uff43\073\uff43\074\uff43\075\uff43\077" +
    "\uff43\100\uff43\102\uff43\103\uff43\104\uff43\105\uff43\106\uff43" +
    "\107\uff43\110\uff43\114\uff43\116\uff43\132\uff43\001\002\000" +
    "\040\005\046\006\106\007\027\010\051\011\061\012\021" +
    "\013\112\043\030\054\056\056\105\063\053\064\075\076" +
    "\023\077\uff11\114\u015e\001\002\000\032\005\046\006\106" +
    "\007\027\010\051\011\061\012\021\013\112\054\056\056" +
    "\105\063\053\064\075\076\023\001\002\000\004\060\u0160" +
    "\001\002\000\034\005\046\006\106\007\027\010\051\011" +
    "\061\012\021\013\112\043\030\054\056\056\105\063\053" +
    "\064\075\076\023\001\002\000\006\061\uff0d\077\uff0d\001" +
    "\002\000\036\061\uff0c\063\132\064\121\065\131\066\122" +
    "\067\133\070\124\075\127\077\uff0c\100\130\102\134\106" +
    "\126\110\125\116\123\001\002\000\006\012\u011b\054\u0118" +
    "\001\002\000\010\014\u011c\044\u011e\077\u0165\001\002\000" +
    "\116\014\uffff\015\uffff\017\uffff\035\uffff\037\uffff\040\uffff" +
    "\043\uffff\044\uffff\054\uffff\055\uffff\056\uffff\057\uffff\060" +
    "\uffff\061\uffff\062\uffff\063\uffff\064\uffff\065\uffff\066\uffff" +
    "\067\uffff\070\uffff\071\uffff\072\uffff\073\uffff\074\uffff\075" +
    "\uffff\077\uffff\100\uffff\102\uffff\103\uffff\104\uffff\105\uffff" +
    "\106\uffff\107\uffff\110\uffff\114\uffff\116\uffff\132\uffff\001" +
    "\002\000\010\061\uff9e\062\uff9e\132\uff9e\001\002\000\104" +
    "\002\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90\012" +
    "\uff90\013\uff90\016\uff90\017\uff90\021\uff90\022\uff90\023\uff90" +
    "\024\uff90\025\uff90\032\uff90\034\uff90\035\uff90\042\uff90\043" +
    "\uff90\045\uff90\047\uff90\050\uff90\051\uff90\052\uff90\054\uff90" +
    "\056\uff90\063\uff90\064\uff90\076\uff90\102\uff90\132\uff90\134" +
    "\uff90\001\002\000\104\002\uff91\005\uff91\006\uff91\007\uff91" +
    "\010\uff91\011\uff91\012\uff91\013\uff91\016\uff91\017\uff91\021" +
    "\uff91\022\uff91\023\uff91\024\uff91\025\uff91\032\uff91\034\uff91" +
    "\035\uff91\042\uff91\043\uff91\045\uff91\047\uff91\050\uff91\051" +
    "\uff91\052\uff91\054\uff91\056\uff91\063\uff91\064\uff91\076\uff91" +
    "\102\uff91\132\uff91\134\uff91\001\002\000\104\002\uff8f\005" +
    "\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f" +
    "\016\uff8f\017\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025" +
    "\uff8f\032\uff8f\034\uff8f\035\uff8f\042\uff8f\043\uff8f\045\uff8f" +
    "\047\uff8f\050\uff8f\051\uff8f\052\uff8f\054\uff8f\056\uff8f\063" +
    "\uff8f\064\uff8f\076\uff8f\102\uff8f\132\uff8f\134\uff8f\001\002" +
    "\000\032\005\046\006\106\007\027\010\051\011\061\012" +
    "\021\013\112\054\056\056\105\063\251\064\254\076\023" +
    "\001\002\000\042\005\046\006\106\007\027\010\051\011" +
    "\061\012\021\013\112\043\030\054\056\055\u0182\056\105" +
    "\063\053\064\075\065\u0102\076\023\114\u0104\001\002\000" +
    "\116\014\uff49\015\uff49\017\uff49\035\uff49\037\uff49\040\uff49" +
    "\043\uff49\044\uff49\054\uff49\055\uff49\056\uff49\057\uff49\060" +
    "\uff49\061\uff49\062\uff49\063\uff49\064\uff49\065\uff49\066\uff49" +
    "\067\uff49\070\uff49\071\uff49\072\uff49\073\uff49\074\uff49\075" +
    "\uff49\077\uff49\100\uff49\102\uff49\103\uff49\104\uff49\105\uff49" +
    "\106\uff49\107\uff49\110\uff49\114\uff49\116\uff49\132\uff49\001" +
    "\002\000\036\005\046\006\106\007\027\010\051\011\061" +
    "\012\021\013\112\043\030\054\056\056\105\060\u0170\063" +
    "\053\064\075\076\023\001\002\000\004\012\u016f\001\002" +
    "\000\116\014\uff2d\015\uff2d\017\uff2d\035\uff2d\037\uff2d\040" +
    "\uff2d\043\uff2d\044\uff2d\054\uff2d\055\uff2d\056\uff2d\057\uff2d" +
    "\060\uff2d\061\uff2d\062\uff2d\063\uff2d\064\uff2d\065\uff2d\066" +
    "\uff2d\067\uff2d\070\uff2d\071\uff2d\072\uff2d\073\uff2d\074\uff2d" +
    "\075\uff2d\077\uff2d\100\uff2d\102\uff2d\103\uff2d\104\uff2d\105" +
    "\uff2d\106\uff2d\107\uff2d\110\uff2d\114\uff2d\116\uff2d\132\uff2d" +
    "\001\002\000\042\005\046\006\106\007\027\010\051\011" +
    "\061\012\021\013\112\043\030\054\056\056\105\057\uff20" +
    "\060\u0177\061\uff20\063\053\064\075\076\023\001\002\000" +
    "\006\057\uff2c\061\u017c\001\002\000\006\057\uff2a\061\uff2a" +
    "\001\002\000\010\057\uff28\060\u0176\061\uff28\001\002\000" +
    "\004\057\u0175\001\002\000\116\014\uff2e\015\uff2e\017\uff2e" +
    "\035\uff2e\037\uff2e\040\uff2e\043\uff2e\044\uff2e\054\uff2e\055" +
    "\uff2e\056\uff2e\057\uff2e\060\uff2e\061\uff2e\062\uff2e\063\uff2e" +
    "\064\uff2e\065\uff2e\066\uff2e\067\uff2e\070\uff2e\071\uff2e\072" +
    "\uff2e\073\uff2e\074\uff2e\075\uff2e\077\uff2e\100\uff2e\102\uff2e" +
    "\103\uff2e\104\uff2e\105\uff2e\106\uff2e\107\uff2e\110\uff2e\114" +
    "\uff2e\116\uff2e\132\uff2e\001\002\000\042\005\046\006\106" +
    "\007\027\010\051\011\061\012\021\013\112\043\030\054" +
    "\056\056\105\057\uff23\060\u0177\061\uff23\063\053\064\075" +
    "\076\023\001\002\000\040\005\046\006\106\007\027\010" +
    "\051\011\061\012\021\013\112\043\030\054\056\056\105" +
    "\057\uff1f\061\uff1f\063\053\064\075\076\023\001\002\000" +
    "\006\057\uff25\061\uff25\001\002\000\010\057\uff24\060\u0177" +
    "\061\uff24\001\002\000\006\057\uff27\061\uff27\001\002\000" +
    "\006\057\uff1e\061\uff1e\001\002\000\040\005\046\006\106" +
    "\007\027\010\051\011\061\012\021\013\112\043\030\054" +
    "\056\056\105\057\uff2b\060\u0170\063\053\064\075\076\023" +
    "\001\002\000\006\057\uff29\061\uff29\001\002\000\006\057" +
    "\uff22\061\uff22\001\002\000\010\057\uff21\060\u0177\061\uff21" +
    "\001\002\000\006\057\uff26\061\uff26\001\002\000\004\055" +
    "\u0183\001\002\000\116\014\uff30\015\uff30\017\uff30\035\uff30" +
    "\037\uff30\040\uff30\043\uff30\044\uff30\054\uff30\055\uff30\056" +
    "\uff30\057\uff30\060\uff30\061\uff30\062\uff30\063\uff30\064\uff30" +
    "\065\uff30\066\uff30\067\uff30\070\uff30\071\uff30\072\uff30\073" +
    "\uff30\074\uff30\075\uff30\077\uff30\100\uff30\102\uff30\103\uff30" +
    "\104\uff30\105\uff30\106\uff30\107\uff30\110\uff30\114\uff30\116" +
    "\uff30\132\uff30\001\002\000\116\014\uff2f\015\uff2f\017\uff2f" +
    "\035\uff2f\037\uff2f\040\uff2f\043\uff2f\044\uff2f\054\uff2f\055" +
    "\uff2f\056\uff2f\057\uff2f\060\uff2f\061\uff2f\062\uff2f\063\uff2f" +
    "\064\uff2f\065\uff2f\066\uff2f\067\uff2f\070\uff2f\071\uff2f\072" +
    "\uff2f\073\uff2f\074\uff2f\075\uff2f\077\uff2f\100\uff2f\102\uff2f" +
    "\103\uff2f\104\uff2f\105\uff2f\106\uff2f\107\uff2f\110\uff2f\114" +
    "\uff2f\116\uff2f\132\uff2f\001\002\000\106\014\uff4b\015\uff4b" +
    "\017\uff4b\035\uff4b\037\uff4b\040\uff4b\043\uff4b\044\uff4b\055" +
    "\uff4b\057\uff4b\060\uff4b\061\uff4b\062\uff4b\063\uff4b\064\uff4b" +
    "\065\uff4b\066\uff4b\067\uff4b\070\uff4b\071\uff4b\072\uff4b\073" +
    "\uff4b\075\uff4b\077\uff4b\100\uff4b\102\uff4b\103\uff4b\104\uff4b" +
    "\105\uff4b\106\uff4b\107\uff4b\110\uff4b\116\uff4b\132\uff4b\001" +
    "\002\000\120\006\uff39\014\uff39\015\uff39\017\uff39\035\uff39" +
    "\037\uff39\040\uff39\043\uff39\044\uff39\054\uff39\055\uff39\056" +
    "\uff39\057\uff39\060\uff39\061\uff39\062\uff39\063\uff39\064\uff39" +
    "\065\uff39\066\uff39\067\uff39\070\uff39\071\uff39\072\uff39\073" +
    "\uff39\074\uff39\075\uff39\077\uff39\100\uff39\102\uff39\103\uff39" +
    "\104\uff39\105\uff39\106\uff39\107\uff39\110\uff39\114\uff39\116" +
    "\uff39\132\uff39\001\002\000\010\054\u0188\074\u0189\132\u018a" +
    "\001\002\000\010\054\uffa2\074\uffa2\132\uffa2\001\002\000" +
    "\042\005\046\006\106\007\027\010\051\011\061\012\021" +
    "\013\112\043\030\054\056\055\u018d\056\105\063\053\064" +
    "\075\065\u0102\076\023\114\u0104\001\002\000\004\012\u018b" +
    "\001\002\000\012\017\ufff2\022\ufff2\024\ufff2\102\ufff2\001" +
    "\002\000\010\054\uffa1\074\uffa1\132\uffa1\001\002\000\004" +
    "\055\u018f\001\002\000\004\132\u018e\001\002\000\012\017" +
    "\ufff3\022\ufff3\024\ufff3\102\ufff3\001\002\000\004\132\u0190" +
    "\001\002\000\012\017\ufff4\022\ufff4\024\ufff4\102\ufff4\001" +
    "\002\000\056\005\046\006\106\007\027\010\051\011\061" +
    "\012\021\013\112\016\100\021\067\023\076\025\025\034" +
    "\104\042\020\043\030\045\022\047\063\054\056\056\105" +
    "\063\053\064\075\076\023\132\u0193\001\002\000\114\002" +
    "\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2" +
    "\013\uffc2\016\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\034\uffc2\035\uffc2\042\uffc2\043\uffc2\045\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\054\uffc2\056\uffc2\063\uffc2\064\uffc2" +
    "\076\uffc2\102\uffc2\132\uffc2\134\uffc2\001\002\000\114\002" +
    "\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3" +
    "\013\uffc3\016\uffc3\017\uffc3\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\034\uffc3\035\uffc3\042\uffc3\043\uffc3\045\uffc3\047\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\054\uffc3\056\uffc3\063\uffc3\064\uffc3" +
    "\076\uffc3\102\uffc3\132\uffc3\134\uffc3\001\002\000\006\062" +
    "\uffbf\132\uffbf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0192\000\126\002\073\003\042\004\046\005\044\006" +
    "\063\007\016\011\101\027\010\030\107\031\003\032\106" +
    "\033\025\042\070\043\036\044\013\045\112\046\100\047" +
    "\037\051\034\064\023\065\054\066\006\067\053\070\067" +
    "\071\041\073\040\074\072\075\102\077\047\100\057\105" +
    "\065\111\071\112\110\113\035\114\051\117\012\126\011" +
    "\127\007\130\032\131\005\152\033\163\031\001\001\000" +
    "\002\001\001\000\004\063\u0185\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\134\u016b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\u0167\074\u0168\077\u0166\100" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\105\u0150\111\071\112" +
    "\110\113\035\114\051\116\u014e\117\012\126\011\127\007" +
    "\130\032\131\005\145\u014a\146\u014c\147\u0149\150\u014b\151" +
    "\u014f\163\031\001\001\000\002\001\001\000\022\117\165" +
    "\126\011\127\007\130\032\131\005\141\u0145\142\166\163" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\113\u0144\114\051\117\012\126\011\127\007\130\032\131" +
    "\005\163\031\001\001\000\004\166\u0114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\122\004\u0113\005" +
    "\044\006\063\007\016\011\101\027\010\030\107\031\003" +
    "\032\106\033\025\042\070\043\036\044\013\045\112\046" +
    "\100\047\037\051\034\064\023\065\054\066\006\067\053" +
    "\070\067\071\041\073\040\074\072\075\102\077\047\100" +
    "\057\105\065\111\071\112\110\113\035\114\051\117\012" +
    "\126\011\127\007\130\032\131\005\152\033\163\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\115\361\001\001\000\016\125\356\126\251\127\007" +
    "\130\032\131\005\163\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\105\157\111\071\112\110\113\035" +
    "\114\051\116\156\117\012\126\011\127\007\130\032\131" +
    "\005\132\351\133\155\163\031\001\001\000\030\105\346" +
    "\111\071\112\110\113\035\114\051\117\012\126\011\127" +
    "\007\130\032\131\005\163\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\117\165\126\011\127\007\130" +
    "\032\131\005\141\335\142\166\163\031\001\001\000\034" +
    "\105\331\111\071\112\110\113\035\114\051\117\012\126" +
    "\011\127\007\130\032\131\005\143\332\144\330\163\031" +
    "\001\001\000\012\005\323\010\322\011\324\152\326\001" +
    "\001\000\002\001\001\000\010\034\263\036\261\041\262" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\125\252\126\251\127\007\130\032\131\005\163" +
    "\031\001\001\000\002\001\001\000\030\105\216\111\071" +
    "\112\110\113\035\114\051\117\012\126\011\127\007\130" +
    "\032\131\005\163\031\001\001\000\030\105\213\111\071" +
    "\112\110\113\035\114\051\117\012\126\011\127\007\130" +
    "\032\131\005\163\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\105" +
    "\157\111\071\112\110\113\035\114\051\116\156\117\012" +
    "\126\011\127\007\130\032\131\005\132\152\133\155\163" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\101\115\105\114\111\071\112\110\113\035" +
    "\114\051\117\012\126\011\127\007\130\032\131\005\163" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\117\117\126\011\127\007\130\032\131\005\163\031\001" +
    "\001\000\002\001\001\000\016\117\147\126\011\127\007" +
    "\130\032\131\005\163\031\001\001\000\016\117\146\126" +
    "\011\127\007\130\032\131\005\163\031\001\001\000\016" +
    "\117\145\126\011\127\007\130\032\131\005\163\031\001" +
    "\001\000\016\117\144\126\011\127\007\130\032\131\005" +
    "\163\031\001\001\000\016\117\143\126\011\127\007\130" +
    "\032\131\005\163\031\001\001\000\016\117\142\126\011" +
    "\127\007\130\032\131\005\163\031\001\001\000\016\117" +
    "\141\126\011\127\007\130\032\131\005\163\031\001\001" +
    "\000\016\117\140\126\011\127\007\130\032\131\005\163" +
    "\031\001\001\000\016\117\137\126\011\127\007\130\032" +
    "\131\005\163\031\001\001\000\016\117\136\126\011\127" +
    "\007\130\032\131\005\163\031\001\001\000\016\117\135" +
    "\126\011\127\007\130\032\131\005\163\031\001\001\000" +
    "\016\117\134\126\011\127\007\130\032\131\005\163\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\113\151\114\051\117\012\126\011\127\007\130\032\131" +
    "\005\163\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\117\210\126\011\127\007\130\032\131\005\163" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\160\204\001\001\000\004\160\160\001\001\000\002\001" +
    "\001\000\004\157\163\001\001\000\022\117\165\126\011" +
    "\127\007\130\032\131\005\141\164\142\166\163\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\117\170\126\011\127\007\130" +
    "\032\131\005\163\031\001\001\000\002\001\001\000\026" +
    "\111\172\112\110\113\035\114\051\117\012\126\011\127" +
    "\007\130\032\131\005\163\031\001\001\000\010\156\173" +
    "\160\174\161\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\112\203\113\035\114\051" +
    "\117\012\126\011\127\007\130\032\131\005\163\031\001" +
    "\001\000\030\106\201\111\200\112\110\113\035\114\051" +
    "\117\012\126\011\127\007\130\032\131\005\163\031\001" +
    "\001\000\002\001\001\000\010\156\202\160\174\161\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\105\207\111\071\112\110\113\035\114\051" +
    "\116\206\117\012\126\011\127\007\130\032\131\005\163" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\105\215\111\071\112\110\113\035\114\051" +
    "\117\012\126\011\127\007\130\032\131\005\163\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\066\030\222" +
    "\031\003\032\106\033\025\042\070\043\036\044\013\045" +
    "\112\046\100\047\037\051\034\064\023\065\054\066\006" +
    "\103\220\105\065\111\071\112\110\113\035\114\051\117" +
    "\012\126\011\127\007\130\032\131\005\163\031\001\001" +
    "\000\004\072\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\122\005\044\006\063\007\016\011\101\027\226" +
    "\030\107\031\003\032\106\033\025\042\070\043\036\044" +
    "\013\045\112\046\100\047\037\051\034\064\023\065\054" +
    "\066\006\067\053\070\067\071\041\073\040\074\072\075" +
    "\102\077\047\100\057\104\224\105\065\111\071\112\110" +
    "\113\035\114\051\117\012\126\011\127\007\130\032\131" +
    "\005\152\033\163\031\001\001\000\120\005\044\006\063" +
    "\007\016\011\101\027\230\030\107\031\003\032\106\033" +
    "\025\042\070\043\036\044\013\045\112\046\100\047\037" +
    "\051\034\064\023\065\054\066\006\067\053\070\067\071" +
    "\041\073\040\074\072\075\102\077\047\100\057\105\065" +
    "\111\071\112\110\113\035\114\051\117\012\126\011\127" +
    "\007\130\032\131\005\152\033\163\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\105\243\111\071\112\110" +
    "\113\035\114\051\117\012\126\011\127\007\130\032\131" +
    "\005\163\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\105\236\111\071\112\110\113\035\114\051\117" +
    "\012\126\011\127\007\130\032\131\005\163\031\001\001" +
    "\000\002\001\001\000\066\030\222\031\003\032\106\033" +
    "\025\042\070\043\036\044\013\045\112\046\100\047\037" +
    "\051\034\064\023\065\054\066\006\103\240\105\065\111" +
    "\071\112\110\113\035\114\051\117\012\126\011\127\007" +
    "\130\032\131\005\163\031\001\001\000\002\001\001\000" +
    "\066\030\222\031\003\032\106\033\025\042\070\043\036" +
    "\044\013\045\112\046\100\047\037\051\034\064\023\065" +
    "\054\066\006\103\242\105\065\111\071\112\110\113\035" +
    "\114\051\117\012\126\011\127\007\130\032\131\005\163" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\066" +
    "\030\222\031\003\032\106\033\025\042\070\043\036\044" +
    "\013\045\112\046\100\047\037\051\034\064\023\065\054" +
    "\066\006\103\245\105\065\111\071\112\110\113\035\114" +
    "\051\117\012\126\011\127\007\130\032\131\005\163\031" +
    "\001\001\000\002\001\001\000\066\030\222\031\003\032" +
    "\106\033\025\042\070\043\036\044\013\045\112\046\100" +
    "\047\037\051\034\064\023\065\054\066\006\103\247\105" +
    "\065\111\071\112\110\113\035\114\051\117\012\126\011" +
    "\127\007\130\032\131\005\163\031\001\001\000\002\001" +
    "\001\000\016\125\255\126\251\127\007\130\032\131\005" +
    "\163\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\125\254\126\251\127\007\130\032\131\005\163\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\105\270\111\071\112\110\113\035\114\051" +
    "\117\012\126\011\127\007\130\032\131\005\163\031\001" +
    "\001\000\030\105\265\111\071\112\110\113\035\114\051" +
    "\117\012\126\011\127\007\130\032\131\005\163\031\001" +
    "\001\000\002\001\001\000\030\105\264\111\071\112\110" +
    "\113\035\114\051\117\012\126\011\127\007\130\032\131" +
    "\005\163\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\105\267\111\071\112\110\113" +
    "\035\114\051\117\012\126\011\127\007\130\032\131\005" +
    "\163\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\066\030\222\031\003\032\106\033\025\042\070\043\036" +
    "\044\013\045\112\046\100\047\037\051\034\064\023\065" +
    "\054\066\006\103\272\105\065\111\071\112\110\113\035" +
    "\114\051\117\012\126\011\127\007\130\032\131\005\163" +
    "\031\001\001\000\006\076\276\102\275\001\001\000\002" +
    "\001\001\000\030\105\315\111\071\112\110\113\035\114" +
    "\051\117\012\126\011\127\007\130\032\131\005\163\031" +
    "\001\001\000\002\001\001\000\004\102\300\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\066" +
    "\030\222\031\003\032\106\033\025\042\070\043\036\044" +
    "\013\045\112\046\100\047\037\051\034\064\023\065\054" +
    "\066\006\103\303\105\065\111\071\112\110\113\035\114" +
    "\051\117\012\126\011\127\007\130\032\131\005\163\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\066\030" +
    "\222\031\003\032\106\033\025\042\070\043\036\044\013" +
    "\045\112\046\100\047\037\051\034\064\023\065\054\066" +
    "\006\103\306\105\065\111\071\112\110\113\035\114\051" +
    "\117\012\126\011\127\007\130\032\131\005\163\031\001" +
    "\001\000\002\001\001\000\066\030\222\031\003\032\106" +
    "\033\025\042\070\043\036\044\013\045\112\046\100\047" +
    "\037\051\034\064\023\065\054\066\006\103\310\105\065" +
    "\111\071\112\110\113\035\114\051\117\012\126\011\127" +
    "\007\130\032\131\005\163\031\001\001\000\002\001\001" +
    "\000\066\030\222\031\003\032\106\033\025\042\070\043" +
    "\036\044\013\045\112\046\100\047\037\051\034\064\023" +
    "\065\054\066\006\103\312\105\065\111\071\112\110\113" +
    "\035\114\051\117\012\126\011\127\007\130\032\131\005" +
    "\163\031\001\001\000\002\001\001\000\066\030\222\031" +
    "\003\032\106\033\025\042\070\043\036\044\013\045\112" +
    "\046\100\047\037\051\034\064\023\065\054\066\006\103" +
    "\314\105\065\111\071\112\110\113\035\114\051\117\012" +
    "\126\011\127\007\130\032\131\005\163\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\066\030\222\031\003\032\106\033\025\042" +
    "\070\043\036\044\013\045\112\046\100\047\037\051\034" +
    "\064\023\065\054\066\006\103\321\105\065\111\071\112" +
    "\110\113\035\114\051\117\012\126\011\127\007\130\032" +
    "\131\005\163\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\327" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\105\334" +
    "\111\071\112\110\113\035\114\051\117\012\126\011\127" +
    "\007\130\032\131\005\163\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\105\331\111\071\112\110\113" +
    "\035\114\051\117\012\126\011\127\007\130\032\131\005" +
    "\143\337\144\330\163\031\001\001\000\002\001\001\000" +
    "\066\030\222\031\003\032\106\033\025\042\070\043\036" +
    "\044\013\045\112\046\100\047\037\051\034\064\023\065" +
    "\054\066\006\103\341\105\065\111\071\112\110\113\035" +
    "\114\051\117\012\126\011\127\007\130\032\131\005\163" +
    "\031\001\001\000\002\001\001\000\032\101\345\105\114" +
    "\111\071\112\110\113\035\114\051\117\012\126\011\127" +
    "\007\130\032\131\005\163\031\001\001\000\066\030\222" +
    "\031\003\032\106\033\025\042\070\043\036\044\013\045" +
    "\112\046\100\047\037\051\034\064\023\065\054\066\006" +
    "\103\344\105\065\111\071\112\110\113\035\114\051\117" +
    "\012\126\011\127\007\130\032\131\005\163\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\066\030\222\031\003\032\106\033\025\042\070\043\036" +
    "\044\013\045\112\046\100\047\037\051\034\064\023\065" +
    "\054\066\006\103\350\105\065\111\071\112\110\113\035" +
    "\114\051\117\012\126\011\127\007\130\032\131\005\163" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\117\373\126\011\127\007\130\032\131\005\163" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\105\u0105\111" +
    "\071\112\110\113\035\114\051\117\012\126\011\127\007" +
    "\130\032\131\005\153\u0100\154\u0104\155\u0102\163\031\001" +
    "\001\000\066\030\222\031\003\032\106\033\025\042\070" +
    "\043\036\044\013\045\112\046\100\047\037\051\034\064" +
    "\023\065\054\066\006\103\377\105\065\111\071\112\110" +
    "\113\035\114\051\117\012\126\011\127\007\130\032\131" +
    "\005\163\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\105\u010f\111\071\112\110\113\035\114\051\117" +
    "\012\126\011\127\007\130\032\131\005\163\031\001\001" +
    "\000\002\001\001\000\030\105\u010e\111\071\112\110\113" +
    "\035\114\051\117\012\126\011\127\007\130\032\131\005" +
    "\163\031\001\001\000\002\001\001\000\004\160\u0109\001" +
    "\001\000\002\001\001\000\066\030\222\031\003\032\106" +
    "\033\025\042\070\043\036\044\013\045\112\046\100\047" +
    "\037\051\034\064\023\065\054\066\006\103\u0108\105\065" +
    "\111\071\112\110\113\035\114\051\117\012\126\011\127" +
    "\007\130\032\131\005\163\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\105\u010b\111\071\112\110\113" +
    "\035\114\051\117\012\126\011\127\007\130\032\131\005" +
    "\163\031\001\001\000\002\001\001\000\032\105\u0105\111" +
    "\071\112\110\113\035\114\051\117\012\126\011\127\007" +
    "\130\032\131\005\155\u010d\163\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\066\030\222\031\003\032\106\033\025\042\070\043" +
    "\036\044\013\045\112\046\100\047\037\051\034\064\023" +
    "\065\054\066\006\103\u0112\105\065\111\071\112\110\113" +
    "\035\114\051\117\012\126\011\127\007\130\032\131\005" +
    "\163\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u0123\001\001\000\002\001\001\000\006\164\u0119" +
    "\165\u0118\001\001\000\006\164\u0120\165\u0118\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\164\u011f\165\u0118\001\001\000\002\001\001\000\006\164" +
    "\u011e\165\u0118\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\013\u0130\014" +
    "\u012a\015\u012b\016\u012c\017\u012e\020\u0131\001\001\000\002" +
    "\001\001\000\030\105\u0127\111\071\112\110\113\035\114" +
    "\051\117\012\126\011\127\007\130\032\131\005\163\031" +
    "\001\001\000\066\030\222\031\003\032\106\033\025\042" +
    "\070\043\036\044\013\045\112\046\100\047\037\051\034" +
    "\064\023\065\054\066\006\103\u0126\105\065\111\071\112" +
    "\110\113\035\114\051\117\012\126\011\127\007\130\032" +
    "\131\005\163\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\066\030\222\031\003\032\106\033\025\042\070" +
    "\043\036\044\013\045\112\046\100\047\037\051\034\064" +
    "\023\065\054\066\006\103\u0129\105\065\111\071\112\110" +
    "\113\035\114\051\117\012\126\011\127\007\130\032\131" +
    "\005\163\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\u013a\001" +
    "\001\000\002\001\001\000\004\020\u0139\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\105\u0135\111\071\112\110\113\035\114\051" +
    "\117\012\126\011\127\007\130\032\131\005\163\031\001" +
    "\001\000\002\001\001\000\030\105\u0137\111\071\112\110" +
    "\113\035\114\051\117\012\126\011\127\007\130\032\131" +
    "\005\163\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\u013d\017\u013e\020\u0131\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\u0140\017\u0141\020\u0131\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\u0143" +
    "\017\u013e\020\u0131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\117\u0159\126\011" +
    "\127\007\130\032\131\005\163\031\001\001\000\004\160" +
    "\u0158\001\001\000\002\001\001\000\004\160\u0151\001\001" +
    "\000\002\001\001\000\030\105\u0153\111\071\112\110\113" +
    "\035\114\051\117\012\126\011\127\007\130\032\131\005" +
    "\163\031\001\001\000\004\160\u0154\001\001\000\002\001" +
    "\001\000\032\105\u0157\111\071\112\110\113\035\114\051" +
    "\116\u0156\117\012\126\011\127\007\130\032\131\005\163" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\160\u015a\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\105\u015e\111\071\112\110\113\035" +
    "\114\051\117\012\126\011\127\007\130\032\131\005\163" +
    "\031\001\001\000\016\117\u0161\126\011\127\007\130\032" +
    "\131\005\163\031\001\001\000\002\001\001\000\030\105" +
    "\u0160\111\071\112\110\113\035\114\051\117\012\126\011" +
    "\127\007\130\032\131\005\163\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\164\u0163\165\u0118\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\125\u0183\126\251\127\007\130\032\131\005\163\031\001" +
    "\001\000\036\105\u0105\111\071\112\110\113\035\114\051" +
    "\117\012\126\011\127\007\130\032\131\005\153\u0180\154" +
    "\u0104\155\u0102\163\031\001\001\000\002\001\001\000\036" +
    "\105\u0172\111\071\112\110\113\035\114\051\117\012\126" +
    "\011\127\007\130\032\131\005\135\u0173\136\u0170\137\u0171" +
    "\163\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\105\u017e\111\071\112\110\113\035\114\051\117\012" +
    "\126\011\127\007\130\032\131\005\140\u017d\163\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\105\u0178\111" +
    "\071\112\110\113\035\114\051\117\012\126\011\127\007" +
    "\130\032\131\005\140\u0177\163\031\001\001\000\030\105" +
    "\u017a\111\071\112\110\113\035\114\051\117\012\126\011" +
    "\127\007\130\032\131\005\163\031\001\001\000\002\001" +
    "\001\000\004\140\u0179\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\105\u0172\111\071\112\110\113\035\114" +
    "\051\117\012\126\011\127\007\130\032\131\005\137\u017c" +
    "\163\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\140\u017f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\105\u0105\111\071\112\110\113\035\114\051\117\012\126" +
    "\011\127\007\130\032\131\005\153\u018b\154\u0104\155\u0102" +
    "\163\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\032" +
    "\u0193\033\025\042\070\043\036\044\013\045\112\046\100" +
    "\047\037\051\034\064\023\065\054\066\006\105\065\111" +
    "\071\112\110\113\035\114\051\117\012\126\011\127\007" +
    "\130\032\131\005\163\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public boolean DEBUG = false;

    public static void printTree(Node<String> node, int depth) {
        for (int i = 0; i < depth; ++i)
            if (i == depth - 1)
                System.out.print("|-");//\u22A2');
            else
                System.out.print("  ");
        System.out.println(node.getData());
        List<Node<String>> kids = node.getChilds();
        for (Node<String> kid : kids) {
            printTree(kid, depth + 1);
        }
    }

    public void syntax_error(Symbol cur_token) {
        System.err.println("Syntax error at " + cur_token);
        report_error("Syntax error", cur_token);
    }

    public void Debuglog(String s) {
        if (DEBUG)
            System.out.println(s);
    }

    public Node<String> makeNode(String s, Object... arr) {
        Node<String> List = new Node<String>(s, -1, -1);
        boolean exist = false;
        for (Object a: arr) {
            Node<String> tmp = (Node<String>) a;
            List.appendChild(tmp);
            if (!exist) {
                exist = true;
                List.r = tmp.r;
                List.c = tmp.c;
            }
        }
        return List;
    }

    public Node<String> makeName(Object name) {
        if (name instanceof String)
            return new Node<String>("%" + (String)name, -1, -1);
        Symbol tmp = (Symbol) name;
        return new Node<String>(tmp.toString(), tmp.left, tmp.right);
    }

    public Node<String> makeOp(String s) {
        if (s instanceof String)
            return new Node<String>((String)s, -1, -1);
        return new Node<String>("#" + s, -1, -1);
    }

    public Node<String> makeOp(Object op) {
        if (op == null) {
            return new Node<String>("#null at makeOp(Object op)", -1, -1);
        }
        if (DEBUG)
            System.err.println("makeOp: " + op.getClass());
        Symbol tmp = (Symbol) op;
        return new Node<String>("#" + tmp.toString(), tmp.left, tmp.right);
    }

    public Node<String> makeNumber(Object nb) {
        if (nb instanceof String)
            return new Node<String>((String)nb, -1, -1);
        Symbol tmp = (Symbol) nb;
        return new Node<String>(tmp.toString(), tmp.left, tmp.right);
    }

    public Node<String> makeKeyword(Object kw) {
        if (kw instanceof String)
            return new Node<String>((String)kw, -1, -1);
        Symbol tmp = (Symbol) kw;
        return new Node<String>(tmp.toString(), tmp.left, tmp.right);
    }

    public Node<String> makeString(Object s) {
        if (s instanceof String)
            return new Node<String>((String)s, -1, -1);
        //TODO: string
        return new Node<String>("stirng_td", -1, -1);
    }

    public static void main(String args[]) {
        try {
            Lexer lexer = new Lexer(new FileReader(args[0]));
            
            Parser p = new Parser(lexer);
            System.out.println("Parser init\n");

            p.parse();
//            p.debug_parse();

            System.out.println("Finish\n");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public void copyChild(Node<String> a, Node<String> b) {
        List<Node<String>> kids = b.getChilds();
        for (int i = 0; i < kids.size(); ++i) {
            a.appendChild(kids.get(i));
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> start_val = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= file_input 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        //printTree(list, 0);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // labeledType ::= NAME LBRACE ifLabel RBRACE 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = makeNode("labeledType", makeName(a), b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labeledType",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ifLabel ::= unitIfLabel 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("ifLabel", a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifLabel",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ifLabel ::= ifLabel AND ifLabel 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("ifLabel", a, makeOp("AND"), b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifLabel",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ifLabel ::= ifLabel OR ifLabel 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("ifLabel", a, makeOp("OR"), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifLabel",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // unitIfLabel ::= NAME 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeName(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unitIfLabel",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // unitIfLabel ::= LPAR ifLabel RPAR 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unitIfLabel",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // file_input ::= 
            {
              Node<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file_input",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // file_input ::= file_input file_input_unit 
            {
              Node<String> RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> fi = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fiuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fiuright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> fiu = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        Debuglog("Debug: 1");
        Node<String> List = fi;

        if (fiu != null) {
            List.appendChild(fiu);
        }
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file_input",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // file_input ::= file_input_unit 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        Debuglog("Debug: 2"); 
        Node<String> List = new Node<String>("file_input", -1, -1);
        List.appendChild(a);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file_input",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // file_input_unit ::= NEWLINE 
            {
              Node<String> RESULT =null;
		 RESULT = makeNode("NEWLINE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file_input_unit",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // file_input_unit ::= stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file_input_unit",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decorator ::= AT dotted_name LPAR arglist RPAR NEWLINE 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = makeNode("decorator", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decorator",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decorator ::= AT dotted_name LPAR RPAR NEWLINE 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = makeNode("decorator", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decorator",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // decorator ::= AT dotted_name NEWLINE 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = makeNode("decorator", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decorator",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // decorators ::= decorator 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("decorators", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decorators",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // decorators ::= decorators decorator 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decorators",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decorated ::= decorators classdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("decorated_class", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decorated",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // decorated ::= decorators funcdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("decorated_class", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decorated",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // decorated ::= decorators async_funcdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("decorated_class", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decorated",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // async_funcdef ::= ASYNC funcdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("async_funcdef", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("async_funcdef",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // funcdef ::= DEF maybeLabeledName parameters RARROW test COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> d = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("funcdef", a, b, c, d);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdef",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // funcdef ::= DEF maybeLabeledName parameters COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("funcdef", a, b, c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdef",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // maybeLabeledName ::= NAME 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeName(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("maybeLabeledName",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // maybeLabeledName ::= NAME LBRACE ifLabel RBRACE 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = makeNode("LabeledName", makeName(a), b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("maybeLabeledName",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parameters ::= LPAR typedargslist RPAR 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = makeNode("parameters", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parameters ::= LPAR RPAR 
            {
              Node<String> RESULT =null;
		RESULT = makeNode("parameters");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // typedargslist ::= nonstartypedargslist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("typedargslist", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedargslist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // typedargslist ::= nonstartypedargslist COMMA startypedargslist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("typedargslist", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedargslist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // typedargslist ::= nonstartypedargslist COMMA startypedargslist COMMA doublestartypedargslist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("typedargslist", a, b, c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedargslist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // typedargslist ::= startypedargslist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("typedargslist", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedargslist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // typedargslist ::= startypedargslist COMMA doublestartypedargslist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("typedargslist", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedargslist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // typedargslist ::= doublestartypedargslist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("typedargslist", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedargslist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // nonstartypedargslist ::= probinittfpdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("nonstartypedargslist", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonstartypedargslist",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // nonstartypedargslist ::= nonstartypedargslist COMMA probinittfpdef 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonstartypedargslist",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // startypedargslist ::= STAR 
            {
              Node<String> RESULT =null;
		RESULT = makeNode("startypedargslist");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("startypedargslist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // startypedargslist ::= STAR tfpdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("startypedargslist", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("startypedargslist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // startypedargslist ::= startypedargslist COMMA probinittfpdef 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("startypedargslist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // doublestartypedargslist ::= DOUBLESTAR tfpdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("doublestartypedargslist", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("doublestartypedargslist",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // doublestartypedargslist ::= DOUBLESTAR tfpdef COMMA 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = makeNode("doublestartypedargslist", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("doublestartypedargslist",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // probinittfpdef ::= tfpdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("probinittfpdef", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("probinittfpdef",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // probinittfpdef ::= tfpdef EQUAL test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("probinittfpdef_=", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("probinittfpdef",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tfpdef ::= NAME COLON test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("tfpdef", makeName(a), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tfpdef",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tfpdef ::= NAME 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("tfpdef", makeName(a));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tfpdef",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // varargslist ::= nonstarvarargslist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("varargslist", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varargslist",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // varargslist ::= nonstarvarargslist COMMA starvarargslist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("varargslist", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varargslist",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // varargslist ::= nonstarvarargslist COMMA starvarargslist COMMA doublestarvarargslist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("varargslist", a, b, c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varargslist",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // varargslist ::= starvarargslist COMMA doublestarvarargslist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("varargslist", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varargslist",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // varargslist ::= doublestarvarargslist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("varargslist", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varargslist",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // nonstarvarargslist ::= probinitvfpdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("nonstarvarargslist", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonstarvarargslist",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // nonstarvarargslist ::= nonstarvarargslist COMMA probinitvfpdef 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonstarvarargslist",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // starvarargslist ::= STAR 
            {
              Node<String> RESULT =null;
		RESULT = makeNode("starvarargslist");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("starvarargslist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // starvarargslist ::= STAR vfpdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("starvarargslist", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("starvarargslist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // starvarargslist ::= starvarargslist COMMA probinitvfpdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("starvarargslist", a, b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("starvarargslist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // doublestarvarargslist ::= DOUBLESTAR vfpdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("doublestarvarargslist", a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("doublestarvarargslist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // doublestarvarargslist ::= DOUBLESTAR vfpdef COMMA 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = makeNode("doublestarvarargslist", a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("doublestarvarargslist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // probinitvfpdef ::= vfpdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("probinitvfpdef", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("probinitvfpdef",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // probinitvfpdef ::= vfpdef EQUAL test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("probinitvfpdef", a, b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("probinitvfpdef",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // vfpdef ::= NAME 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeName(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vfpdef",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // stmt ::= simple_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // stmt ::= compound_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // simple_stmt ::= small_stmts SEMI NEWLINE 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // simple_stmt ::= small_stmts NEWLINE 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // simple_stmt ::= NEWLINE 
            {
              Node<String> RESULT =null;
		RESULT = makeNode("NEWLINE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // small_stmts ::= small_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        Node<String> List = makeNode("small_stmts"); 
        if (a != null)
            List.appendChild(a);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("small_stmts",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // small_stmts ::= small_stmts SEMI small_stmt 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = list;
        if (a != null)
            List.appendChild(a);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("small_stmts",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // small_stmt ::= expr_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("small_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // small_stmt ::= del_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("small_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // small_stmt ::= pass_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("small_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // small_stmt ::= flow_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("small_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // small_stmt ::= import_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("small_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // small_stmt ::= global_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("small_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // small_stmt ::= nonlocal_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("small_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // small_stmt ::= assert_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("small_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr_stmt ::= test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = makeNode("expr_stmt", a);
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr_stmt ::= test expr_rest_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//testlist_star_expr:a expr_rest_stmt:b {:
        Node<String> List = makeNode("expr_stmt", a, b);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr_rest_stmt ::= annassign 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = makeNode("expr_rest_stmt", a);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_rest_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr_rest_stmt ::= augassign test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = makeNode("expr_rest_stmt", a, b);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_rest_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr_rest_stmt ::= EQUAL test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = makeNode("expr_rest_stmt", a);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_rest_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // annassign ::= COLON test EQUAL test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = makeNode("annassign", a, b);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("annassign",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // annassign ::= COLON test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = makeNode("annassign", a);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("annassign",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // del_stmt ::= DEL exprlist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Node<String> List = makeNode("del_stmt", a);
            RESULT = List;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("del_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // pass_stmt ::= PASS 
            {
              Node<String> RESULT =null;
		 RESULT = makeNode("PASS"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pass_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // flow_stmt ::= break_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // flow_stmt ::= continue_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // flow_stmt ::= return_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // break_stmt ::= BREAK 
            {
              Node<String> RESULT =null;
		 RESULT = makeNode("BREAK"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break_stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // continue_stmt ::= CONTINUE 
            {
              Node<String> RESULT =null;
		 RESULT = makeNode("CONTINUE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("continue_stmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // return_stmt ::= RETURN 
            {
              Node<String> RESULT =null;
		 RESULT = makeNode("RETURN"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // return_stmt ::= RETURN testlist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        Node<String> List = makeNode("return_stmt", a);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // dotted_as_name ::= dotted_name 
            {
              Node<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dotted_as_name",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // dotted_as_name ::= dotted_name AS NAME 
            {
              Node<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dotted_as_name",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // dotted_as_names ::= dotted_as_name 
            {
              Node<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dotted_as_names",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // dotted_as_names ::= dotted_as_names COMMA dotted_as_name 
            {
              Node<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dotted_as_names",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // dotted_name ::= NAME 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("dotted_name", makeName(a));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dotted_name",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // dotted_name ::= dotted_name DOT NAME 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        a.appendChild(makeName(b));
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dotted_name",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // global_stmt ::= GLOBAL NAME 
            {
              Node<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_stmt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // global_stmt ::= global_stmt COMMA NAME 
            {
              Node<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_stmt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // nonlocal_stmt ::= NONLOCAL NAME 
            {
              Node<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonlocal_stmt",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // nonlocal_stmt ::= nonlocal_stmt COMMA NAME 
            {
              Node<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonlocal_stmt",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // assert_stmt ::= ASSERT test COMMA test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("assert_stmt", a, b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assert_stmt",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // assert_stmt ::= ASSERT test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("assert_stmt", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assert_stmt",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // compound_stmt ::= if_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // compound_stmt ::= while_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // compound_stmt ::= for_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // compound_stmt ::= try_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // compound_stmt ::= with_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // compound_stmt ::= funcdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // compound_stmt ::= classdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // compound_stmt ::= decorated 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // compound_stmt ::= async_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // async_stmt ::= ASYNC funcdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("async_stmt", a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("async_stmt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // async_stmt ::= ASYNC with_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("async_stmt", a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("async_stmt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // async_stmt ::= ASYNC for_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("async_stmt", a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("async_stmt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // if_stmt ::= IF test COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("if_stmt", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // if_stmt ::= IF test COLON suite ELSE COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("if_stmt", a, b, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // if_stmt ::= IF test COLON suite elif_stmts 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("if_stmt", a, b, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // if_stmt ::= IF test COLON suite elif_stmts ELSE COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> d = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("if_stmt", a, b, c, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // elif_stmts ::= ELIF test COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("elif_stmts", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_stmts",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // elif_stmts ::= elif_stmts ELIF test COLON suite 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        list.appendChild(b);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_stmts",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // while_stmt ::= WHILE test COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("while_stmt", a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // for_stmt ::= FOR exprlist IN testlist COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("for_stmt", a, b, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // try_stmt ::= TRY COLON suite except_stmts 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("try_stmt", a, b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("try_stmt",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // try_stmt ::= TRY COLON suite except_stmts ELSE COLON suite FINALLY COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> d = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("try_stmt_else_finally", a, b, c, d);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("try_stmt",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // try_stmt ::= TRY COLON suite except_stmts ELSE COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("try_stmt_else", a, b, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("try_stmt",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // try_stmt ::= TRY COLON suite except_stmts FINALLY COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("try_stmt_finally", a, b, c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("try_stmt",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // try_stmt ::= TRY COLON suite FINALLY COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("try_stmt_only_finally", a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("try_stmt",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // except_stmts ::= except_clause COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("except_stmts", a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("except_stmts",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // except_stmts ::= except_stmts except_clause COLON suite 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        list.appendChild(b);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("except_stmts",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // with_stmt ::= with_item_stmts COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("with_stmt", a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("with_stmt",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // with_item_stmts ::= WITH with_item 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("with_item_stmts", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("with_item_stmts",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // with_item_stmts ::= with_item_stmts COMMA with_item 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("with_item_stmts",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // with_item ::= test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("with_item", a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("with_item",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // with_item ::= test AS expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("with_item", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("with_item",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // except_clause ::= EXCEPT 
            {
              Node<String> RESULT =null;
		RESULT = makeNode("except_clause");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("except_clause",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // except_clause ::= EXCEPT test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("except_clause", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("except_clause",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // except_clause ::= EXCEPT test AS NAME 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("except_clause", a, makeName(b));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("except_clause",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // suite ::= simple_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("suite",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // suite ::= NEWLINE INDENT stmts DEDENT 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("suite",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // stmts ::= stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("stmts", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // stmts ::= stmts stmt 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(b);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // test ::= or_test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("test", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // test_nocond ::= or_test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_nocond",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // or_test ::= and_test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("or_test",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // or_test ::= or_test OR and_test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List;
        if (a.getData().equals("or_test"))
            List = a;
        else 
            List = makeNode("or_test", a);
        List.appendChild(b);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("or_test",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // and_test ::= not_test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_test",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // and_test ::= and_test AND not_test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List;
        if (a.getData().equals("and_test"))
            List = a;
        else 
            List = makeNode("and_test", a);
        List.appendChild(b);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_test",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // not_test ::= NOT not_test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("not_test", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("not_test",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // not_test ::= comparison 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("not_test",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // comparison ::= expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // comparison ::= comparison comp_op expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List;
        if (a.getData().equals("comparison"))
            List = a;
        else
            List = makeNode("comparison", a);
        List.appendChild(b);
        List.appendChild(c);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // comp_op ::= LESS 
            {
              Node<String> RESULT =null;
		RESULT = makeOp("LESS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_op",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // comp_op ::= GREATER 
            {
              Node<String> RESULT =null;
		RESULT = makeOp("GREATER");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_op",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // comp_op ::= EQEQUAL 
            {
              Node<String> RESULT =null;
		RESULT = makeOp("EQEQUAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_op",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // comp_op ::= GREATEREQUAL 
            {
              Node<String> RESULT =null;
		RESULT = makeOp("GREATEREQUAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_op",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // comp_op ::= LESSEQUAL 
            {
              Node<String> RESULT =null;
		RESULT = makeOp("LESSEQUAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_op",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // comp_op ::= NOTEQUAL 
            {
              Node<String> RESULT =null;
		RESULT = makeOp("NOTEQUAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_op",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // comp_op ::= IN 
            {
              Node<String> RESULT =null;
		RESULT = makeOp("IN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_op",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // comp_op ::= NOT IN 
            {
              Node<String> RESULT =null;
		RESULT = makeOp("NOTIN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_op",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // comp_op ::= IS 
            {
              Node<String> RESULT =null;
		RESULT = makeOp("IS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_op",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // comp_op ::= IS NOT 
            {
              Node<String> RESULT =null;
		RESULT = makeOp("ISNOT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_op",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // star_expr ::= STAR expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("star_expr", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("star_expr",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // expr ::= expr VBAR expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a, makeOp("VBAR"), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // expr ::= expr CIRCUMFLEX expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a, makeOp(o), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // expr ::= expr AMPER expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a, makeOp(o), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // expr ::= expr LEFTSHIFT expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a, makeOp(o), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // expr ::= expr RIGHTSHIFT expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a, makeOp(o), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // expr ::= expr PLUS expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a, makeOp(o), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // expr ::= expr MINUS expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a, makeOp(o), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // expr ::= expr STAR expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a, makeOp(o), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // expr ::= expr AT expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a, makeOp(o), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // expr ::= expr PERCENT expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a, makeOp(o), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // expr ::= expr SLASH expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a, makeOp(o), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // expr ::= expr DOUBLESLASH expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a, makeOp(o), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // expr ::= PLUS factor 
            {
              Node<String> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", makeOp(o), a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // expr ::= MINUS factor 
            {
              Node<String> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", makeOp(o), a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // expr ::= power 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // factor ::= PLUS factor 
            {
              Node<String> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("factor", makeOp(o), a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // factor ::= MINUS factor 
            {
              Node<String> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("factor", makeOp(o), a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // factor ::= power 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("factor", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // power ::= atom_expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Debuglog("power --> atom_expr"); RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("power",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // power ::= atom_expr DOUBLESTAR factor 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("power", a, b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("power",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // atom_expr ::= atom 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Debuglog("atom_expr --> atom"); RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom_expr",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // atom_expr ::= atom_expr trailer 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        Debuglog("atom_expr --> atom_expr trailer"); 
        Node<String> List;
        if (a.getData().equals("atom_expr"))
            List = a;
        else
            List = makeNode("atom_expr", a);
        List.appendChild(b);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom_expr",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // atom ::= LPAR RPAR 
            {
              Node<String> RESULT =null;
		RESULT = makeNode("atom_()");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // atom ::= LPAR testlist_comp RPAR 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = makeNode("atom_()", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // atom ::= LSQB RSQB 
            {
              Node<String> RESULT =null;
		RESULT = makeNode("atom_[]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // atom ::= LSQB testlist_comp RSQB 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = makeNode("atom_[]", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // atom ::= LBRACE RBRACE 
            {
              Node<String> RESULT =null;
		RESULT = makeNode("atom_{}");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // atom ::= LBRACE dictorsetmaker RBRACE 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = makeNode("atom_{}", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // atom ::= NAME 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("atom_name", makeName(a));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // atom ::= labeledType 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("atom_labeledType", a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // atom ::= NUMBER 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("atom_num", makeNumber(a));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // atom ::= strings 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("atom_string", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // atom ::= ELLIPSIS 
            {
              Node<String> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("atom", makeOp(o));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // atom ::= NONE 
            {
              Node<String> RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("atom", makeKeyword(k));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // atom ::= TRUE 
            {
              Node<String> RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("atom", makeKeyword(k));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // atom ::= FALSE 
            {
              Node<String> RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("atom", makeKeyword(k));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // strings ::= STRING 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("strings", makeString(a));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strings",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // strings ::= strings STRING 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        a.appendChild(makeString(b));
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strings",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // testlist_comp ::= test comp_for 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("testlist_comp", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_comp",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // testlist_comp ::= star_expr comp_for 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("testlist_comp", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_comp",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // testlist_comp ::= testlist_comp_sub 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("testlist_comp", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_comp",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // testlist_comp ::= testlist_comp_sub COMMA 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = makeNode("testlist_comp", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_comp",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // testlist_comp_sub ::= test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("testlist_comp_sub", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_comp_sub",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // testlist_comp_sub ::= star_expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("testlist_comp_sub", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_comp_sub",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // testlist_comp_sub ::= testlist_comp_sub COMMA test 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_comp_sub",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // testlist_comp_sub ::= testlist_comp_sub COMMA star_expr 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_comp_sub",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // trailer ::= LPAR RPAR 
            {
              Node<String> RESULT =null;
		RESULT = makeNode("trailer_()");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailer",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // trailer ::= LPAR arglist RPAR 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = makeNode("trailer_()", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailer",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // trailer ::= LSQB subscriptlist RSQB 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = makeNode("trailer_[]", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailer",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // trailer ::= DOT NAME 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("trailer_.", makeName(a));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailer",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // subscriptlist ::= subscriptlist_sub 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscriptlist",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // subscriptlist ::= subscriptlist_sub COMMA 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscriptlist",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // subscriptlist_sub ::= subscript 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("subscriptlist", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscriptlist_sub",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // subscriptlist_sub ::= subscriptlist_sub COMMA subscript 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscriptlist_sub",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // subscript ::= test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("subscript", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscript",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // subscript ::= test COLON test sliceop 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("subscript_a,bc", a, b, c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscript",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // subscript ::= COLON test sliceop 
            {
              Node<String> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("subscript_,bc", b, c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscript",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // subscript ::= test COLON sliceop 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("subscript_a,c", a, c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscript",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // subscript ::= test COLON test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("subscript_a,b", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscript",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // subscript ::= test COLON 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = makeNode("subscript_a,", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscript",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // subscript ::= COLON sliceop 
            {
              Node<String> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("subscript_,c", c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscript",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // subscript ::= COLON test 
            {
              Node<String> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("subscript_,b", b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscript",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // subscript ::= COLON 
            {
              Node<String> RESULT =null;
		RESULT = makeNode("subscript");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscript",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // sliceop ::= COLON 
            {
              Node<String> RESULT =null;
		RESULT = makeNode("sliceop");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sliceop",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // sliceop ::= COLON test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("sliceop", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sliceop",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // exprlist ::= exprlist_sub 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // exprlist ::= exprlist_sub COMMA 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // exprlist_sub ::= expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("exprlist_sub", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist_sub",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // exprlist_sub ::= exprlist_sub COMMA expr 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist_sub",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // testlist ::= testlist_sub 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // testlist ::= testlist_sub COMMA 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // testlist_sub ::= test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("testlist_sub", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_sub",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // testlist_sub ::= testlist_sub COMMA test 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_sub",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // dictorsetmaker ::= dictorsetmaker1 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // dictorsetmaker ::= dictorsetmaker2 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // dictorsetmaker1 ::= test COLON test comp_for 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("dictorsetmaker1", a, b, c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker1",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // dictorsetmaker1 ::= DOUBLESTAR expr comp_for 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("dictorsetmaker1_**", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker1",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // dictorsetmaker1 ::= dictorsetmaker1_sub COMMA 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker1",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // dictorsetmaker1 ::= dictorsetmaker1_sub 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker1",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // dictorsetmaker1_sub ::= test COLON test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("dictorsetmaker1_sub", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker1_sub",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // dictorsetmaker1_sub ::= DOUBLESTAR expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("dictorsetmaker1_sub", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker1_sub",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // dictorsetmaker1_sub ::= dictorsetmaker1_sub COMMA test COLON test 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        list.appendChild(b);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker1_sub",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // dictorsetmaker1_sub ::= dictorsetmaker1_sub COMMA DOUBLESTAR expr 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker1_sub",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // dictorsetmaker2 ::= test comp_for 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("dictorsetmaker2", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker2",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // dictorsetmaker2 ::= star_expr comp_for 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("dictorsetmaker2", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker2",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // dictorsetmaker2 ::= dictorsetmaker2_sub 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker2",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // dictorsetmaker2 ::= dictorsetmaker2_sub COMMA 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker2",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // dictorsetmaker2_sub ::= test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("dictorsetmaker2_sub", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker2_sub",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // dictorsetmaker2_sub ::= star_expr 
            {
              Node<String> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=  makeNode("dictorsetmaker2_sub", b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker2_sub",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // dictorsetmaker2_sub ::= dictorsetmaker2_sub COMMA test 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker2_sub",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // dictorsetmaker2_sub ::= dictorsetmaker2_sub COMMA star_expr 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker2_sub",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // classdef ::= CLASS NAME LPAR arglist RPAR COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("classdef", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classdef",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // classdef ::= CLASS NAME COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("classdef", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classdef",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // classdef ::= CLASS NAME LPAR RPAR COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=  makeNode("classdef", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classdef",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // arglist ::= arglist_sub 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // arglist ::= arglist_sub COMMA 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // arglist_sub ::= argument 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("arglist_sub", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist_sub",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // arglist_sub ::= arglist_sub COMMA argument 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist_sub",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // argument ::= test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("argument", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // argument ::= test comp_for 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("argument", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // argument ::= test EQUAL test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("argument_=", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // argument ::= DOUBLESTAR test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("argument_**", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // argument ::= STAR test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("argument_*", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // comp_iter ::= comp_for 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("comp_iter", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_iter",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // comp_iter ::= comp_if 
            {
              Node<String> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("comp_iter", b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_iter",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // sync_comp_for ::= FOR exprlist IN or_test comp_iter 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("sync_comp_for", a, b, c);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sync_comp_for",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // sync_comp_for ::= FOR exprlist IN or_test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("sync_comp_for", a, b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sync_comp_for",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // comp_for ::= ASYNC sync_comp_for 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("comp_for", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_for",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // comp_if ::= IF test_nocond 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("comp_if", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_if",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // comp_if ::= IF test_nocond comp_iter 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("comp_if", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_if",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // encoding_decl ::= NAME 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeName(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("encoding_decl",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0144\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\004\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\010\000\002\005\007\000" +
    "\002\005\005\000\002\006\003\000\002\006\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\010" +
    "\004\000\002\011\011\000\002\011\007\000\002\012\005" +
    "\000\002\012\004\000\002\013\003\000\002\013\005\000" +
    "\002\013\007\000\002\013\003\000\002\013\005\000\002" +
    "\013\003\000\002\014\003\000\002\014\005\000\002\015" +
    "\003\000\002\015\004\000\002\015\005\000\002\016\004" +
    "\000\002\016\005\000\002\017\003\000\002\017\005\000" +
    "\002\020\005\000\002\020\003\000\002\021\003\000\002" +
    "\021\005\000\002\021\007\000\002\021\005\000\002\021" +
    "\003\000\002\022\003\000\002\022\005\000\002\023\003" +
    "\000\002\023\004\000\002\023\005\000\002\024\004\000" +
    "\002\024\005\000\002\025\003\000\002\025\005\000\002" +
    "\026\003\000\002\027\003\000\002\027\003\000\002\030" +
    "\005\000\002\030\004\000\002\030\003\000\002\031\003" +
    "\000\002\031\005\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\033" +
    "\003\000\002\033\004\000\002\034\003\000\002\034\004" +
    "\000\002\034\004\000\002\034\003\000\002\035\004\000" +
    "\002\035\004\000\002\035\005\000\002\035\005\000\002" +
    "\036\006\000\002\036\004\000\002\037\003\000\002\037" +
    "\004\000\002\040\003\000\002\040\003\000\002\040\005" +
    "\000\002\040\005\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\042\004\000\002\043\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\045\003\000\002\046" +
    "\003\000\002\047\003\000\002\047\004\000\002\050\003" +
    "\000\002\051\003\000\002\051\004\000\002\051\006\000" +
    "\002\052\003\000\002\052\003\000\002\053\004\000\002" +
    "\054\006\000\002\054\010\000\002\054\006\000\002\055" +
    "\003\000\002\055\003\000\002\055\004\000\002\056\003" +
    "\000\002\056\003\000\002\056\004\000\002\056\004\000" +
    "\002\057\003\000\002\057\005\000\002\060\003\000\002" +
    "\060\005\000\002\061\003\000\002\061\004\000\002\062" +
    "\003\000\002\062\005\000\002\063\003\000\002\063\005" +
    "\000\002\064\003\000\002\064\005\000\002\065\004\000" +
    "\002\065\005\000\002\066\004\000\002\066\005\000\002" +
    "\067\006\000\002\067\004\000\002\070\003\000\002\070" +
    "\003\000\002\070\003\000\002\070\003\000\002\070\003" +
    "\000\002\070\003\000\002\070\003\000\002\070\003\000" +
    "\002\070\003\000\002\071\004\000\002\071\004\000\002" +
    "\071\004\000\002\072\006\000\002\072\011\000\002\072" +
    "\007\000\002\072\012\000\002\073\006\000\002\073\007" +
    "\000\002\074\006\000\002\074\011\000\002\075\013\000" +
    "\002\075\010\000\002\076\006\000\002\076\014\000\002" +
    "\076\011\000\002\076\011\000\002\076\010\000\002\077" +
    "\005\000\002\077\006\000\002\100\005\000\002\101\004" +
    "\000\002\101\005\000\002\102\003\000\002\102\005\000" +
    "\002\103\003\000\002\103\004\000\002\103\006\000\002" +
    "\104\003\000\002\104\006\000\002\105\003\000\002\105" +
    "\004\000\002\106\003\000\002\106\007\000\002\107\003" +
    "\000\002\112\003\000\002\112\005\000\002\113\003\000" +
    "\002\113\005\000\002\114\004\000\002\114\003\000\002" +
    "\115\003\000\002\115\005\000\002\116\003\000\002\116" +
    "\003\000\002\116\003\000\002\116\003\000\002\116\003" +
    "\000\002\116\003\000\002\116\003\000\002\116\004\000" +
    "\002\116\003\000\002\116\004\000\002\117\004\000\002" +
    "\120\005\000\002\120\005\000\002\120\005\000\002\120" +
    "\005\000\002\120\005\000\002\120\005\000\002\120\005" +
    "\000\002\120\005\000\002\120\005\000\002\120\005\000" +
    "\002\120\005\000\002\120\005\000\002\120\004\000\002" +
    "\120\004\000\002\120\003\000\002\126\004\000\002\126" +
    "\004\000\002\126\003\000\002\127\003\000\002\127\005" +
    "\000\002\130\003\000\002\130\004\000\002\131\004\000" +
    "\002\131\005\000\002\131\005\000\002\131\004\000\002" +
    "\131\005\000\002\131\004\000\002\131\005\000\002\131" +
    "\003\000\002\131\003\000\002\131\003\000\002\131\003" +
    "\000\002\131\003\000\002\131\003\000\002\131\003\000" +
    "\002\132\003\000\002\132\004\000\002\133\004\000\002" +
    "\133\004\000\002\133\003\000\002\133\004\000\002\134" +
    "\003\000\002\134\003\000\002\134\005\000\002\134\005" +
    "\000\002\135\004\000\002\135\005\000\002\135\005\000" +
    "\002\135\004\000\002\136\003\000\002\136\004\000\002" +
    "\137\003\000\002\137\005\000\002\140\003\000\002\140" +
    "\006\000\002\140\005\000\002\140\005\000\002\140\005" +
    "\000\002\140\004\000\002\140\004\000\002\140\004\000" +
    "\002\140\003\000\002\141\003\000\002\141\004\000\002" +
    "\142\003\000\002\142\004\000\002\143\003\000\002\143" +
    "\003\000\002\143\005\000\002\143\005\000\002\144\003" +
    "\000\002\144\004\000\002\145\003\000\002\145\005\000" +
    "\002\146\003\000\002\146\003\000\002\147\006\000\002" +
    "\147\005\000\002\147\004\000\002\147\003\000\002\150" +
    "\005\000\002\150\004\000\002\150\007\000\002\150\006" +
    "\000\002\151\004\000\002\151\004\000\002\151\003\000" +
    "\002\151\004\000\002\152\003\000\002\152\003\000\002" +
    "\152\005\000\002\152\005\000\002\153\011\000\002\153" +
    "\006\000\002\153\010\000\002\154\003\000\002\154\004" +
    "\000\002\155\003\000\002\155\005\000\002\156\003\000" +
    "\002\156\004\000\002\156\005\000\002\156\004\000\002" +
    "\156\004\000\002\157\003\000\002\157\003\000\002\160" +
    "\007\000\002\160\006\000\002\161\004\000\002\162\004" +
    "\000\002\162\005\000\002\163\003\000\002\164\003\000" +
    "\002\164\004\000\002\165\004\000\002\165\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01d5\000\114\002\uffff\005\051\006\122\007\033\010" +
    "\054\011\064\012\024\013\127\016\111\017\020\021\073" +
    "\022\047\023\107\024\035\025\031\032\065\033\011\034" +
    "\117\035\110\036\100\042\023\043\034\045\025\046\022" +
    "\047\067\050\071\051\062\052\130\053\032\054\061\056" +
    "\121\063\056\064\103\065\066\076\026\102\005\132\017" +
    "\001\002\000\006\062\u01d4\132\u01d5\001\002\000\004\012" +
    "\301\001\002\000\156\006\u01cb\014\uff13\015\uff13\017\uff13" +
    "\027\uff13\033\uff13\035\uff13\037\uff13\040\uff13\043\uff13\044" +
    "\uff13\054\uff13\055\uff13\056\uff13\057\uff13\060\uff13\061\uff13" +
    "\062\uff13\063\uff13\064\uff13\065\uff13\066\uff13\067\uff13\070" +
    "\uff13\071\uff13\072\uff13\073\uff13\074\uff13\075\uff13\077\uff13" +
    "\100\uff13\102\uff13\103\uff13\104\uff13\105\uff13\106\uff13\107" +
    "\uff13\110\uff13\111\uff13\112\uff13\114\uff13\115\uff13\116\uff13" +
    "\117\uff13\120\uff13\121\uff13\122\uff13\123\uff13\124\uff13\125" +
    "\uff13\126\uff13\127\uff13\130\uff13\132\uff13\001\002\000\006" +
    "\062\uffbf\132\uffbf\001\002\000\154\014\uff20\015\uff20\017" +
    "\uff20\027\uff20\033\uff20\035\uff20\037\uff20\040\uff20\043\uff20" +
    "\044\uff20\054\u01b1\055\uff20\056\u01b3\057\uff20\060\uff20\061" +
    "\uff20\062\uff20\063\uff20\064\uff20\065\uff20\066\uff20\067\uff20" +
    "\070\uff20\071\uff20\072\uff20\073\uff20\074\u01b4\075\uff20\077" +
    "\uff20\100\uff20\102\uff20\103\uff20\104\uff20\105\uff20\106\uff20" +
    "\107\uff20\110\uff20\111\uff20\112\uff20\114\u01b0\115\uff20\116" +
    "\uff20\117\uff20\120\uff20\121\uff20\122\uff20\123\uff20\124\uff20" +
    "\125\uff20\126\uff20\127\uff20\130\uff20\132\uff20\001\002\000" +
    "\010\012\301\013\u019c\074\u019d\001\002\000\114\002\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013" +
    "\ufffb\016\ufffb\017\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\025\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\042" +
    "\ufffb\043\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb" +
    "\052\ufffb\053\ufffb\054\ufffb\056\ufffb\063\ufffb\064\ufffb\065" +
    "\ufffb\076\ufffb\102\ufffb\132\ufffb\001\002\000\144\014\uff24" +
    "\015\uff24\017\uff24\027\uff24\033\uff24\035\uff24\037\uff24\040" +
    "\uff24\043\uff24\044\uff24\055\uff24\057\uff24\060\uff24\061\uff24" +
    "\062\uff24\063\uff24\064\uff24\065\uff24\066\uff24\067\uff24\070" +
    "\uff24\071\uff24\072\uff24\073\uff24\075\uff24\077\uff24\100\uff24" +
    "\102\uff24\103\uff24\104\uff24\105\uff24\106\uff24\107\uff24\110" +
    "\uff24\111\uff24\112\uff24\115\uff24\116\uff24\117\uff24\120\uff24" +
    "\121\uff24\122\uff24\123\uff24\124\uff24\125\uff24\126\uff24\127" +
    "\uff24\130\uff24\132\uff24\001\002\000\144\014\uff3f\015\uff3f" +
    "\017\uff3f\027\uff3f\033\uff3f\035\uff3f\037\uff3f\040\uff3f\043" +
    "\uff3f\044\uff3f\055\uff3f\057\uff3f\060\uff3f\061\uff3f\062\uff3f" +
    "\063\146\064\135\065\145\066\140\067\147\070\137\071" +
    "\uff3f\072\uff3f\073\uff3f\075\143\077\uff3f\100\144\102\150" +
    "\103\uff3f\104\uff3f\105\uff3f\106\141\107\uff3f\110\142\111" +
    "\uff3f\112\uff3f\115\uff3f\116\136\117\uff3f\120\uff3f\121\uff3f" +
    "\122\uff3f\123\uff3f\124\uff3f\125\uff3f\126\uff3f\127\uff3f\130" +
    "\uff3f\132\uff3f\001\002\000\006\062\uffc3\132\uffc3\001\002" +
    "\000\006\062\uff9a\132\uff9a\001\002\000\114\002\ufffc\005" +
    "\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc" +
    "\016\ufffc\017\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025" +
    "\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\042\ufffc" +
    "\043\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052" +
    "\ufffc\053\ufffc\054\ufffc\056\ufffc\063\ufffc\064\ufffc\065\ufffc" +
    "\076\ufffc\102\ufffc\132\ufffc\001\002\000\010\024\035\032" +
    "\065\052\130\001\002\000\116\002\uff6a\005\uff6a\006\uff6a" +
    "\007\uff6a\010\uff6a\011\uff6a\012\uff6a\013\uff6a\016\uff6a\017" +
    "\uff6a\021\uff6a\022\uff6a\023\uff6a\024\uff6a\025\uff6a\032\uff6a" +
    "\033\uff6a\034\uff6a\035\uff6a\036\uff6a\042\uff6a\043\uff6a\045" +
    "\uff6a\046\uff6a\047\uff6a\050\uff6a\051\uff6a\052\uff6a\053\uff6a" +
    "\054\uff6a\056\uff6a\063\uff6a\064\uff6a\065\uff6a\076\uff6a\102" +
    "\uff6a\132\uff6a\134\uff6a\001\002\000\040\005\051\006\122" +
    "\007\033\010\054\011\064\012\024\013\127\043\034\054" +
    "\061\056\121\062\uff93\063\056\064\103\076\026\132\uff93" +
    "\001\002\000\004\012\u0193\001\002\000\154\014\uff15\015" +
    "\uff15\017\uff15\027\uff15\033\uff15\035\uff15\037\uff15\040\uff15" +
    "\043\uff15\044\uff15\054\uff15\055\uff15\056\uff15\057\uff15\060" +
    "\uff15\061\uff15\062\uff15\063\uff15\064\uff15\065\uff15\066\uff15" +
    "\067\uff15\070\uff15\071\uff15\072\uff15\073\uff15\074\uff15\075" +
    "\uff15\077\uff15\100\uff15\102\uff15\103\uff15\104\uff15\105\uff15" +
    "\106\uff15\107\uff15\110\uff15\111\uff15\112\uff15\114\uff15\115" +
    "\uff15\116\uff15\117\uff15\120\uff15\121\uff15\122\uff15\123\uff15" +
    "\124\uff15\125\uff15\126\uff15\127\uff15\130\uff15\132\uff15\001" +
    "\002\000\006\062\uff9e\132\uff9e\001\002\000\042\005\051" +
    "\006\122\007\033\010\054\011\064\012\024\013\127\043" +
    "\034\054\061\056\121\063\056\064\103\065\066\076\026" +
    "\077\u0179\114\u017e\001\002\000\010\061\u0177\062\uffc1\132" +
    "\uffc1\001\002\000\006\062\uffc6\132\uffc6\001\002\000\034" +
    "\005\051\006\122\007\033\010\054\011\064\012\024\013" +
    "\127\054\061\056\121\063\056\064\103\065\066\076\026" +
    "\001\002\000\046\005\051\006\122\007\033\010\054\011" +
    "\064\012\024\013\127\033\u0172\043\034\054\061\055\ufec1" +
    "\056\121\062\ufec1\063\056\064\103\073\ufec1\076\026\132" +
    "\ufec1\001\002\000\154\014\uff0f\015\uff0f\017\uff0f\027\uff0f" +
    "\033\uff0f\035\uff0f\037\uff0f\040\uff0f\043\uff0f\044\uff0f\054" +
    "\uff0f\055\uff0f\056\uff0f\057\uff0f\060\uff0f\061\uff0f\062\uff0f" +
    "\063\uff0f\064\uff0f\065\uff0f\066\uff0f\067\uff0f\070\uff0f\071" +
    "\uff0f\072\uff0f\073\uff0f\074\uff0f\075\uff0f\077\uff0f\100\uff0f" +
    "\102\uff0f\103\uff0f\104\uff0f\105\uff0f\106\uff0f\107\uff0f\110" +
    "\uff0f\111\uff0f\112\uff0f\114\uff0f\115\uff0f\116\uff0f\117\uff0f" +
    "\120\uff0f\121\uff0f\122\uff0f\123\uff0f\124\uff0f\125\uff0f\126" +
    "\uff0f\127\uff0f\130\uff0f\132\uff0f\001\002\000\034\005\051" +
    "\006\122\007\033\010\054\011\064\012\024\013\127\043" +
    "\034\054\061\056\121\063\056\064\103\076\026\001\002" +
    "\000\004\012\u014e\001\002\000\154\014\uff1e\015\uff1e\017" +
    "\uff1e\027\uff1e\033\uff1e\035\uff1e\037\uff1e\040\uff1e\043\uff1e" +
    "\044\uff1e\054\uff1e\055\uff1e\056\uff1e\057\uff1e\060\uff1e\061" +
    "\uff1e\062\uff1e\063\uff1e\064\uff1e\065\uff1e\066\uff1e\067\uff1e" +
    "\070\uff1e\071\uff1e\072\uff1e\073\uff1e\074\uff1e\075\uff1e\077" +
    "\uff1e\100\uff1e\102\uff1e\103\uff1e\104\uff1e\105\uff1e\106\uff1e" +
    "\107\uff1e\110\uff1e\111\uff1e\112\uff1e\114\uff1e\115\uff1e\116" +
    "\uff1e\117\uff1e\120\uff1e\121\uff1e\122\uff1e\123\uff1e\124\uff1e" +
    "\125\uff1e\126\uff1e\127\uff1e\130\uff1e\132\uff1e\001\002\000" +
    "\116\002\uff6b\005\uff6b\006\uff6b\007\uff6b\010\uff6b\011\uff6b" +
    "\012\uff6b\013\uff6b\016\uff6b\017\uff6b\021\uff6b\022\uff6b\023" +
    "\uff6b\024\uff6b\025\uff6b\032\uff6b\033\uff6b\034\uff6b\035\uff6b" +
    "\036\uff6b\042\uff6b\043\uff6b\045\uff6b\046\uff6b\047\uff6b\050" +
    "\uff6b\051\uff6b\052\uff6b\053\uff6b\054\uff6b\056\uff6b\063\uff6b" +
    "\064\uff6b\065\uff6b\076\uff6b\102\uff6b\132\uff6b\134\uff6b\001" +
    "\002\000\006\062\uffc2\132\uffc2\001\002\000\072\014\uff43" +
    "\015\uff43\017\uff43\027\uff43\033\uff43\035\uff43\044\uff43\055" +
    "\uff43\057\uff43\060\uff43\061\uff43\062\uff43\073\uff43\077\uff43" +
    "\111\uff43\112\uff43\115\uff43\117\uff43\120\uff43\121\uff43\122" +
    "\uff43\123\uff43\124\uff43\125\uff43\126\uff43\127\uff43\130\uff43" +
    "\132\uff43\001\002\000\006\062\uffc4\132\uffc4\001\002\000" +
    "\006\062\uff9b\132\uff9b\001\002\000\116\002\uff70\005\uff70" +
    "\006\uff70\007\uff70\010\uff70\011\uff70\012\uff70\013\uff70\016" +
    "\uff70\017\uff70\021\uff70\022\uff70\023\uff70\024\uff70\025\uff70" +
    "\032\uff70\033\uff70\034\uff70\035\uff70\036\uff70\042\uff70\043" +
    "\uff70\045\uff70\046\uff70\047\uff70\050\uff70\051\uff70\052\uff70" +
    "\053\uff70\054\uff70\056\uff70\063\uff70\064\uff70\065\uff70\076" +
    "\uff70\102\uff70\132\uff70\134\uff70\001\002\000\116\002\uff71" +
    "\005\uff71\006\uff71\007\uff71\010\uff71\011\uff71\012\uff71\013" +
    "\uff71\016\uff71\017\uff71\021\uff71\022\uff71\023\uff71\024\uff71" +
    "\025\uff71\032\uff71\033\uff71\034\uff71\035\uff71\036\uff71\042" +
    "\uff71\043\uff71\045\uff71\046\uff71\047\uff71\050\uff71\051\uff71" +
    "\052\uff71\053\uff71\054\uff71\056\uff71\063\uff71\064\uff71\065" +
    "\uff71\076\uff71\102\uff71\132\uff71\134\uff71\001\002\000\114" +
    "\002\000\005\051\006\122\007\033\010\054\011\064\012" +
    "\024\013\127\016\111\017\020\021\073\022\047\023\107" +
    "\024\035\025\031\032\065\033\011\034\117\035\110\036" +
    "\100\042\023\043\034\045\025\046\022\047\067\050\071" +
    "\051\062\052\130\053\032\054\061\056\121\063\056\064" +
    "\103\065\066\076\026\102\005\132\017\001\002\000\004" +
    "\012\u0136\001\002\000\012\017\ufff7\022\ufff7\024\ufff7\102" +
    "\ufff7\001\002\000\154\014\uff14\015\uff14\017\uff14\027\uff14" +
    "\033\uff14\035\uff14\037\uff14\040\uff14\043\uff14\044\uff14\054" +
    "\uff14\055\uff14\056\uff14\057\uff14\060\uff14\061\uff14\062\uff14" +
    "\063\uff14\064\uff14\065\uff14\066\uff14\067\uff14\070\uff14\071" +
    "\uff14\072\uff14\073\uff14\074\uff14\075\uff14\077\uff14\100\uff14" +
    "\102\uff14\103\uff14\104\uff14\105\uff14\106\uff14\107\uff14\110" +
    "\uff14\111\uff14\112\uff14\114\uff14\115\uff14\116\uff14\117\uff14" +
    "\120\uff14\121\uff14\122\uff14\123\uff14\124\uff14\125\uff14\126" +
    "\uff14\127\uff14\130\uff14\132\uff14\001\002\000\114\002\ufffd" +
    "\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\016\ufffd\017\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd" +
    "\025\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\042" +
    "\ufffd\043\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd" +
    "\052\ufffd\053\ufffd\054\ufffd\056\ufffd\063\ufffd\064\ufffd\065" +
    "\ufffd\076\ufffd\102\ufffd\132\ufffd\001\002\000\116\002\uff6d" +
    "\005\uff6d\006\uff6d\007\uff6d\010\uff6d\011\uff6d\012\uff6d\013" +
    "\uff6d\016\uff6d\017\uff6d\021\uff6d\022\uff6d\023\uff6d\024\uff6d" +
    "\025\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d\036\uff6d\042" +
    "\uff6d\043\uff6d\045\uff6d\046\uff6d\047\uff6d\050\uff6d\051\uff6d" +
    "\052\uff6d\053\uff6d\054\uff6d\056\uff6d\063\uff6d\064\uff6d\065" +
    "\uff6d\076\uff6d\102\uff6d\132\uff6d\134\uff6d\001\002\000\154" +
    "\014\uff10\015\uff10\017\uff10\027\uff10\033\uff10\035\uff10\037" +
    "\uff10\040\uff10\043\uff10\044\uff10\054\uff10\055\uff10\056\uff10" +
    "\057\uff10\060\uff10\061\uff10\062\uff10\063\uff10\064\uff10\065" +
    "\uff10\066\uff10\067\uff10\070\uff10\071\uff10\072\uff10\073\uff10" +
    "\074\uff10\075\uff10\077\uff10\100\uff10\102\uff10\103\uff10\104" +
    "\uff10\105\uff10\106\uff10\107\uff10\110\uff10\111\uff10\112\uff10" +
    "\114\uff10\115\uff10\116\uff10\117\uff10\120\uff10\121\uff10\122" +
    "\uff10\123\uff10\124\uff10\125\uff10\126\uff10\127\uff10\130\uff10" +
    "\132\uff10\001\002\000\114\014\uff40\015\uff40\017\uff40\027" +
    "\uff40\033\uff40\035\uff40\037\u012a\040\u0132\043\u0131\044\uff40" +
    "\055\uff40\057\uff40\060\uff40\061\uff40\062\uff40\071\u012f\072" +
    "\u012d\073\uff40\077\uff40\103\u012e\104\u0129\105\u012c\107\u0130" +
    "\111\uff40\112\uff40\115\uff40\117\uff40\120\uff40\121\uff40\122" +
    "\uff40\123\uff40\124\uff40\125\uff40\126\uff40\127\uff40\130\uff40" +
    "\132\uff40\001\002\000\032\005\051\006\122\007\033\010" +
    "\054\011\064\012\024\013\127\054\061\056\121\063\272" +
    "\064\270\076\026\001\002\000\116\002\uffcc\005\uffcc\006" +
    "\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\016\uffcc" +
    "\017\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\042\uffcc\043\uffcc" +
    "\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053" +
    "\uffcc\054\uffcc\056\uffcc\063\uffcc\064\uffcc\065\uffcc\076\uffcc" +
    "\102\uffcc\132\uffcc\134\uffcc\001\002\000\010\061\u0126\062" +
    "\uffc0\132\uffc0\001\002\000\042\005\051\006\122\007\033" +
    "\010\054\011\064\012\024\013\127\043\034\053\032\054" +
    "\061\055\u0122\056\121\063\056\064\103\065\066\076\026" +
    "\001\002\000\034\005\051\006\122\007\033\010\054\011" +
    "\064\012\024\013\127\043\034\054\061\056\121\063\056" +
    "\064\103\076\026\001\002\000\006\060\u0118\061\u0117\001" +
    "\002\000\154\014\uff11\015\uff11\017\uff11\027\uff11\033\uff11" +
    "\035\uff11\037\uff11\040\uff11\043\uff11\044\uff11\054\uff11\055" +
    "\uff11\056\uff11\057\uff11\060\uff11\061\uff11\062\uff11\063\uff11" +
    "\064\uff11\065\uff11\066\uff11\067\uff11\070\uff11\071\uff11\072" +
    "\uff11\073\uff11\074\uff11\075\uff11\077\uff11\100\uff11\102\uff11" +
    "\103\uff11\104\uff11\105\uff11\106\uff11\107\uff11\110\uff11\111" +
    "\uff11\112\uff11\114\uff11\115\uff11\116\uff11\117\uff11\120\uff11" +
    "\121\uff11\122\uff11\123\uff11\124\uff11\125\uff11\126\uff11\127" +
    "\uff11\130\uff11\132\uff11\001\002\000\034\005\051\006\122" +
    "\007\033\010\054\011\064\012\024\013\127\054\061\056" +
    "\121\063\056\064\103\065\066\076\026\001\002\000\032" +
    "\005\051\006\122\007\033\010\054\011\064\012\024\013" +
    "\127\054\061\056\121\063\056\064\103\076\026\001\002" +
    "\000\040\005\051\006\122\007\033\010\054\011\064\012" +
    "\024\013\127\043\034\054\061\056\121\062\uff96\063\056" +
    "\064\103\076\026\132\uff96\001\002\000\012\017\u010a\022" +
    "\047\024\035\102\005\001\002\000\004\060\356\001\002" +
    "\000\046\060\uffb0\061\uffb0\062\uffb0\073\uffb0\111\uffb0\112" +
    "\uffb0\115\uffb0\117\uffb0\120\uffb0\121\uffb0\122\uffb0\123\uffb0" +
    "\124\uffb0\125\uffb0\126\uffb0\127\uffb0\130\uffb0\132\uffb0\001" +
    "\002\000\006\062\uff98\132\uff98\001\002\000\044\060\324" +
    "\062\uffbe\073\317\111\331\112\336\115\333\117\325\120" +
    "\321\121\326\122\332\123\337\124\330\125\335\126\334" +
    "\127\316\130\323\132\uffbe\001\002\000\116\002\uff69\005" +
    "\uff69\006\uff69\007\uff69\010\uff69\011\uff69\012\uff69\013\uff69" +
    "\016\uff69\017\uff69\021\uff69\022\uff69\023\uff69\024\uff69\025" +
    "\uff69\032\uff69\033\uff69\034\uff69\035\uff69\036\uff69\042\uff69" +
    "\043\uff69\045\uff69\046\uff69\047\uff69\050\uff69\051\uff69\052" +
    "\uff69\053\uff69\054\uff69\056\uff69\063\uff69\064\uff69\065\uff69" +
    "\076\uff69\102\uff69\132\uff69\134\uff69\001\002\000\006\062" +
    "\uffc5\132\uffc5\001\002\000\066\015\uff48\017\uff48\033\uff48" +
    "\035\311\044\215\055\uff48\057\uff48\060\uff48\061\uff48\062" +
    "\uff48\073\uff48\077\uff48\111\uff48\112\uff48\115\uff48\117\uff48" +
    "\120\uff48\121\uff48\122\uff48\123\uff48\124\uff48\125\uff48\126" +
    "\uff48\127\uff48\130\uff48\132\uff48\001\002\000\004\012\301" +
    "\001\002\000\116\002\uff6f\005\uff6f\006\uff6f\007\uff6f\010" +
    "\uff6f\011\uff6f\012\uff6f\013\uff6f\016\uff6f\017\uff6f\021\uff6f" +
    "\022\uff6f\023\uff6f\024\uff6f\025\uff6f\032\uff6f\033\uff6f\034" +
    "\uff6f\035\uff6f\036\uff6f\042\uff6f\043\uff6f\045\uff6f\046\uff6f" +
    "\047\uff6f\050\uff6f\051\uff6f\052\uff6f\053\uff6f\054\uff6f\056" +
    "\uff6f\063\uff6f\064\uff6f\065\uff6f\076\uff6f\102\uff6f\132\uff6f" +
    "\134\uff6f\001\002\000\004\002\276\001\002\000\032\005" +
    "\051\006\122\007\033\010\054\011\064\012\024\013\127" +
    "\054\061\056\121\063\272\064\270\076\026\001\002\000" +
    "\046\060\uffb2\061\265\062\uffb2\073\uffb2\111\uffb2\112\uffb2" +
    "\115\uffb2\117\uffb2\120\uffb2\121\uffb2\122\uffb2\123\uffb2\124" +
    "\uffb2\125\uffb2\126\uffb2\127\uffb2\130\uffb2\132\uffb2\001\002" +
    "\000\046\060\uffaf\061\uffaf\062\uffaf\073\uffaf\111\uffaf\112" +
    "\uffaf\115\uffaf\117\uffaf\120\uffaf\121\uffaf\122\uffaf\123\uffaf" +
    "\124\uffaf\125\uffaf\126\uffaf\127\uffaf\130\uffaf\132\uffaf\001" +
    "\002\000\006\062\uff8f\132\uff8f\001\002\000\006\062\uff97" +
    "\132\uff97\001\002\000\034\005\051\006\122\007\033\010" +
    "\054\011\064\012\024\013\127\043\034\054\061\056\121" +
    "\063\056\064\103\076\026\001\002\000\034\005\051\006" +
    "\122\007\033\010\054\011\064\012\024\013\127\043\034" +
    "\054\061\056\121\063\056\064\103\076\026\001\002\000" +
    "\006\062\uff9c\132\uff9c\001\002\000\006\062\uff99\132\uff99" +
    "\001\002\000\116\002\uff6c\005\uff6c\006\uff6c\007\uff6c\010" +
    "\uff6c\011\uff6c\012\uff6c\013\uff6c\016\uff6c\017\uff6c\021\uff6c" +
    "\022\uff6c\023\uff6c\024\uff6c\025\uff6c\032\uff6c\033\uff6c\034" +
    "\uff6c\035\uff6c\036\uff6c\042\uff6c\043\uff6c\045\uff6c\046\uff6c" +
    "\047\uff6c\050\uff6c\051\uff6c\052\uff6c\053\uff6c\054\uff6c\056" +
    "\uff6c\063\uff6c\064\uff6c\065\uff6c\076\uff6c\102\uff6c\132\uff6c" +
    "\134\uff6c\001\002\000\006\062\uff94\132\uff94\001\002\000" +
    "\116\002\uff6e\005\uff6e\006\uff6e\007\uff6e\010\uff6e\011\uff6e" +
    "\012\uff6e\013\uff6e\016\uff6e\017\uff6e\021\uff6e\022\uff6e\023" +
    "\uff6e\024\uff6e\025\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e" +
    "\036\uff6e\042\uff6e\043\uff6e\045\uff6e\046\uff6e\047\uff6e\050" +
    "\uff6e\051\uff6e\052\uff6e\053\uff6e\054\uff6e\056\uff6e\063\uff6e" +
    "\064\uff6e\065\uff6e\076\uff6e\102\uff6e\132\uff6e\134\uff6e\001" +
    "\002\000\004\012\227\001\002\000\006\062\uff90\132\uff90" +
    "\001\002\000\040\005\051\006\122\007\033\010\054\011" +
    "\064\012\024\013\127\043\034\054\061\056\121\057\170" +
    "\063\056\064\103\065\066\076\026\001\002\000\156\006" +
    "\uff0e\014\uff0e\015\uff0e\017\uff0e\027\uff0e\033\uff0e\035\uff0e" +
    "\037\uff0e\040\uff0e\043\uff0e\044\uff0e\054\uff0e\055\uff0e\056" +
    "\uff0e\057\uff0e\060\uff0e\061\uff0e\062\uff0e\063\uff0e\064\uff0e" +
    "\065\uff0e\066\uff0e\067\uff0e\070\uff0e\071\uff0e\072\uff0e\073" +
    "\uff0e\074\uff0e\075\uff0e\077\uff0e\100\uff0e\102\uff0e\103\uff0e" +
    "\104\uff0e\105\uff0e\106\uff0e\107\uff0e\110\uff0e\111\uff0e\112" +
    "\uff0e\114\uff0e\115\uff0e\116\uff0e\117\uff0e\120\uff0e\121\uff0e" +
    "\122\uff0e\123\uff0e\124\uff0e\125\uff0e\126\uff0e\127\uff0e\130" +
    "\uff0e\132\uff0e\001\002\000\006\062\uffc8\132\uffc8\001\002" +
    "\000\116\002\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011" +
    "\uffcd\012\uffcd\013\uffcd\016\uffcd\017\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\042\uffcd\043\uffcd\045\uffcd\046\uffcd\047\uffcd" +
    "\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\056\uffcd\063" +
    "\uffcd\064\uffcd\065\uffcd\076\uffcd\102\uffcd\132\uffcd\134\uffcd" +
    "\001\002\000\072\014\165\015\uff45\017\uff45\027\uff45\033" +
    "\uff45\035\uff45\044\uff45\055\uff45\057\uff45\060\uff45\061\uff45" +
    "\062\uff45\073\uff45\077\uff45\111\uff45\112\uff45\115\uff45\117" +
    "\uff45\120\uff45\121\uff45\122\uff45\123\uff45\124\uff45\125\uff45" +
    "\126\uff45\127\uff45\130\uff45\132\uff45\001\002\000\006\062" +
    "\uff9d\132\uff9d\001\002\000\154\014\uff12\015\uff12\017\uff12" +
    "\027\uff12\033\uff12\035\uff12\037\uff12\040\uff12\043\uff12\044" +
    "\uff12\054\uff12\055\uff12\056\uff12\057\uff12\060\uff12\061\uff12" +
    "\062\uff12\063\uff12\064\uff12\065\uff12\066\uff12\067\uff12\070" +
    "\uff12\071\uff12\072\uff12\073\uff12\074\uff12\075\uff12\077\uff12" +
    "\100\uff12\102\uff12\103\uff12\104\uff12\105\uff12\106\uff12\107" +
    "\uff12\110\uff12\111\uff12\112\uff12\114\uff12\115\uff12\116\uff12" +
    "\117\uff12\120\uff12\121\uff12\122\uff12\123\uff12\124\uff12\125" +
    "\uff12\126\uff12\127\uff12\130\uff12\132\uff12\001\002\000\034" +
    "\005\051\006\122\007\033\010\054\011\064\012\024\013" +
    "\127\043\034\054\061\056\121\063\056\064\103\076\026" +
    "\001\002\000\010\015\133\060\uff51\061\uff51\001\002\000" +
    "\006\060\uff53\061\uff53\001\002\000\032\005\051\006\122" +
    "\007\033\010\054\011\064\012\024\013\127\054\061\056" +
    "\121\063\056\064\103\076\026\001\002\000\036\060\uff50" +
    "\061\uff50\063\146\064\135\065\145\066\140\067\147\070" +
    "\137\075\143\100\144\102\150\106\141\110\142\116\136" +
    "\001\002\000\032\005\051\006\122\007\033\010\054\011" +
    "\064\012\024\013\127\054\061\056\121\063\056\064\103" +
    "\076\026\001\002\000\032\005\051\006\122\007\033\010" +
    "\054\011\064\012\024\013\127\054\061\056\121\063\056" +
    "\064\103\076\026\001\002\000\032\005\051\006\122\007" +
    "\033\010\054\011\064\012\024\013\127\054\061\056\121" +
    "\063\056\064\103\076\026\001\002\000\032\005\051\006" +
    "\122\007\033\010\054\011\064\012\024\013\127\054\061" +
    "\056\121\063\056\064\103\076\026\001\002\000\032\005" +
    "\051\006\122\007\033\010\054\011\064\012\024\013\127" +
    "\054\061\056\121\063\056\064\103\076\026\001\002\000" +
    "\032\005\051\006\122\007\033\010\054\011\064\012\024" +
    "\013\127\054\061\056\121\063\056\064\103\076\026\001" +
    "\002\000\032\005\051\006\122\007\033\010\054\011\064" +
    "\012\024\013\127\054\061\056\121\063\056\064\103\076" +
    "\026\001\002\000\032\005\051\006\122\007\033\010\054" +
    "\011\064\012\024\013\127\054\061\056\121\063\056\064" +
    "\103\076\026\001\002\000\032\005\051\006\122\007\033" +
    "\010\054\011\064\012\024\013\127\054\061\056\121\063" +
    "\056\064\103\076\026\001\002\000\032\005\051\006\122" +
    "\007\033\010\054\011\064\012\024\013\127\054\061\056" +
    "\121\063\056\064\103\076\026\001\002\000\032\005\051" +
    "\006\122\007\033\010\054\011\064\012\024\013\127\054" +
    "\061\056\121\063\056\064\103\076\026\001\002\000\032" +
    "\005\051\006\122\007\033\010\054\011\064\012\024\013" +
    "\127\054\061\056\121\063\056\064\103\076\026\001\002" +
    "\000\144\014\uff2a\015\uff2a\017\uff2a\027\uff2a\033\uff2a\035" +
    "\uff2a\037\uff2a\040\uff2a\043\uff2a\044\uff2a\055\uff2a\057\uff2a" +
    "\060\uff2a\061\uff2a\062\uff2a\063\uff2a\064\uff2a\065\uff2a\066" +
    "\uff2a\067\uff2a\070\uff2a\071\uff2a\072\uff2a\073\uff2a\075\uff2a" +
    "\077\uff2a\100\uff2a\102\uff2a\103\uff2a\104\uff2a\105\uff2a\106" +
    "\uff2a\107\uff2a\110\uff2a\111\uff2a\112\uff2a\115\uff2a\116\uff2a" +
    "\117\uff2a\120\uff2a\121\uff2a\122\uff2a\123\uff2a\124\uff2a\125" +
    "\uff2a\126\uff2a\127\uff2a\130\uff2a\132\uff2a\001\002\000\144" +
    "\014\uff32\015\uff32\017\uff32\027\uff32\033\uff32\035\uff32\037" +
    "\uff32\040\uff32\043\uff32\044\uff32\055\uff32\057\uff32\060\uff32" +
    "\061\uff32\062\uff32\063\146\064\135\065\145\066\140\067" +
    "\uff32\070\137\071\uff32\072\uff32\073\uff32\075\143\077\uff32" +
    "\100\144\102\150\103\uff32\104\uff32\105\uff32\106\141\107" +
    "\uff32\110\142\111\uff32\112\uff32\115\uff32\116\136\117\uff32" +
    "\120\uff32\121\uff32\122\uff32\123\uff32\124\uff32\125\uff32\126" +
    "\uff32\127\uff32\130\uff32\132\uff32\001\002\000\144\014\uff2d" +
    "\015\uff2d\017\uff2d\027\uff2d\033\uff2d\035\uff2d\037\uff2d\040" +
    "\uff2d\043\uff2d\044\uff2d\055\uff2d\057\uff2d\060\uff2d\061\uff2d" +
    "\062\uff2d\063\uff2d\064\uff2d\065\145\066\140\067\uff2d\070" +
    "\uff2d\071\uff2d\072\uff2d\073\uff2d\075\143\077\uff2d\100\uff2d" +
    "\102\150\103\uff2d\104\uff2d\105\uff2d\106\uff2d\107\uff2d\110" +
    "\uff2d\111\uff2d\112\uff2d\115\uff2d\116\136\117\uff2d\120\uff2d" +
    "\121\uff2d\122\uff2d\123\uff2d\124\uff2d\125\uff2d\126\uff2d\127" +
    "\uff2d\130\uff2d\132\uff2d\001\002\000\144\014\uff2b\015\uff2b" +
    "\017\uff2b\027\uff2b\033\uff2b\035\uff2b\037\uff2b\040\uff2b\043" +
    "\uff2b\044\uff2b\055\uff2b\057\uff2b\060\uff2b\061\uff2b\062\uff2b" +
    "\063\uff2b\064\uff2b\065\uff2b\066\uff2b\067\uff2b\070\uff2b\071" +
    "\uff2b\072\uff2b\073\uff2b\075\uff2b\077\uff2b\100\uff2b\102\uff2b" +
    "\103\uff2b\104\uff2b\105\uff2b\106\uff2b\107\uff2b\110\uff2b\111" +
    "\uff2b\112\uff2b\115\uff2b\116\uff2b\117\uff2b\120\uff2b\121\uff2b" +
    "\122\uff2b\123\uff2b\124\uff2b\125\uff2b\126\uff2b\127\uff2b\130" +
    "\uff2b\132\uff2b\001\002\000\144\014\uff31\015\uff31\017\uff31" +
    "\027\uff31\033\uff31\035\uff31\037\uff31\040\uff31\043\uff31\044" +
    "\uff31\055\uff31\057\uff31\060\uff31\061\uff31\062\uff31\063\146" +
    "\064\135\065\145\066\140\067\uff31\070\137\071\uff31\072" +
    "\uff31\073\uff31\075\143\077\uff31\100\uff31\102\150\103\uff31" +
    "\104\uff31\105\uff31\106\141\107\uff31\110\142\111\uff31\112" +
    "\uff31\115\uff31\116\136\117\uff31\120\uff31\121\uff31\122\uff31" +
    "\123\uff31\124\uff31\125\uff31\126\uff31\127\uff31\130\uff31\132" +
    "\uff31\001\002\000\144\014\uff29\015\uff29\017\uff29\027\uff29" +
    "\033\uff29\035\uff29\037\uff29\040\uff29\043\uff29\044\uff29\055" +
    "\uff29\057\uff29\060\uff29\061\uff29\062\uff29\063\uff29\064\uff29" +
    "\065\uff29\066\uff29\067\uff29\070\uff29\071\uff29\072\uff29\073" +
    "\uff29\075\uff29\077\uff29\100\uff29\102\uff29\103\uff29\104\uff29" +
    "\105\uff29\106\uff29\107\uff29\110\uff29\111\uff29\112\uff29\115" +
    "\uff29\116\uff29\117\uff29\120\uff29\121\uff29\122\uff29\123\uff29" +
    "\124\uff29\125\uff29\126\uff29\127\uff29\130\uff29\132\uff29\001" +
    "\002\000\144\014\uff2e\015\uff2e\017\uff2e\027\uff2e\033\uff2e" +
    "\035\uff2e\037\uff2e\040\uff2e\043\uff2e\044\uff2e\055\uff2e\057" +
    "\uff2e\060\uff2e\061\uff2e\062\uff2e\063\146\064\135\065\145" +
    "\066\140\067\uff2e\070\uff2e\071\uff2e\072\uff2e\073\uff2e\075" +
    "\143\077\uff2e\100\uff2e\102\150\103\uff2e\104\uff2e\105\uff2e" +
    "\106\uff2e\107\uff2e\110\uff2e\111\uff2e\112\uff2e\115\uff2e\116" +
    "\136\117\uff2e\120\uff2e\121\uff2e\122\uff2e\123\uff2e\124\uff2e" +
    "\125\uff2e\126\uff2e\127\uff2e\130\uff2e\132\uff2e\001\002\000" +
    "\144\014\uff2f\015\uff2f\017\uff2f\027\uff2f\033\uff2f\035\uff2f" +
    "\037\uff2f\040\uff2f\043\uff2f\044\uff2f\055\uff2f\057\uff2f\060" +
    "\uff2f\061\uff2f\062\uff2f\063\146\064\135\065\145\066\140" +
    "\067\uff2f\070\uff2f\071\uff2f\072\uff2f\073\uff2f\075\143\077" +
    "\uff2f\100\uff2f\102\150\103\uff2f\104\uff2f\105\uff2f\106\uff2f" +
    "\107\uff2f\110\uff2f\111\uff2f\112\uff2f\115\uff2f\116\136\117" +
    "\uff2f\120\uff2f\121\uff2f\122\uff2f\123\uff2f\124\uff2f\125\uff2f" +
    "\126\uff2f\127\uff2f\130\uff2f\132\uff2f\001\002\000\144\014" +
    "\uff28\015\uff28\017\uff28\027\uff28\033\uff28\035\uff28\037\uff28" +
    "\040\uff28\043\uff28\044\uff28\055\uff28\057\uff28\060\uff28\061" +
    "\uff28\062\uff28\063\uff28\064\uff28\065\uff28\066\uff28\067\uff28" +
    "\070\uff28\071\uff28\072\uff28\073\uff28\075\uff28\077\uff28\100" +
    "\uff28\102\uff28\103\uff28\104\uff28\105\uff28\106\uff28\107\uff28" +
    "\110\uff28\111\uff28\112\uff28\115\uff28\116\uff28\117\uff28\120" +
    "\uff28\121\uff28\122\uff28\123\uff28\124\uff28\125\uff28\126\uff28" +
    "\127\uff28\130\uff28\132\uff28\001\002\000\144\014\uff30\015" +
    "\uff30\017\uff30\027\uff30\033\uff30\035\uff30\037\uff30\040\uff30" +
    "\043\uff30\044\uff30\055\uff30\057\uff30\060\uff30\061\uff30\062" +
    "\uff30\063\146\064\135\065\145\066\140\067\uff30\070\uff30" +
    "\071\uff30\072\uff30\073\uff30\075\143\077\uff30\100\uff30\102" +
    "\150\103\uff30\104\uff30\105\uff30\106\141\107\uff30\110\142" +
    "\111\uff30\112\uff30\115\uff30\116\136\117\uff30\120\uff30\121" +
    "\uff30\122\uff30\123\uff30\124\uff30\125\uff30\126\uff30\127\uff30" +
    "\130\uff30\132\uff30\001\002\000\144\014\uff27\015\uff27\017" +
    "\uff27\027\uff27\033\uff27\035\uff27\037\uff27\040\uff27\043\uff27" +
    "\044\uff27\055\uff27\057\uff27\060\uff27\061\uff27\062\uff27\063" +
    "\uff27\064\uff27\065\uff27\066\uff27\067\uff27\070\uff27\071\uff27" +
    "\072\uff27\073\uff27\075\uff27\077\uff27\100\uff27\102\uff27\103" +
    "\uff27\104\uff27\105\uff27\106\uff27\107\uff27\110\uff27\111\uff27" +
    "\112\uff27\115\uff27\116\uff27\117\uff27\120\uff27\121\uff27\122" +
    "\uff27\123\uff27\124\uff27\125\uff27\126\uff27\127\uff27\130\uff27" +
    "\132\uff27\001\002\000\144\014\uff2c\015\uff2c\017\uff2c\027" +
    "\uff2c\033\uff2c\035\uff2c\037\uff2c\040\uff2c\043\uff2c\044\uff2c" +
    "\055\uff2c\057\uff2c\060\uff2c\061\uff2c\062\uff2c\063\uff2c\064" +
    "\uff2c\065\145\066\140\067\uff2c\070\uff2c\071\uff2c\072\uff2c" +
    "\073\uff2c\075\143\077\uff2c\100\uff2c\102\150\103\uff2c\104" +
    "\uff2c\105\uff2c\106\uff2c\107\uff2c\110\uff2c\111\uff2c\112\uff2c" +
    "\115\uff2c\116\136\117\uff2c\120\uff2c\121\uff2c\122\uff2c\123" +
    "\uff2c\124\uff2c\125\uff2c\126\uff2c\127\uff2c\130\uff2c\132\uff2c" +
    "\001\002\000\034\005\051\006\122\007\033\010\054\011" +
    "\064\012\024\013\127\043\034\054\061\056\121\063\056" +
    "\064\103\076\026\001\002\000\072\014\uff42\015\uff42\017" +
    "\uff42\027\uff42\033\uff42\035\uff42\044\uff42\055\uff42\057\uff42" +
    "\060\uff42\061\uff42\062\uff42\073\uff42\077\uff42\111\uff42\112" +
    "\uff42\115\uff42\117\uff42\120\uff42\121\uff42\122\uff42\123\uff42" +
    "\124\uff42\125\uff42\126\uff42\127\uff42\130\uff42\132\uff42\001" +
    "\002\000\004\057\226\001\002\000\154\014\uff19\015\uff19" +
    "\017\uff19\027\uff19\033\uff19\035\uff19\037\uff19\040\uff19\043" +
    "\uff19\044\uff19\054\uff19\055\uff19\056\uff19\057\uff19\060\uff19" +
    "\061\uff19\062\uff19\063\uff19\064\uff19\065\uff19\066\uff19\067" +
    "\uff19\070\uff19\071\uff19\072\uff19\073\uff19\074\uff19\075\uff19" +
    "\077\uff19\100\uff19\102\uff19\103\uff19\104\uff19\105\uff19\106" +
    "\uff19\107\uff19\110\uff19\111\uff19\112\uff19\114\uff19\115\uff19" +
    "\116\uff19\117\uff19\120\uff19\121\uff19\122\uff19\123\uff19\124" +
    "\uff19\125\uff19\126\uff19\127\uff19\130\uff19\132\uff19\001\002" +
    "\000\010\055\uff0a\057\uff0a\061\223\001\002\000\012\017" +
    "\175\055\uff07\057\uff07\061\uff07\001\002\000\012\017\175" +
    "\055\uff08\057\uff08\061\uff08\001\002\000\006\055\uff0c\057" +
    "\uff0c\001\002\000\004\032\176\001\002\000\034\005\051" +
    "\006\122\007\033\010\054\011\064\012\024\013\127\054" +
    "\061\056\121\063\056\064\103\065\066\076\026\001\002" +
    "\000\012\055\ufec5\057\ufec5\061\ufec5\077\ufec5\001\002\000" +
    "\004\037\207\001\002\000\042\037\ufeef\061\ufeef\062\ufeef" +
    "\063\146\064\135\065\145\066\140\067\147\070\137\075" +
    "\143\100\144\102\150\106\141\110\142\116\136\132\ufeef" +
    "\001\002\000\012\037\ufef1\061\204\062\ufef1\132\ufef1\001" +
    "\002\000\012\037\ufeee\061\ufeee\062\ufeee\132\ufeee\001\002" +
    "\000\042\005\051\006\122\007\033\010\054\011\064\012" +
    "\024\013\127\037\ufef0\054\061\056\121\062\ufef0\063\056" +
    "\064\103\065\066\076\026\132\ufef0\001\002\000\042\037" +
    "\ufeed\061\ufeed\062\ufeed\063\146\064\135\065\145\066\140" +
    "\067\147\070\137\075\143\100\144\102\150\106\141\110" +
    "\142\116\136\132\ufeed\001\002\000\012\037\ufeec\061\ufeec" +
    "\062\ufeec\132\ufeec\001\002\000\034\005\051\006\122\007" +
    "\033\010\054\011\064\012\024\013\127\043\034\054\061" +
    "\056\121\063\056\064\103\076\026\001\002\000\020\017" +
    "\175\035\214\044\215\055\ufec6\057\ufec6\061\ufec6\077\ufec6" +
    "\001\002\000\012\055\ufec7\057\ufec7\061\ufec7\077\ufec7\001" +
    "\002\000\012\055\ufec9\057\ufec9\061\ufec9\077\ufec9\001\002" +
    "\000\012\055\ufec8\057\ufec8\061\ufec8\077\ufec8\001\002\000" +
    "\034\005\051\006\122\007\033\010\054\011\064\012\024" +
    "\013\127\043\034\054\061\056\121\063\056\064\103\076" +
    "\026\001\002\000\034\005\051\006\122\007\033\010\054" +
    "\011\064\012\024\013\127\043\034\054\061\056\121\063" +
    "\056\064\103\076\026\001\002\000\072\014\165\015\uff44" +
    "\017\uff44\027\uff44\033\uff44\035\uff44\044\uff44\055\uff44\057" +
    "\uff44\060\uff44\061\uff44\062\uff44\073\uff44\077\uff44\111\uff44" +
    "\112\uff44\115\uff44\117\uff44\120\uff44\121\uff44\122\uff44\123" +
    "\uff44\124\uff44\125\uff44\126\uff44\127\uff44\130\uff44\132\uff44" +
    "\001\002\000\020\017\uff46\035\uff46\044\215\055\uff46\057" +
    "\uff46\061\uff46\077\uff46\001\002\000\016\017\175\035\214" +
    "\055\ufec4\057\ufec4\061\ufec4\077\ufec4\001\002\000\012\055" +
    "\ufec3\057\ufec3\061\ufec3\077\ufec3\001\002\000\006\055\uff0b" +
    "\057\uff0b\001\002\000\042\005\051\006\122\007\033\010" +
    "\054\011\064\012\024\013\127\043\034\054\061\055\uff09" +
    "\056\121\057\uff09\063\056\064\103\065\066\076\026\001" +
    "\002\000\010\055\uff05\057\uff05\061\uff05\001\002\000\010" +
    "\055\uff06\057\uff06\061\uff06\001\002\000\154\014\uff18\015" +
    "\uff18\017\uff18\027\uff18\033\uff18\035\uff18\037\uff18\040\uff18" +
    "\043\uff18\044\uff18\054\uff18\055\uff18\056\uff18\057\uff18\060" +
    "\uff18\061\uff18\062\uff18\063\uff18\064\uff18\065\uff18\066\uff18" +
    "\067\uff18\070\uff18\071\uff18\072\uff18\073\uff18\074\uff18\075" +
    "\uff18\077\uff18\100\uff18\102\uff18\103\uff18\104\uff18\105\uff18" +
    "\106\uff18\107\uff18\110\uff18\111\uff18\112\uff18\114\uff18\115" +
    "\uff18\116\uff18\117\uff18\120\uff18\121\uff18\122\uff18\123\uff18" +
    "\124\uff18\125\uff18\126\uff18\127\uff18\130\uff18\132\uff18\001" +
    "\002\000\010\061\uff77\062\uff77\132\uff77\001\002\000\010" +
    "\061\231\062\uff72\132\uff72\001\002\000\034\005\051\006" +
    "\122\007\033\010\054\011\064\012\024\013\127\043\034" +
    "\054\061\056\121\063\056\064\103\076\026\001\002\000" +
    "\006\062\uff73\132\uff73\001\002\000\004\060\234\001\002" +
    "\000\070\005\051\006\122\007\033\010\054\011\064\012" +
    "\024\013\127\016\111\021\073\023\107\025\031\033\011" +
    "\034\117\036\100\042\023\043\034\045\025\046\022\047" +
    "\067\053\032\054\061\056\121\063\056\064\103\065\066" +
    "\076\026\132\236\001\002\000\122\002\uff65\005\uff65\006" +
    "\uff65\007\uff65\010\uff65\011\uff65\012\uff65\013\uff65\016\uff65" +
    "\017\uff65\021\uff65\022\uff65\023\uff65\024\uff65\025\uff65\026" +
    "\247\027\246\032\uff65\033\uff65\034\uff65\035\uff65\036\uff65" +
    "\042\uff65\043\uff65\045\uff65\046\uff65\047\uff65\050\uff65\051" +
    "\uff65\052\uff65\053\uff65\054\uff65\056\uff65\063\uff65\064\uff65" +
    "\065\uff65\076\uff65\102\uff65\132\uff65\134\uff65\001\002\000" +
    "\130\002\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9" +
    "\012\uffc9\013\uffc9\016\uffc9\017\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\042\uffc9\043" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9" +
    "\053\uffc9\054\uffc9\056\uffc9\063\uffc9\064\uffc9\065\uffc9\076" +
    "\uffc9\102\uffc9\132\uffc9\133\240\134\uffc9\001\002\000\126" +
    "\002\uff4c\005\uff4c\006\uff4c\007\uff4c\010\uff4c\011\uff4c\012" +
    "\uff4c\013\uff4c\016\uff4c\017\uff4c\021\uff4c\022\uff4c\023\uff4c" +
    "\024\uff4c\025\uff4c\026\uff4c\027\uff4c\030\uff4c\031\uff4c\032" +
    "\uff4c\033\uff4c\034\uff4c\035\uff4c\036\uff4c\042\uff4c\043\uff4c" +
    "\045\uff4c\046\uff4c\047\uff4c\050\uff4c\051\uff4c\052\uff4c\053" +
    "\uff4c\054\uff4c\056\uff4c\063\uff4c\064\uff4c\065\uff4c\076\uff4c" +
    "\102\uff4c\132\uff4c\134\uff4c\001\002\000\112\005\051\006" +
    "\122\007\033\010\054\011\064\012\024\013\127\016\111" +
    "\017\020\021\073\022\047\023\107\024\035\025\031\032" +
    "\065\033\011\034\117\035\110\036\100\042\023\043\034" +
    "\045\025\046\022\047\067\050\071\051\062\052\130\053" +
    "\032\054\061\056\121\063\056\064\103\065\066\076\026" +
    "\102\005\132\242\001\002\000\114\005\uff4a\006\uff4a\007" +
    "\uff4a\010\uff4a\011\uff4a\012\uff4a\013\uff4a\016\uff4a\017\uff4a" +
    "\021\uff4a\022\uff4a\023\uff4a\024\uff4a\025\uff4a\032\uff4a\033" +
    "\uff4a\034\uff4a\035\uff4a\036\uff4a\042\uff4a\043\uff4a\045\uff4a" +
    "\046\uff4a\047\uff4a\050\uff4a\051\uff4a\052\uff4a\053\uff4a\054" +
    "\uff4a\056\uff4a\063\uff4a\064\uff4a\065\uff4a\076\uff4a\102\uff4a" +
    "\132\uff4a\134\uff4a\001\002\000\114\005\uffc9\006\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\016\uffc9\017\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\042\uffc9\043\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054" +
    "\uffc9\056\uffc9\063\uffc9\064\uffc9\065\uffc9\076\uffc9\102\uffc9" +
    "\132\uffc9\134\uffc9\001\002\000\114\005\051\006\122\007" +
    "\033\010\054\011\064\012\024\013\127\016\111\017\020" +
    "\021\073\022\047\023\107\024\035\025\031\032\065\033" +
    "\011\034\117\035\110\036\100\042\023\043\034\045\025" +
    "\046\022\047\067\050\071\051\062\052\130\053\032\054" +
    "\061\056\121\063\056\064\103\065\066\076\026\102\005" +
    "\132\242\134\245\001\002\000\114\005\uff49\006\uff49\007" +
    "\uff49\010\uff49\011\uff49\012\uff49\013\uff49\016\uff49\017\uff49" +
    "\021\uff49\022\uff49\023\uff49\024\uff49\025\uff49\032\uff49\033" +
    "\uff49\034\uff49\035\uff49\036\uff49\042\uff49\043\uff49\045\uff49" +
    "\046\uff49\047\uff49\050\uff49\051\uff49\052\uff49\053\uff49\054" +
    "\uff49\056\uff49\063\uff49\064\uff49\065\uff49\076\uff49\102\uff49" +
    "\132\uff49\134\uff49\001\002\000\126\002\uff4b\005\uff4b\006" +
    "\uff4b\007\uff4b\010\uff4b\011\uff4b\012\uff4b\013\uff4b\016\uff4b" +
    "\017\uff4b\021\uff4b\022\uff4b\023\uff4b\024\uff4b\025\uff4b\026" +
    "\uff4b\027\uff4b\030\uff4b\031\uff4b\032\uff4b\033\uff4b\034\uff4b" +
    "\035\uff4b\036\uff4b\042\uff4b\043\uff4b\045\uff4b\046\uff4b\047" +
    "\uff4b\050\uff4b\051\uff4b\052\uff4b\053\uff4b\054\uff4b\056\uff4b" +
    "\063\uff4b\064\uff4b\065\uff4b\076\uff4b\102\uff4b\132\uff4b\134" +
    "\uff4b\001\002\000\004\060\263\001\002\000\034\005\051" +
    "\006\122\007\033\010\054\011\064\012\024\013\127\043" +
    "\034\054\061\056\121\063\056\064\103\076\026\001\002" +
    "\000\122\002\uff63\005\uff63\006\uff63\007\uff63\010\uff63\011" +
    "\uff63\012\uff63\013\uff63\016\uff63\017\uff63\021\uff63\022\uff63" +
    "\023\uff63\024\uff63\025\uff63\026\252\027\251\032\uff63\033" +
    "\uff63\034\uff63\035\uff63\036\uff63\042\uff63\043\uff63\045\uff63" +
    "\046\uff63\047\uff63\050\uff63\051\uff63\052\uff63\053\uff63\054" +
    "\uff63\056\uff63\063\uff63\064\uff63\065\uff63\076\uff63\102\uff63" +
    "\132\uff63\134\uff63\001\002\000\004\060\256\001\002\000" +
    "\034\005\051\006\122\007\033\010\054\011\064\012\024" +
    "\013\127\043\034\054\061\056\121\063\056\064\103\076" +
    "\026\001\002\000\004\060\254\001\002\000\070\005\051" +
    "\006\122\007\033\010\054\011\064\012\024\013\127\016" +
    "\111\021\073\023\107\025\031\033\011\034\117\036\100" +
    "\042\023\043\034\045\025\046\022\047\067\053\032\054" +
    "\061\056\121\063\056\064\103\065\066\076\026\132\236" +
    "\001\002\000\122\002\uff60\005\uff60\006\uff60\007\uff60\010" +
    "\uff60\011\uff60\012\uff60\013\uff60\016\uff60\017\uff60\021\uff60" +
    "\022\uff60\023\uff60\024\uff60\025\uff60\026\uff60\027\uff60\032" +
    "\uff60\033\uff60\034\uff60\035\uff60\036\uff60\042\uff60\043\uff60" +
    "\045\uff60\046\uff60\047\uff60\050\uff60\051\uff60\052\uff60\053" +
    "\uff60\054\uff60\056\uff60\063\uff60\064\uff60\065\uff60\076\uff60" +
    "\102\uff60\132\uff60\134\uff60\001\002\000\070\005\051\006" +
    "\122\007\033\010\054\011\064\012\024\013\127\016\111" +
    "\021\073\023\107\025\031\033\011\034\117\036\100\042" +
    "\023\043\034\045\025\046\022\047\067\053\032\054\061" +
    "\056\121\063\056\064\103\065\066\076\026\132\236\001" +
    "\002\000\116\002\uff62\005\uff62\006\uff62\007\uff62\010\uff62" +
    "\011\uff62\012\uff62\013\uff62\016\uff62\017\uff62\021\uff62\022" +
    "\uff62\023\uff62\024\uff62\025\uff62\032\uff62\033\uff62\034\uff62" +
    "\035\uff62\036\uff62\042\uff62\043\uff62\045\uff62\046\uff62\047" +
    "\uff62\050\uff62\051\uff62\052\uff62\053\uff62\054\uff62\056\uff62" +
    "\063\uff62\064\uff62\065\uff62\076\uff62\102\uff62\132\uff62\134" +
    "\uff62\001\002\000\004\060\261\001\002\000\070\005\051" +
    "\006\122\007\033\010\054\011\064\012\024\013\127\016" +
    "\111\021\073\023\107\025\031\033\011\034\117\036\100" +
    "\042\023\043\034\045\025\046\022\047\067\053\032\054" +
    "\061\056\121\063\056\064\103\065\066\076\026\132\236" +
    "\001\002\000\122\002\uff61\005\uff61\006\uff61\007\uff61\010" +
    "\uff61\011\uff61\012\uff61\013\uff61\016\uff61\017\uff61\021\uff61" +
    "\022\uff61\023\uff61\024\uff61\025\uff61\026\uff61\027\uff61\032" +
    "\uff61\033\uff61\034\uff61\035\uff61\036\uff61\042\uff61\043\uff61" +
    "\045\uff61\046\uff61\047\uff61\050\uff61\051\uff61\052\uff61\053" +
    "\uff61\054\uff61\056\uff61\063\uff61\064\uff61\065\uff61\076\uff61" +
    "\102\uff61\132\uff61\134\uff61\001\002\000\070\005\051\006" +
    "\122\007\033\010\054\011\064\012\024\013\127\016\111" +
    "\021\073\023\107\025\031\033\011\034\117\036\100\042" +
    "\023\043\034\045\025\046\022\047\067\053\032\054\061" +
    "\056\121\063\056\064\103\065\066\076\026\132\236\001" +
    "\002\000\116\002\uff64\005\uff64\006\uff64\007\uff64\010\uff64" +
    "\011\uff64\012\uff64\013\uff64\016\uff64\017\uff64\021\uff64\022" +
    "\uff64\023\uff64\024\uff64\025\uff64\032\uff64\033\uff64\034\uff64" +
    "\035\uff64\036\uff64\042\uff64\043\uff64\045\uff64\046\uff64\047" +
    "\uff64\050\uff64\051\uff64\052\uff64\053\uff64\054\uff64\056\uff64" +
    "\063\uff64\064\uff64\065\uff64\076\uff64\102\uff64\132\uff64\134" +
    "\uff64\001\002\000\100\005\051\006\122\007\033\010\054" +
    "\011\064\012\024\013\127\043\034\054\061\056\121\060" +
    "\uffb1\062\uffb1\063\056\064\103\065\066\073\uffb1\076\026" +
    "\111\uffb1\112\uffb1\115\uffb1\117\uffb1\120\uffb1\121\uffb1\122" +
    "\uffb1\123\uffb1\124\uffb1\125\uffb1\126\uffb1\127\uffb1\130\uffb1" +
    "\132\uffb1\001\002\000\046\060\uffad\061\uffad\062\uffad\073" +
    "\uffad\111\uffad\112\uffad\115\uffad\117\uffad\120\uffad\121\uffad" +
    "\122\uffad\123\uffad\124\uffad\125\uffad\126\uffad\127\uffad\130" +
    "\uffad\132\uffad\001\002\000\046\060\uffae\061\uffae\062\uffae" +
    "\073\uffae\111\uffae\112\uffae\115\uffae\117\uffae\120\uffae\121" +
    "\uffae\122\uffae\123\uffae\124\uffae\125\uffae\126\uffae\127\uffae" +
    "\130\uffae\132\uffae\001\002\000\032\005\051\006\122\007" +
    "\033\010\054\011\064\012\024\013\127\054\061\056\121" +
    "\063\272\064\270\076\026\001\002\000\144\014\uff21\015" +
    "\uff21\017\uff21\027\uff21\033\uff21\035\uff21\037\uff21\040\uff21" +
    "\043\uff21\044\uff21\055\uff21\057\uff21\060\uff21\061\uff21\062" +
    "\uff21\063\uff21\064\uff21\065\uff21\066\uff21\067\uff21\070\uff21" +
    "\071\uff21\072\uff21\073\uff21\075\uff21\077\uff21\100\uff21\102" +
    "\uff21\103\uff21\104\uff21\105\uff21\106\uff21\107\uff21\110\uff21" +
    "\111\uff21\112\uff21\115\uff21\116\uff21\117\uff21\120\uff21\121" +
    "\uff21\122\uff21\123\uff21\124\uff21\125\uff21\126\uff21\127\uff21" +
    "\130\uff21\132\uff21\001\002\000\032\005\051\006\122\007" +
    "\033\010\054\011\064\012\024\013\127\054\061\056\121" +
    "\063\272\064\270\076\026\001\002\000\144\014\uff25\015" +
    "\uff25\017\uff25\027\uff25\033\uff25\035\uff25\037\uff25\040\uff25" +
    "\043\uff25\044\uff25\055\uff25\057\uff25\060\uff25\061\uff25\062" +
    "\uff25\063\uff25\064\uff25\065\uff25\066\uff25\067\uff25\070\uff25" +
    "\071\uff25\072\uff25\073\uff25\075\uff25\077\uff25\100\uff25\102" +
    "\uff25\103\uff25\104\uff25\105\uff25\106\uff25\107\uff25\110\uff25" +
    "\111\uff25\112\uff25\115\uff25\116\uff25\117\uff25\120\uff25\121" +
    "\uff25\122\uff25\123\uff25\124\uff25\125\uff25\126\uff25\127\uff25" +
    "\130\uff25\132\uff25\001\002\000\144\014\uff23\015\uff23\017" +
    "\uff23\027\uff23\033\uff23\035\uff23\037\uff23\040\uff23\043\uff23" +
    "\044\uff23\055\uff23\057\uff23\060\uff23\061\uff23\062\uff23\063" +
    "\uff23\064\uff23\065\uff23\066\uff23\067\uff23\070\uff23\071\uff23" +
    "\072\uff23\073\uff23\075\uff23\077\uff23\100\uff23\102\uff23\103" +
    "\uff23\104\uff23\105\uff23\106\uff23\107\uff23\110\uff23\111\uff23" +
    "\112\uff23\115\uff23\116\uff23\117\uff23\120\uff23\121\uff23\122" +
    "\uff23\123\uff23\124\uff23\125\uff23\126\uff23\127\uff23\130\uff23" +
    "\132\uff23\001\002\000\144\014\uff22\015\uff22\017\uff22\027" +
    "\uff22\033\uff22\035\uff22\037\uff22\040\uff22\043\uff22\044\uff22" +
    "\055\uff22\057\uff22\060\uff22\061\uff22\062\uff22\063\uff22\064" +
    "\uff22\065\uff22\066\uff22\067\uff22\070\uff22\071\uff22\072\uff22" +
    "\073\uff22\075\uff22\077\uff22\100\uff22\102\uff22\103\uff22\104" +
    "\uff22\105\uff22\106\uff22\107\uff22\110\uff22\111\uff22\112\uff22" +
    "\115\uff22\116\uff22\117\uff22\120\uff22\121\uff22\122\uff22\123" +
    "\uff22\124\uff22\125\uff22\126\uff22\127\uff22\130\uff22\132\uff22" +
    "\001\002\000\004\002\001\001\002\000\014\015\305\061" +
    "\uff81\062\uff81\074\306\132\uff81\001\002\000\010\061\303" +
    "\062\uff8e\132\uff8e\001\002\000\020\015\uff79\036\uff79\054" +
    "\uff79\061\uff79\062\uff79\074\uff79\132\uff79\001\002\000\010" +
    "\061\uff7b\062\uff7b\132\uff7b\001\002\000\004\012\301\001" +
    "\002\000\010\061\uff7a\062\uff7a\132\uff7a\001\002\000\004" +
    "\012\310\001\002\000\004\012\307\001\002\000\020\015" +
    "\uff78\036\uff78\054\uff78\061\uff78\062\uff78\074\uff78\132\uff78" +
    "\001\002\000\010\061\uff80\062\uff80\132\uff80\001\002\000" +
    "\034\005\051\006\122\007\033\010\054\011\064\012\024" +
    "\013\127\043\034\054\061\056\121\063\056\064\103\076" +
    "\026\001\002\000\006\027\313\044\215\001\002\000\034" +
    "\005\051\006\122\007\033\010\054\011\064\012\024\013" +
    "\127\043\034\054\061\056\121\063\056\064\103\076\026" +
    "\001\002\000\062\015\uff47\017\uff47\033\uff47\055\uff47\057" +
    "\uff47\060\uff47\061\uff47\062\uff47\073\uff47\077\uff47\111\uff47" +
    "\112\uff47\115\uff47\117\uff47\120\uff47\121\uff47\122\uff47\123" +
    "\uff47\124\uff47\125\uff47\126\uff47\127\uff47\130\uff47\132\uff47" +
    "\001\002\000\036\005\051\006\122\007\033\010\054\011" +
    "\064\012\024\013\127\043\034\053\032\054\061\056\121" +
    "\063\056\064\103\076\026\001\002\000\036\005\uffa1\006" +
    "\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\043\uffa1" +
    "\053\uffa1\054\uffa1\056\uffa1\063\uffa1\064\uffa1\076\uffa1\001" +
    "\002\000\040\005\051\006\122\007\033\010\054\011\064" +
    "\012\024\013\127\043\034\053\032\054\061\056\121\063" +
    "\056\064\103\065\066\076\026\001\002\000\006\062\uffbc" +
    "\132\uffbc\001\002\000\036\005\uffa5\006\uffa5\007\uffa5\010" +
    "\uffa5\011\uffa5\012\uffa5\013\uffa5\043\uffa5\053\uffa5\054\uffa5" +
    "\056\uffa5\063\uffa5\064\uffa5\076\uffa5\001\002\000\010\062" +
    "\uffb9\073\343\132\uffb9\001\002\000\036\005\uffa0\006\uffa0" +
    "\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\043\uffa0\053" +
    "\uffa0\054\uffa0\056\uffa0\063\uffa0\064\uffa0\076\uffa0\001\002" +
    "\000\034\005\051\006\122\007\033\010\054\011\064\012" +
    "\024\013\127\043\034\054\061\056\121\063\056\064\103" +
    "\076\026\001\002\000\036\005\uffa8\006\uffa8\007\uffa8\010" +
    "\uffa8\011\uffa8\012\uffa8\013\uffa8\043\uffa8\053\uffa8\054\uffa8" +
    "\056\uffa8\063\uffa8\064\uffa8\076\uffa8\001\002\000\036\005" +
    "\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7" +
    "\043\uffa7\053\uffa7\054\uffa7\056\uffa7\063\uffa7\064\uffa7\076" +
    "\uffa7\001\002\000\006\062\uffbd\132\uffbd\001\002\000\036" +
    "\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013" +
    "\uffa9\043\uffa9\053\uffa9\054\uffa9\056\uffa9\063\uffa9\064\uffa9" +
    "\076\uffa9\001\002\000\036\005\uffac\006\uffac\007\uffac\010" +
    "\uffac\011\uffac\012\uffac\013\uffac\043\uffac\053\uffac\054\uffac" +
    "\056\uffac\063\uffac\064\uffac\076\uffac\001\002\000\036\005" +
    "\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6" +
    "\043\uffa6\053\uffa6\054\uffa6\056\uffa6\063\uffa6\064\uffa6\076" +
    "\uffa6\001\002\000\036\005\uffaa\006\uffaa\007\uffaa\010\uffaa" +
    "\011\uffaa\012\uffaa\013\uffaa\043\uffaa\053\uffaa\054\uffaa\056" +
    "\uffaa\063\uffaa\064\uffaa\076\uffaa\001\002\000\036\005\uffa2" +
    "\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\043" +
    "\uffa2\053\uffa2\054\uffa2\056\uffa2\063\uffa2\064\uffa2\076\uffa2" +
    "\001\002\000\036\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011" +
    "\uffa3\012\uffa3\013\uffa3\043\uffa3\053\uffa3\054\uffa3\056\uffa3" +
    "\063\uffa3\064\uffa3\076\uffa3\001\002\000\036\005\uffab\006" +
    "\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\043\uffab" +
    "\053\uffab\054\uffab\056\uffab\063\uffab\064\uffab\076\uffab\001" +
    "\002\000\036\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4" +
    "\012\uffa4\013\uffa4\043\uffa4\053\uffa4\054\uffa4\056\uffa4\063" +
    "\uffa4\064\uffa4\076\uffa4\001\002\000\010\062\uffb3\073\341" +
    "\132\uffb3\001\002\000\034\005\051\006\122\007\033\010" +
    "\054\011\064\012\024\013\127\043\034\054\061\056\121" +
    "\063\056\064\103\076\026\001\002\000\006\062\uffb4\132" +
    "\uffb4\001\002\000\040\005\051\006\122\007\033\010\054" +
    "\011\064\012\024\013\127\043\034\053\032\054\061\056" +
    "\121\063\056\064\103\065\066\076\026\001\002\000\010" +
    "\062\uffb5\073\uffb5\132\uffb5\001\002\000\010\062\uffb6\073" +
    "\uffb6\132\uffb6\001\002\000\010\062\uffb7\073\uffb7\132\uffb7" +
    "\001\002\000\010\062\uffb8\073\uffb8\132\uffb8\001\002\000" +
    "\016\055\ufeeb\060\ufeeb\061\354\062\ufeeb\073\ufeeb\132\ufeeb" +
    "\001\002\000\016\055\ufee9\060\ufee9\061\ufee9\062\ufee9\073" +
    "\ufee9\132\ufee9\001\002\000\006\062\uffbb\132\uffbb\001\002" +
    "\000\006\062\uffba\132\uffba\001\002\000\046\005\051\006" +
    "\122\007\033\010\054\011\064\012\024\013\127\043\034" +
    "\054\061\055\ufeea\056\121\060\ufeea\062\ufeea\063\056\064" +
    "\103\073\ufeea\076\026\132\ufeea\001\002\000\016\055\ufee8" +
    "\060\ufee8\061\ufee8\062\ufee8\073\ufee8\132\ufee8\001\002\000" +
    "\070\005\051\006\122\007\033\010\054\011\064\012\024" +
    "\013\127\016\111\021\073\023\107\025\031\033\011\034" +
    "\117\036\100\042\023\043\034\045\025\046\022\047\067" +
    "\053\032\054\061\056\121\063\056\064\103\065\066\076" +
    "\026\132\236\001\002\000\006\030\361\031\360\001\002" +
    "\000\004\060\u0105\001\002\000\036\005\051\006\122\007" +
    "\033\010\054\011\064\012\024\013\127\043\034\054\061" +
    "\056\121\060\uff4f\063\056\064\103\076\026\001\002\000" +
    "\004\060\u0100\001\002\000\124\002\uff5b\005\uff5b\006\uff5b" +
    "\007\uff5b\010\uff5b\011\uff5b\012\uff5b\013\uff5b\016\uff5b\017" +
    "\uff5b\021\uff5b\022\uff5b\023\uff5b\024\uff5b\025\uff5b\027\365" +
    "\030\361\031\364\032\uff5b\033\uff5b\034\uff5b\035\uff5b\036" +
    "\uff5b\042\uff5b\043\uff5b\045\uff5b\046\uff5b\047\uff5b\050\uff5b" +
    "\051\uff5b\052\uff5b\053\uff5b\054\uff5b\056\uff5b\063\uff5b\064" +
    "\uff5b\065\uff5b\076\uff5b\102\uff5b\132\uff5b\134\uff5b\001\002" +
    "\000\004\060\376\001\002\000\004\060\371\001\002\000" +
    "\004\060\367\001\002\000\070\005\051\006\122\007\033" +
    "\010\054\011\064\012\024\013\127\016\111\021\073\023" +
    "\107\025\031\033\011\034\117\036\100\042\023\043\034" +
    "\045\025\046\022\047\067\053\032\054\061\056\121\063" +
    "\056\064\103\065\066\076\026\132\236\001\002\000\124" +
    "\002\uff55\005\uff55\006\uff55\007\uff55\010\uff55\011\uff55\012" +
    "\uff55\013\uff55\016\uff55\017\uff55\021\uff55\022\uff55\023\uff55" +
    "\024\uff55\025\uff55\027\uff55\030\uff55\031\uff55\032\uff55\033" +
    "\uff55\034\uff55\035\uff55\036\uff55\042\uff55\043\uff55\045\uff55" +
    "\046\uff55\047\uff55\050\uff55\051\uff55\052\uff55\053\uff55\054" +
    "\uff55\056\uff55\063\uff55\064\uff55\065\uff55\076\uff55\102\uff55" +
    "\132\uff55\134\uff55\001\002\000\070\005\051\006\122\007" +
    "\033\010\054\011\064\012\024\013\127\016\111\021\073" +
    "\023\107\025\031\033\011\034\117\036\100\042\023\043" +
    "\034\045\025\046\022\047\067\053\032\054\061\056\121" +
    "\063\056\064\103\065\066\076\026\132\236\001\002\000" +
    "\120\002\uff59\005\uff59\006\uff59\007\uff59\010\uff59\011\uff59" +
    "\012\uff59\013\uff59\016\uff59\017\uff59\021\uff59\022\uff59\023" +
    "\uff59\024\uff59\025\uff59\031\373\032\uff59\033\uff59\034\uff59" +
    "\035\uff59\036\uff59\042\uff59\043\uff59\045\uff59\046\uff59\047" +
    "\uff59\050\uff59\051\uff59\052\uff59\053\uff59\054\uff59\056\uff59" +
    "\063\uff59\064\uff59\065\uff59\076\uff59\102\uff59\132\uff59\134" +
    "\uff59\001\002\000\004\060\374\001\002\000\070\005\051" +
    "\006\122\007\033\010\054\011\064\012\024\013\127\016" +
    "\111\021\073\023\107\025\031\033\011\034\117\036\100" +
    "\042\023\043\034\045\025\046\022\047\067\053\032\054" +
    "\061\056\121\063\056\064\103\065\066\076\026\132\236" +
    "\001\002\000\116\002\uff5a\005\uff5a\006\uff5a\007\uff5a\010" +
    "\uff5a\011\uff5a\012\uff5a\013\uff5a\016\uff5a\017\uff5a\021\uff5a" +
    "\022\uff5a\023\uff5a\024\uff5a\025\uff5a\032\uff5a\033\uff5a\034" +
    "\uff5a\035\uff5a\036\uff5a\042\uff5a\043\uff5a\045\uff5a\046\uff5a" +
    "\047\uff5a\050\uff5a\051\uff5a\052\uff5a\053\uff5a\054\uff5a\056" +
    "\uff5a\063\uff5a\064\uff5a\065\uff5a\076\uff5a\102\uff5a\132\uff5a" +
    "\134\uff5a\001\002\000\070\005\051\006\122\007\033\010" +
    "\054\011\064\012\024\013\127\016\111\021\073\023\107" +
    "\025\031\033\011\034\117\036\100\042\023\043\034\045" +
    "\025\046\022\047\067\053\032\054\061\056\121\063\056" +
    "\064\103\065\066\076\026\132\236\001\002\000\116\002" +
    "\uff58\005\uff58\006\uff58\007\uff58\010\uff58\011\uff58\012\uff58" +
    "\013\uff58\016\uff58\017\uff58\021\uff58\022\uff58\023\uff58\024" +
    "\uff58\025\uff58\032\uff58\033\uff58\034\uff58\035\uff58\036\uff58" +
    "\042\uff58\043\uff58\045\uff58\046\uff58\047\uff58\050\uff58\051" +
    "\uff58\052\uff58\053\uff58\054\uff58\056\uff58\063\uff58\064\uff58" +
    "\065\uff58\076\uff58\102\uff58\132\uff58\134\uff58\001\002\000" +
    "\070\005\051\006\122\007\033\010\054\011\064\012\024" +
    "\013\127\016\111\021\073\023\107\025\031\033\011\034" +
    "\117\036\100\042\023\043\034\045\025\046\022\047\067" +
    "\053\032\054\061\056\121\063\056\064\103\065\066\076" +
    "\026\132\236\001\002\000\124\002\uff56\005\uff56\006\uff56" +
    "\007\uff56\010\uff56\011\uff56\012\uff56\013\uff56\016\uff56\017" +
    "\uff56\021\uff56\022\uff56\023\uff56\024\uff56\025\uff56\027\uff56" +
    "\030\uff56\031\uff56\032\uff56\033\uff56\034\uff56\035\uff56\036" +
    "\uff56\042\uff56\043\uff56\045\uff56\046\uff56\047\uff56\050\uff56" +
    "\051\uff56\052\uff56\053\uff56\054\uff56\056\uff56\063\uff56\064" +
    "\uff56\065\uff56\076\uff56\102\uff56\132\uff56\134\uff56\001\002" +
    "\000\006\015\u0103\060\uff4e\001\002\000\004\012\u0104\001" +
    "\002\000\004\060\uff4d\001\002\000\070\005\051\006\122" +
    "\007\033\010\054\011\064\012\024\013\127\016\111\021" +
    "\073\023\107\025\031\033\011\034\117\036\100\042\023" +
    "\043\034\045\025\046\022\047\067\053\032\054\061\056" +
    "\121\063\056\064\103\065\066\076\026\132\236\001\002" +
    "\000\116\002\uff57\005\uff57\006\uff57\007\uff57\010\uff57\011" +
    "\uff57\012\uff57\013\uff57\016\uff57\017\uff57\021\uff57\022\uff57" +
    "\023\uff57\024\uff57\025\uff57\032\uff57\033\uff57\034\uff57\035" +
    "\uff57\036\uff57\042\uff57\043\uff57\045\uff57\046\uff57\047\uff57" +
    "\050\uff57\051\uff57\052\uff57\053\uff57\054\uff57\056\uff57\063" +
    "\uff57\064\uff57\065\uff57\076\uff57\102\uff57\132\uff57\134\uff57" +
    "\001\002\000\116\002\ufff3\005\ufff3\006\ufff3\007\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\016\ufff3\017\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\032\ufff3\033\ufff3\034" +
    "\ufff3\035\ufff3\036\ufff3\042\ufff3\043\ufff3\045\ufff3\046\ufff3" +
    "\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\056" +
    "\ufff3\063\ufff3\064\ufff3\065\ufff3\076\ufff3\102\ufff3\132\ufff3" +
    "\134\ufff3\001\002\000\012\017\ufff6\022\ufff6\024\ufff6\102" +
    "\ufff6\001\002\000\116\002\ufff4\005\ufff4\006\ufff4\007\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\013\ufff4\016\ufff4\017\ufff4\021" +
    "\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\032\ufff4\033\ufff4" +
    "\034\ufff4\035\ufff4\036\ufff4\042\ufff4\043\ufff4\045\ufff4\046" +
    "\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4" +
    "\056\ufff4\063\ufff4\064\ufff4\065\ufff4\076\ufff4\102\ufff4\132" +
    "\ufff4\134\ufff4\001\002\000\004\024\035\001\002\000\116" +
    "\002\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\016\ufff5\017\ufff5\021\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\025\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036" +
    "\ufff5\042\ufff5\043\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5" +
    "\051\ufff5\052\ufff5\053\ufff5\054\ufff5\056\ufff5\063\ufff5\064" +
    "\ufff5\065\ufff5\076\ufff5\102\ufff5\132\ufff5\134\ufff5\001\002" +
    "\000\116\002\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\016\ufff2\017\ufff2\021\ufff2\022\ufff2" +
    "\023\ufff2\024\ufff2\025\ufff2\032\ufff2\033\ufff2\034\ufff2\035" +
    "\ufff2\036\ufff2\042\ufff2\043\ufff2\045\ufff2\046\ufff2\047\ufff2" +
    "\050\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\056\ufff2\063" +
    "\ufff2\064\ufff2\065\ufff2\076\ufff2\102\ufff2\132\ufff2\134\ufff2" +
    "\001\002\000\006\062\uff95\132\uff95\001\002\000\110\017" +
    "\uff33\037\uff33\055\uff33\057\uff33\060\uff33\061\uff33\062\uff33" +
    "\063\146\064\135\065\145\066\140\067\147\070\137\073" +
    "\uff33\075\143\077\uff33\100\144\102\150\106\141\110\142" +
    "\111\uff33\112\uff33\115\uff33\116\136\117\uff33\120\uff33\121" +
    "\uff33\122\uff33\123\uff33\124\uff33\125\uff33\126\uff33\127\uff33" +
    "\130\uff33\132\uff33\001\002\000\004\037\u0110\001\002\000" +
    "\034\005\051\006\122\007\033\010\054\011\064\012\024" +
    "\013\127\043\034\054\061\056\121\063\056\064\103\076" +
    "\026\001\002\000\004\060\u0112\001\002\000\070\005\051" +
    "\006\122\007\033\010\054\011\064\012\024\013\127\016" +
    "\111\021\073\023\107\025\031\033\011\034\117\036\100" +
    "\042\023\043\034\045\025\046\022\047\067\053\032\054" +
    "\061\056\121\063\056\064\103\065\066\076\026\132\236" +
    "\001\002\000\120\002\uff5c\005\uff5c\006\uff5c\007\uff5c\010" +
    "\uff5c\011\uff5c\012\uff5c\013\uff5c\016\uff5c\017\uff5c\021\uff5c" +
    "\022\uff5c\023\uff5c\024\uff5c\025\uff5c\027\u0114\032\uff5c\033" +
    "\uff5c\034\uff5c\035\uff5c\036\uff5c\042\uff5c\043\uff5c\045\uff5c" +
    "\046\uff5c\047\uff5c\050\uff5c\051\uff5c\052\uff5c\053\uff5c\054" +
    "\uff5c\056\uff5c\063\uff5c\064\uff5c\065\uff5c\076\uff5c\102\uff5c" +
    "\132\uff5c\134\uff5c\001\002\000\004\060\u0115\001\002\000" +
    "\070\005\051\006\122\007\033\010\054\011\064\012\024" +
    "\013\127\016\111\021\073\023\107\025\031\033\011\034" +
    "\117\036\100\042\023\043\034\045\025\046\022\047\067" +
    "\053\032\054\061\056\121\063\056\064\103\065\066\076" +
    "\026\132\236\001\002\000\116\002\uff5d\005\uff5d\006\uff5d" +
    "\007\uff5d\010\uff5d\011\uff5d\012\uff5d\013\uff5d\016\uff5d\017" +
    "\uff5d\021\uff5d\022\uff5d\023\uff5d\024\uff5d\025\uff5d\032\uff5d" +
    "\033\uff5d\034\uff5d\035\uff5d\036\uff5d\042\uff5d\043\uff5d\045" +
    "\uff5d\046\uff5d\047\uff5d\050\uff5d\051\uff5d\052\uff5d\053\uff5d" +
    "\054\uff5d\056\uff5d\063\uff5d\064\uff5d\065\uff5d\076\uff5d\102" +
    "\uff5d\132\uff5d\134\uff5d\001\002\000\034\005\051\006\122" +
    "\007\033\010\054\011\064\012\024\013\127\043\034\054" +
    "\061\056\121\063\056\064\103\076\026\001\002\000\070" +
    "\005\051\006\122\007\033\010\054\011\064\012\024\013" +
    "\127\016\111\021\073\023\107\025\031\033\011\034\117" +
    "\036\100\042\023\043\034\045\025\046\022\047\067\053" +
    "\032\054\061\056\121\063\056\064\103\065\066\076\026" +
    "\132\236\001\002\000\116\002\uff54\005\uff54\006\uff54\007" +
    "\uff54\010\uff54\011\uff54\012\uff54\013\uff54\016\uff54\017\uff54" +
    "\021\uff54\022\uff54\023\uff54\024\uff54\025\uff54\032\uff54\033" +
    "\uff54\034\uff54\035\uff54\036\uff54\042\uff54\043\uff54\045\uff54" +
    "\046\uff54\047\uff54\050\uff54\051\uff54\052\uff54\053\uff54\054" +
    "\uff54\056\uff54\063\uff54\064\uff54\065\uff54\076\uff54\102\uff54" +
    "\132\uff54\134\uff54\001\002\000\006\060\uff52\061\uff52\001" +
    "\002\000\004\060\u011c\001\002\000\070\005\051\006\122" +
    "\007\033\010\054\011\064\012\024\013\127\016\111\021" +
    "\073\023\107\025\031\033\011\034\117\036\100\042\023" +
    "\043\034\045\025\046\022\047\067\053\032\054\061\056" +
    "\121\063\056\064\103\065\066\076\026\132\236\001\002" +
    "\000\120\002\uff5f\005\uff5f\006\uff5f\007\uff5f\010\uff5f\011" +
    "\uff5f\012\uff5f\013\uff5f\016\uff5f\017\uff5f\021\uff5f\022\uff5f" +
    "\023\uff5f\024\uff5f\025\uff5f\027\u011e\032\uff5f\033\uff5f\034" +
    "\uff5f\035\uff5f\036\uff5f\042\uff5f\043\uff5f\045\uff5f\046\uff5f" +
    "\047\uff5f\050\uff5f\051\uff5f\052\uff5f\053\uff5f\054\uff5f\056" +
    "\uff5f\063\uff5f\064\uff5f\065\uff5f\076\uff5f\102\uff5f\132\uff5f" +
    "\134\uff5f\001\002\000\004\060\u011f\001\002\000\070\005" +
    "\051\006\122\007\033\010\054\011\064\012\024\013\127" +
    "\016\111\021\073\023\107\025\031\033\011\034\117\036" +
    "\100\042\023\043\034\045\025\046\022\047\067\053\032" +
    "\054\061\056\121\063\056\064\103\065\066\076\026\132" +
    "\236\001\002\000\116\002\uff5e\005\uff5e\006\uff5e\007\uff5e" +
    "\010\uff5e\011\uff5e\012\uff5e\013\uff5e\016\uff5e\017\uff5e\021" +
    "\uff5e\022\uff5e\023\uff5e\024\uff5e\025\uff5e\032\uff5e\033\uff5e" +
    "\034\uff5e\035\uff5e\036\uff5e\042\uff5e\043\uff5e\045\uff5e\046" +
    "\uff5e\047\uff5e\050\uff5e\051\uff5e\052\uff5e\053\uff5e\054\uff5e" +
    "\056\uff5e\063\uff5e\064\uff5e\065\uff5e\076\uff5e\102\uff5e\132" +
    "\uff5e\134\uff5e\001\002\000\004\055\u0125\001\002\000\154" +
    "\014\uff1c\015\uff1c\017\uff1c\027\uff1c\033\uff1c\035\uff1c\037" +
    "\uff1c\040\uff1c\043\uff1c\044\uff1c\054\uff1c\055\uff1c\056\uff1c" +
    "\057\uff1c\060\uff1c\061\uff1c\062\uff1c\063\uff1c\064\uff1c\065" +
    "\uff1c\066\uff1c\067\uff1c\070\uff1c\071\uff1c\072\uff1c\073\uff1c" +
    "\074\uff1c\075\uff1c\077\uff1c\100\uff1c\102\uff1c\103\uff1c\104" +
    "\uff1c\105\uff1c\106\uff1c\107\uff1c\110\uff1c\111\uff1c\112\uff1c" +
    "\114\uff1c\115\uff1c\116\uff1c\117\uff1c\120\uff1c\121\uff1c\122" +
    "\uff1c\123\uff1c\124\uff1c\125\uff1c\126\uff1c\127\uff1c\130\uff1c" +
    "\132\uff1c\001\002\000\004\055\u0124\001\002\000\154\014" +
    "\uff1b\015\uff1b\017\uff1b\027\uff1b\033\uff1b\035\uff1b\037\uff1b" +
    "\040\uff1b\043\uff1b\044\uff1b\054\uff1b\055\uff1b\056\uff1b\057" +
    "\uff1b\060\uff1b\061\uff1b\062\uff1b\063\uff1b\064\uff1b\065\uff1b" +
    "\066\uff1b\067\uff1b\070\uff1b\071\uff1b\072\uff1b\073\uff1b\074" +
    "\uff1b\075\uff1b\077\uff1b\100\uff1b\102\uff1b\103\uff1b\104\uff1b" +
    "\105\uff1b\106\uff1b\107\uff1b\110\uff1b\111\uff1b\112\uff1b\114" +
    "\uff1b\115\uff1b\116\uff1b\117\uff1b\120\uff1b\121\uff1b\122\uff1b" +
    "\123\uff1b\124\uff1b\125\uff1b\126\uff1b\127\uff1b\130\uff1b\132" +
    "\uff1b\001\002\000\154\014\uff1a\015\uff1a\017\uff1a\027\uff1a" +
    "\033\uff1a\035\uff1a\037\uff1a\040\uff1a\043\uff1a\044\uff1a\054" +
    "\uff1a\055\uff1a\056\uff1a\057\uff1a\060\uff1a\061\uff1a\062\uff1a" +
    "\063\uff1a\064\uff1a\065\uff1a\066\uff1a\067\uff1a\070\uff1a\071" +
    "\uff1a\072\uff1a\073\uff1a\074\uff1a\075\uff1a\077\uff1a\100\uff1a" +
    "\102\uff1a\103\uff1a\104\uff1a\105\uff1a\106\uff1a\107\uff1a\110" +
    "\uff1a\111\uff1a\112\uff1a\114\uff1a\115\uff1a\116\uff1a\117\uff1a" +
    "\120\uff1a\121\uff1a\122\uff1a\123\uff1a\124\uff1a\125\uff1a\126" +
    "\uff1a\127\uff1a\130\uff1a\132\uff1a\001\002\000\004\012\u0127" +
    "\001\002\000\010\061\uff74\062\uff74\132\uff74\001\002\000" +
    "\144\014\uff26\015\uff26\017\uff26\027\uff26\033\uff26\035\uff26" +
    "\037\uff26\040\uff26\043\uff26\044\uff26\055\uff26\057\uff26\060" +
    "\uff26\061\uff26\062\uff26\063\uff26\064\uff26\065\uff26\066\uff26" +
    "\067\uff26\070\uff26\071\uff26\072\uff26\073\uff26\075\uff26\077" +
    "\uff26\100\uff26\102\uff26\103\uff26\104\uff26\105\uff26\106\uff26" +
    "\107\uff26\110\uff26\111\uff26\112\uff26\115\uff26\116\uff26\117" +
    "\uff26\120\uff26\121\uff26\122\uff26\123\uff26\124\uff26\125\uff26" +
    "\126\uff26\127\uff26\130\uff26\132\uff26\001\002\000\032\005" +
    "\uff38\006\uff38\007\uff38\010\uff38\011\uff38\012\uff38\013\uff38" +
    "\054\uff38\056\uff38\063\uff38\064\uff38\076\uff38\001\002\000" +
    "\032\005\uff37\006\uff37\007\uff37\010\uff37\011\uff37\012\uff37" +
    "\013\uff37\054\uff37\056\uff37\063\uff37\064\uff37\076\uff37\001" +
    "\002\000\032\005\051\006\122\007\033\010\054\011\064" +
    "\012\024\013\127\054\061\056\121\063\056\064\103\076" +
    "\026\001\002\000\032\005\uff39\006\uff39\007\uff39\010\uff39" +
    "\011\uff39\012\uff39\013\uff39\054\uff39\056\uff39\063\uff39\064" +
    "\uff39\076\uff39\001\002\000\032\005\uff3c\006\uff3c\007\uff3c" +
    "\010\uff3c\011\uff3c\012\uff3c\013\uff3c\054\uff3c\056\uff3c\063" +
    "\uff3c\064\uff3c\076\uff3c\001\002\000\032\005\uff3b\006\uff3b" +
    "\007\uff3b\010\uff3b\011\uff3b\012\uff3b\013\uff3b\054\uff3b\056" +
    "\uff3b\063\uff3b\064\uff3b\076\uff3b\001\002\000\032\005\uff3d" +
    "\006\uff3d\007\uff3d\010\uff3d\011\uff3d\012\uff3d\013\uff3d\054" +
    "\uff3d\056\uff3d\063\uff3d\064\uff3d\076\uff3d\001\002\000\032" +
    "\005\uff3a\006\uff3a\007\uff3a\010\uff3a\011\uff3a\012\uff3a\013" +
    "\uff3a\054\uff3a\056\uff3a\063\uff3a\064\uff3a\076\uff3a\001\002" +
    "\000\004\037\u0134\001\002\000\034\005\uff35\006\uff35\007" +
    "\uff35\010\uff35\011\uff35\012\uff35\013\uff35\043\u0133\054\uff35" +
    "\056\uff35\063\uff35\064\uff35\076\uff35\001\002\000\032\005" +
    "\uff34\006\uff34\007\uff34\010\uff34\011\uff34\012\uff34\013\uff34" +
    "\054\uff34\056\uff34\063\uff34\064\uff34\076\uff34\001\002\000" +
    "\032\005\uff36\006\uff36\007\uff36\010\uff36\011\uff36\012\uff36" +
    "\013\uff36\054\uff36\056\uff36\063\uff36\064\uff36\076\uff36\001" +
    "\002\000\144\014\uff3e\015\uff3e\017\uff3e\027\uff3e\033\uff3e" +
    "\035\uff3e\037\uff3e\040\uff3e\043\uff3e\044\uff3e\055\uff3e\057" +
    "\uff3e\060\uff3e\061\uff3e\062\uff3e\063\146\064\135\065\145" +
    "\066\140\067\147\070\137\071\uff3e\072\uff3e\073\uff3e\075" +
    "\143\077\uff3e\100\144\102\150\103\uff3e\104\uff3e\105\uff3e" +
    "\106\141\107\uff3e\110\142\111\uff3e\112\uff3e\115\uff3e\116" +
    "\136\117\uff3e\120\uff3e\121\uff3e\122\uff3e\123\uff3e\124\uff3e" +
    "\125\uff3e\126\uff3e\127\uff3e\130\uff3e\132\uff3e\001\002\000" +
    "\006\054\u0137\060\u0138\001\002\000\042\005\051\006\122" +
    "\007\033\010\054\011\064\012\024\013\127\043\034\054" +
    "\061\055\u0140\056\121\063\056\064\103\065\u013b\076\026" +
    "\114\u013d\001\002\000\070\005\051\006\122\007\033\010" +
    "\054\011\064\012\024\013\127\016\111\021\073\023\107" +
    "\025\031\033\011\034\117\036\100\042\023\043\034\045" +
    "\025\046\022\047\067\053\032\054\061\056\121\063\056" +
    "\064\103\065\066\076\026\132\236\001\002\000\116\002" +
    "\ufed4\005\ufed4\006\ufed4\007\ufed4\010\ufed4\011\ufed4\012\ufed4" +
    "\013\ufed4\016\ufed4\017\ufed4\021\ufed4\022\ufed4\023\ufed4\024" +
    "\ufed4\025\ufed4\032\ufed4\033\ufed4\034\ufed4\035\ufed4\036\ufed4" +
    "\042\ufed4\043\ufed4\045\ufed4\046\ufed4\047\ufed4\050\ufed4\051" +
    "\ufed4\052\ufed4\053\ufed4\054\ufed4\056\ufed4\063\ufed4\064\ufed4" +
    "\065\ufed4\076\ufed4\102\ufed4\132\ufed4\134\ufed4\001\002\000" +
    "\004\055\u014a\001\002\000\034\005\051\006\122\007\033" +
    "\010\054\011\064\012\024\013\127\043\034\054\061\056" +
    "\121\063\056\064\103\076\026\001\002\000\006\055\ufed0" +
    "\061\ufed0\001\002\000\034\005\051\006\122\007\033\010" +
    "\054\011\064\012\024\013\127\043\034\054\061\056\121" +
    "\063\056\064\103\076\026\001\002\000\006\055\ufed2\061" +
    "\u0146\001\002\000\012\017\175\055\ufece\061\ufece\073\u0144" +
    "\001\002\000\004\060\u0141\001\002\000\070\005\051\006" +
    "\122\007\033\010\054\011\064\012\024\013\127\016\111" +
    "\021\073\023\107\025\031\033\011\034\117\036\100\042" +
    "\023\043\034\045\025\046\022\047\067\053\032\054\061" +
    "\056\121\063\056\064\103\065\066\076\026\132\236\001" +
    "\002\000\116\002\ufed3\005\ufed3\006\ufed3\007\ufed3\010\ufed3" +
    "\011\ufed3\012\ufed3\013\ufed3\016\ufed3\017\ufed3\021\ufed3\022" +
    "\ufed3\023\ufed3\024\ufed3\025\ufed3\032\ufed3\033\ufed3\034\ufed3" +
    "\035\ufed3\036\ufed3\042\ufed3\043\ufed3\045\ufed3\046\ufed3\047" +
    "\ufed3\050\ufed3\051\ufed3\052\ufed3\053\ufed3\054\ufed3\056\ufed3" +
    "\063\ufed3\064\ufed3\065\ufed3\076\ufed3\102\ufed3\132\ufed3\134" +
    "\ufed3\001\002\000\006\055\ufecd\061\ufecd\001\002\000\034" +
    "\005\051\006\122\007\033\010\054\011\064\012\024\013" +
    "\127\043\034\054\061\056\121\063\056\064\103\076\026" +
    "\001\002\000\006\055\ufecc\061\ufecc\001\002\000\042\005" +
    "\051\006\122\007\033\010\054\011\064\012\024\013\127" +
    "\043\034\054\061\055\ufed1\056\121\063\056\064\103\065" +
    "\u013b\076\026\114\u013d\001\002\000\006\055\ufecf\061\ufecf" +
    "\001\002\000\006\055\ufecb\061\ufecb\001\002\000\006\055" +
    "\ufeca\061\ufeca\001\002\000\004\060\u014b\001\002\000\070" +
    "\005\051\006\122\007\033\010\054\011\064\012\024\013" +
    "\127\016\111\021\073\023\107\025\031\033\011\034\117" +
    "\036\100\042\023\043\034\045\025\046\022\047\067\053" +
    "\032\054\061\056\121\063\056\064\103\065\066\076\026" +
    "\132\236\001\002\000\116\002\ufed5\005\ufed5\006\ufed5\007" +
    "\ufed5\010\ufed5\011\ufed5\012\ufed5\013\ufed5\016\ufed5\017\ufed5" +
    "\021\ufed5\022\ufed5\023\ufed5\024\ufed5\025\ufed5\032\ufed5\033" +
    "\ufed5\034\ufed5\035\ufed5\036\ufed5\042\ufed5\043\ufed5\045\ufed5" +
    "\046\ufed5\047\ufed5\050\ufed5\051\ufed5\052\ufed5\053\ufed5\054" +
    "\ufed5\056\ufed5\063\ufed5\064\ufed5\065\ufed5\076\ufed5\102\ufed5" +
    "\132\ufed5\134\ufed5\001\002\000\114\002\ufffe\005\ufffe\006" +
    "\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\016\ufffe" +
    "\017\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\032" +
    "\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\042\ufffe\043\ufffe" +
    "\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053" +
    "\ufffe\054\ufffe\056\ufffe\063\ufffe\064\ufffe\065\ufffe\076\ufffe" +
    "\102\ufffe\132\ufffe\001\002\000\004\054\u014f\001\002\000" +
    "\012\012\u0160\055\u015f\065\u015c\114\u015a\001\002\000\006" +
    "\060\u0152\113\u0151\001\002\000\034\005\051\006\122\007" +
    "\033\010\054\011\064\012\024\013\127\043\034\054\061" +
    "\056\121\063\056\064\103\076\026\001\002\000\070\005" +
    "\051\006\122\007\033\010\054\011\064\012\024\013\127" +
    "\016\111\021\073\023\107\025\031\033\011\034\117\036" +
    "\100\042\023\043\034\045\025\046\022\047\067\053\032" +
    "\054\061\056\121\063\056\064\103\065\066\076\026\132" +
    "\236\001\002\000\116\002\ufff0\005\ufff0\006\ufff0\007\ufff0" +
    "\010\ufff0\011\ufff0\012\ufff0\013\ufff0\016\ufff0\017\ufff0\021" +
    "\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\032\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\042\ufff0\043\ufff0\045\ufff0\046" +
    "\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0" +
    "\056\ufff0\063\ufff0\064\ufff0\065\ufff0\076\ufff0\102\ufff0\132" +
    "\ufff0\134\ufff0\001\002\000\004\060\u0155\001\002\000\070" +
    "\005\051\006\122\007\033\010\054\011\064\012\024\013" +
    "\127\016\111\021\073\023\107\025\031\033\011\034\117" +
    "\036\100\042\023\043\034\045\025\046\022\047\067\053" +
    "\032\054\061\056\121\063\056\064\103\065\066\076\026" +
    "\132\236\001\002\000\116\002\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\016\ufff1\017\ufff1" +
    "\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\032\ufff1\033" +
    "\ufff1\034\ufff1\035\ufff1\036\ufff1\042\ufff1\043\ufff1\045\ufff1" +
    "\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054" +
    "\ufff1\056\ufff1\063\ufff1\064\ufff1\065\ufff1\076\ufff1\102\ufff1" +
    "\132\ufff1\134\ufff1\001\002\000\006\055\uffed\061\u016c\001" +
    "\002\000\006\055\uffea\061\u0169\001\002\000\004\055\uffe8" +
    "\001\002\000\004\012\u0160\001\002\000\006\055\uffe7\061" +
    "\uffe7\001\002\000\010\012\u0160\055\uffe5\061\uffe5\001\002" +
    "\000\004\055\u0165\001\002\000\010\055\uffe0\061\uffe0\073" +
    "\u0163\001\002\000\006\060\uffee\113\uffee\001\002\000\012" +
    "\055\uffdd\060\u0161\061\uffdd\073\uffdd\001\002\000\034\005" +
    "\051\006\122\007\033\010\054\011\064\012\024\013\127" +
    "\043\034\054\061\056\121\063\056\064\103\076\026\001" +
    "\002\000\010\055\uffde\061\uffde\073\uffde\001\002\000\034" +
    "\005\051\006\122\007\033\010\054\011\064\012\024\013" +
    "\127\043\034\054\061\056\121\063\056\064\103\076\026" +
    "\001\002\000\006\055\uffdf\061\uffdf\001\002\000\006\060" +
    "\uffef\113\uffef\001\002\000\006\055\uffe4\061\uffe4\001\002" +
    "\000\006\055\uffe2\061\u0168\001\002\000\004\055\uffe1\001" +
    "\002\000\006\012\u0160\114\u015a\001\002\000\004\055\uffe9" +
    "\001\002\000\006\055\uffe3\061\uffe3\001\002\000\006\012" +
    "\u0160\065\u015c\001\002\000\006\055\uffec\061\u016f\001\002" +
    "\000\006\055\uffe6\061\uffe6\001\002\000\006\012\u0160\114" +
    "\u015a\001\002\000\004\055\uffeb\001\002\000\072\014\uff41" +
    "\015\uff41\017\uff41\027\uff41\033\uff41\035\uff41\044\uff41\055" +
    "\uff41\057\uff41\060\uff41\061\uff41\062\uff41\073\uff41\077\uff41" +
    "\111\uff41\112\uff41\115\uff41\117\uff41\120\uff41\121\uff41\122" +
    "\uff41\123\uff41\124\uff41\125\uff41\126\uff41\127\uff41\130\uff41" +
    "\132\uff41\001\002\000\034\005\051\006\122\007\033\010" +
    "\054\011\064\012\024\013\127\043\034\054\061\056\121" +
    "\063\056\064\103\076\026\001\002\000\012\055\ufebe\062" +
    "\ufebe\073\ufebe\132\ufebe\001\002\000\012\055\ufec0\062\ufec0" +
    "\073\ufec0\132\ufec0\001\002\000\012\055\ufebf\062\ufebf\073" +
    "\ufebf\132\ufebf\001\002\000\006\062\uff9f\132\uff9f\001\002" +
    "\000\004\012\u0178\001\002\000\010\061\uff76\062\uff76\132" +
    "\uff76\001\002\000\154\014\uff17\015\uff17\017\uff17\027\uff17" +
    "\033\uff17\035\uff17\037\uff17\040\uff17\043\uff17\044\uff17\054" +
    "\uff17\055\uff17\056\uff17\057\uff17\060\uff17\061\uff17\062\uff17" +
    "\063\uff17\064\uff17\065\uff17\066\uff17\067\uff17\070\uff17\071" +
    "\uff17\072\uff17\073\uff17\074\uff17\075\uff17\077\uff17\100\uff17" +
    "\102\uff17\103\uff17\104\uff17\105\uff17\106\uff17\107\uff17\110" +
    "\uff17\111\uff17\112\uff17\114\uff17\115\uff17\116\uff17\117\uff17" +
    "\120\uff17\121\uff17\122\uff17\123\uff17\124\uff17\125\uff17\126" +
    "\uff17\127\uff17\130\uff17\132\uff17\001\002\000\006\061\u018d" +
    "\077\ufee2\001\002\000\004\077\u018c\001\002\000\004\077" +
    "\ufee6\001\002\000\004\077\ufee7\001\002\000\032\005\051" +
    "\006\122\007\033\010\054\011\064\012\024\013\127\054" +
    "\061\056\121\063\056\064\103\076\026\001\002\000\010" +
    "\017\175\061\ufed8\077\ufed8\001\002\000\006\061\u0186\077" +
    "\ufedb\001\002\000\012\017\175\060\u0183\061\ufed9\077\ufed9" +
    "\001\002\000\004\077\ufedd\001\002\000\034\005\051\006" +
    "\122\007\033\010\054\011\064\012\024\013\127\043\034" +
    "\054\061\056\121\063\056\064\103\076\026\001\002\000" +
    "\010\017\175\061\ufee1\077\ufee1\001\002\000\004\077\ufee5" +
    "\001\002\000\040\005\051\006\122\007\033\010\054\011" +
    "\064\012\024\013\127\043\034\054\061\056\121\063\056" +
    "\064\103\065\066\076\026\077\ufeda\001\002\000\006\061" +
    "\ufed6\077\ufed6\001\002\000\006\061\ufed7\077\ufed7\001\002" +
    "\000\004\077\ufedc\001\002\000\040\017\175\061\ufee0\063" +
    "\146\064\135\065\145\066\140\067\147\070\137\075\143" +
    "\077\ufee0\100\144\102\150\106\141\110\142\116\136\001" +
    "\002\000\004\077\ufee4\001\002\000\154\014\uff16\015\uff16" +
    "\017\uff16\027\uff16\033\uff16\035\uff16\037\uff16\040\uff16\043" +
    "\uff16\044\uff16\054\uff16\055\uff16\056\uff16\057\uff16\060\uff16" +
    "\061\uff16\062\uff16\063\uff16\064\uff16\065\uff16\066\uff16\067" +
    "\uff16\070\uff16\071\uff16\072\uff16\073\uff16\074\uff16\075\uff16" +
    "\077\uff16\100\uff16\102\uff16\103\uff16\104\uff16\105\uff16\106" +
    "\uff16\107\uff16\110\uff16\111\uff16\112\uff16\114\uff16\115\uff16" +
    "\116\uff16\117\uff16\120\uff16\121\uff16\122\uff16\123\uff16\124" +
    "\uff16\125\uff16\126\uff16\127\uff16\130\uff16\132\uff16\001\002" +
    "\000\040\005\051\006\122\007\033\010\054\011\064\012" +
    "\024\013\127\043\034\054\061\056\121\063\056\064\103" +
    "\076\026\077\ufee3\114\u018e\001\002\000\032\005\051\006" +
    "\122\007\033\010\054\011\064\012\024\013\127\054\061" +
    "\056\121\063\056\064\103\076\026\001\002\000\004\060" +
    "\u0190\001\002\000\034\005\051\006\122\007\033\010\054" +
    "\011\064\012\024\013\127\043\034\054\061\056\121\063" +
    "\056\064\103\076\026\001\002\000\006\061\ufedf\077\ufedf" +
    "\001\002\000\036\061\ufede\063\146\064\135\065\145\066" +
    "\140\067\147\070\137\075\143\077\ufede\100\144\102\150" +
    "\106\141\110\142\116\136\001\002\000\010\061\uff75\062" +
    "\uff75\132\uff75\001\002\000\010\033\u0195\062\uff92\132\uff92" +
    "\001\002\000\034\005\051\006\122\007\033\010\054\011" +
    "\064\012\024\013\127\043\034\054\061\056\121\063\056" +
    "\064\103\076\026\001\002\000\006\062\uff91\132\uff91\001" +
    "\002\000\116\002\uff67\005\uff67\006\uff67\007\uff67\010\uff67" +
    "\011\uff67\012\uff67\013\uff67\016\uff67\017\uff67\021\uff67\022" +
    "\uff67\023\uff67\024\uff67\025\uff67\032\uff67\033\uff67\034\uff67" +
    "\035\uff67\036\uff67\042\uff67\043\uff67\045\uff67\046\uff67\047" +
    "\uff67\050\uff67\051\uff67\052\uff67\053\uff67\054\uff67\056\uff67" +
    "\063\uff67\064\uff67\065\uff67\076\uff67\102\uff67\132\uff67\134" +
    "\uff67\001\002\000\116\002\uff68\005\uff68\006\uff68\007\uff68" +
    "\010\uff68\011\uff68\012\uff68\013\uff68\016\uff68\017\uff68\021" +
    "\uff68\022\uff68\023\uff68\024\uff68\025\uff68\032\uff68\033\uff68" +
    "\034\uff68\035\uff68\036\uff68\042\uff68\043\uff68\045\uff68\046" +
    "\uff68\047\uff68\050\uff68\051\uff68\052\uff68\053\uff68\054\uff68" +
    "\056\uff68\063\uff68\064\uff68\065\uff68\076\uff68\102\uff68\132" +
    "\uff68\134\uff68\001\002\000\116\002\uff66\005\uff66\006\uff66" +
    "\007\uff66\010\uff66\011\uff66\012\uff66\013\uff66\016\uff66\017" +
    "\uff66\021\uff66\022\uff66\023\uff66\024\uff66\025\uff66\032\uff66" +
    "\033\uff66\034\uff66\035\uff66\036\uff66\042\uff66\043\uff66\045" +
    "\uff66\046\uff66\047\uff66\050\uff66\051\uff66\052\uff66\053\uff66" +
    "\054\uff66\056\uff66\063\uff66\064\uff66\065\uff66\076\uff66\102" +
    "\uff66\132\uff66\134\uff66\001\002\000\012\012\301\013\u01ae" +
    "\036\uff89\074\u01af\001\002\000\006\036\uff8a\074\306\001" +
    "\002\000\012\012\uff86\013\uff86\036\uff86\074\uff86\001\002" +
    "\000\012\012\uff87\013\uff87\036\uff87\074\uff87\001\002\000" +
    "\004\036\u019f\001\002\000\010\012\u01a4\054\u01a3\065\u01a0" +
    "\001\002\000\006\062\uff8d\132\uff8d\001\002\000\012\055" +
    "\uff7f\061\u01ac\062\uff7f\132\uff7f\001\002\000\012\055\uff7d" +
    "\061\uff7d\062\uff7d\132\uff7d\001\002\000\004\012\u01a4\001" +
    "\002\000\014\015\u01a8\055\uff83\061\uff83\062\uff83\132\uff83" +
    "\001\002\000\010\061\u01a6\062\uff8b\132\uff8b\001\002\000" +
    "\004\012\u01a4\001\002\000\012\055\uff7c\061\uff7c\062\uff7c" +
    "\132\uff7c\001\002\000\004\012\u01a9\001\002\000\012\055" +
    "\uff82\061\uff82\062\uff82\132\uff82\001\002\000\006\055\u01ab" +
    "\061\u01a6\001\002\000\006\062\uff8c\132\uff8c\001\002\000" +
    "\012\055\uff7e\061\uff7e\062\uff7e\132\uff7e\001\002\000\006" +
    "\036\uff88\074\306\001\002\000\012\012\uff84\013\uff84\036" +
    "\uff84\074\uff84\001\002\000\012\012\uff85\013\uff85\036\uff85" +
    "\074\uff85\001\002\000\032\005\051\006\122\007\033\010" +
    "\054\011\064\012\024\013\127\054\061\056\121\063\272" +
    "\064\270\076\026\001\002\000\042\005\051\006\122\007" +
    "\033\010\054\011\064\012\024\013\127\043\034\054\061" +
    "\055\u01c8\056\121\063\056\064\103\065\u013b\076\026\114" +
    "\u013d\001\002\000\154\014\uff1d\015\uff1d\017\uff1d\027\uff1d" +
    "\033\uff1d\035\uff1d\037\uff1d\040\uff1d\043\uff1d\044\uff1d\054" +
    "\uff1d\055\uff1d\056\uff1d\057\uff1d\060\uff1d\061\uff1d\062\uff1d" +
    "\063\uff1d\064\uff1d\065\uff1d\066\uff1d\067\uff1d\070\uff1d\071" +
    "\uff1d\072\uff1d\073\uff1d\074\uff1d\075\uff1d\077\uff1d\100\uff1d" +
    "\102\uff1d\103\uff1d\104\uff1d\105\uff1d\106\uff1d\107\uff1d\110" +
    "\uff1d\111\uff1d\112\uff1d\114\uff1d\115\uff1d\116\uff1d\117\uff1d" +
    "\120\uff1d\121\uff1d\122\uff1d\123\uff1d\124\uff1d\125\uff1d\126" +
    "\uff1d\127\uff1d\130\uff1d\132\uff1d\001\002\000\036\005\051" +
    "\006\122\007\033\010\054\011\064\012\024\013\127\043" +
    "\034\054\061\056\121\060\u01b6\063\056\064\103\076\026" +
    "\001\002\000\004\012\u01b5\001\002\000\154\014\uff01\015" +
    "\uff01\017\uff01\027\uff01\033\uff01\035\uff01\037\uff01\040\uff01" +
    "\043\uff01\044\uff01\054\uff01\055\uff01\056\uff01\057\uff01\060" +
    "\uff01\061\uff01\062\uff01\063\uff01\064\uff01\065\uff01\066\uff01" +
    "\067\uff01\070\uff01\071\uff01\072\uff01\073\uff01\074\uff01\075" +
    "\uff01\077\uff01\100\uff01\102\uff01\103\uff01\104\uff01\105\uff01" +
    "\106\uff01\107\uff01\110\uff01\111\uff01\112\uff01\114\uff01\115" +
    "\uff01\116\uff01\117\uff01\120\uff01\121\uff01\122\uff01\123\uff01" +
    "\124\uff01\125\uff01\126\uff01\127\uff01\130\uff01\132\uff01\001" +
    "\002\000\042\005\051\006\122\007\033\010\054\011\064" +
    "\012\024\013\127\043\034\054\061\056\121\057\ufef4\060" +
    "\u01bd\061\ufef4\063\056\064\103\076\026\001\002\000\006" +
    "\057\uff00\061\u01c2\001\002\000\006\057\ufefe\061\ufefe\001" +
    "\002\000\010\057\ufefc\060\u01bc\061\ufefc\001\002\000\004" +
    "\057\u01bb\001\002\000\154\014\uff02\015\uff02\017\uff02\027" +
    "\uff02\033\uff02\035\uff02\037\uff02\040\uff02\043\uff02\044\uff02" +
    "\054\uff02\055\uff02\056\uff02\057\uff02\060\uff02\061\uff02\062" +
    "\uff02\063\uff02\064\uff02\065\uff02\066\uff02\067\uff02\070\uff02" +
    "\071\uff02\072\uff02\073\uff02\074\uff02\075\uff02\077\uff02\100" +
    "\uff02\102\uff02\103\uff02\104\uff02\105\uff02\106\uff02\107\uff02" +
    "\110\uff02\111\uff02\112\uff02\114\uff02\115\uff02\116\uff02\117" +
    "\uff02\120\uff02\121\uff02\122\uff02\123\uff02\124\uff02\125\uff02" +
    "\126\uff02\127\uff02\130\uff02\132\uff02\001\002\000\042\005" +
    "\051\006\122\007\033\010\054\011\064\012\024\013\127" +
    "\043\034\054\061\056\121\057\ufef7\060\u01bd\061\ufef7\063" +
    "\056\064\103\076\026\001\002\000\040\005\051\006\122" +
    "\007\033\010\054\011\064\012\024\013\127\043\034\054" +
    "\061\056\121\057\ufef3\061\ufef3\063\056\064\103\076\026" +
    "\001\002\000\006\057\ufef9\061\ufef9\001\002\000\010\057" +
    "\ufef8\060\u01bd\061\ufef8\001\002\000\006\057\ufefb\061\ufefb" +
    "\001\002\000\006\057\ufef2\061\ufef2\001\002\000\040\005" +
    "\051\006\122\007\033\010\054\011\064\012\024\013\127" +
    "\043\034\054\061\056\121\057\ufeff\060\u01b6\063\056\064" +
    "\103\076\026\001\002\000\006\057\ufefd\061\ufefd\001\002" +
    "\000\006\057\ufef6\061\ufef6\001\002\000\010\057\ufef5\060" +
    "\u01bd\061\ufef5\001\002\000\006\057\ufefa\061\ufefa\001\002" +
    "\000\004\055\u01c9\001\002\000\154\014\uff04\015\uff04\017" +
    "\uff04\027\uff04\033\uff04\035\uff04\037\uff04\040\uff04\043\uff04" +
    "\044\uff04\054\uff04\055\uff04\056\uff04\057\uff04\060\uff04\061" +
    "\uff04\062\uff04\063\uff04\064\uff04\065\uff04\066\uff04\067\uff04" +
    "\070\uff04\071\uff04\072\uff04\073\uff04\074\uff04\075\uff04\077" +
    "\uff04\100\uff04\102\uff04\103\uff04\104\uff04\105\uff04\106\uff04" +
    "\107\uff04\110\uff04\111\uff04\112\uff04\114\uff04\115\uff04\116" +
    "\uff04\117\uff04\120\uff04\121\uff04\122\uff04\123\uff04\124\uff04" +
    "\125\uff04\126\uff04\127\uff04\130\uff04\132\uff04\001\002\000" +
    "\154\014\uff03\015\uff03\017\uff03\027\uff03\033\uff03\035\uff03" +
    "\037\uff03\040\uff03\043\uff03\044\uff03\054\uff03\055\uff03\056" +
    "\uff03\057\uff03\060\uff03\061\uff03\062\uff03\063\uff03\064\uff03" +
    "\065\uff03\066\uff03\067\uff03\070\uff03\071\uff03\072\uff03\073" +
    "\uff03\074\uff03\075\uff03\077\uff03\100\uff03\102\uff03\103\uff03" +
    "\104\uff03\105\uff03\106\uff03\107\uff03\110\uff03\111\uff03\112" +
    "\uff03\114\uff03\115\uff03\116\uff03\117\uff03\120\uff03\121\uff03" +
    "\122\uff03\123\uff03\124\uff03\125\uff03\126\uff03\127\uff03\130" +
    "\uff03\132\uff03\001\002\000\144\014\uff1f\015\uff1f\017\uff1f" +
    "\027\uff1f\033\uff1f\035\uff1f\037\uff1f\040\uff1f\043\uff1f\044" +
    "\uff1f\055\uff1f\057\uff1f\060\uff1f\061\uff1f\062\uff1f\063\uff1f" +
    "\064\uff1f\065\uff1f\066\uff1f\067\uff1f\070\uff1f\071\uff1f\072" +
    "\uff1f\073\uff1f\075\uff1f\077\uff1f\100\uff1f\102\uff1f\103\uff1f" +
    "\104\uff1f\105\uff1f\106\uff1f\107\uff1f\110\uff1f\111\uff1f\112" +
    "\uff1f\115\uff1f\116\uff1f\117\uff1f\120\uff1f\121\uff1f\122\uff1f" +
    "\123\uff1f\124\uff1f\125\uff1f\126\uff1f\127\uff1f\130\uff1f\132" +
    "\uff1f\001\002\000\156\006\uff0d\014\uff0d\015\uff0d\017\uff0d" +
    "\027\uff0d\033\uff0d\035\uff0d\037\uff0d\040\uff0d\043\uff0d\044" +
    "\uff0d\054\uff0d\055\uff0d\056\uff0d\057\uff0d\060\uff0d\061\uff0d" +
    "\062\uff0d\063\uff0d\064\uff0d\065\uff0d\066\uff0d\067\uff0d\070" +
    "\uff0d\071\uff0d\072\uff0d\073\uff0d\074\uff0d\075\uff0d\077\uff0d" +
    "\100\uff0d\102\uff0d\103\uff0d\104\uff0d\105\uff0d\106\uff0d\107" +
    "\uff0d\110\uff0d\111\uff0d\112\uff0d\114\uff0d\115\uff0d\116\uff0d" +
    "\117\uff0d\120\uff0d\121\uff0d\122\uff0d\123\uff0d\124\uff0d\125" +
    "\uff0d\126\uff0d\127\uff0d\130\uff0d\132\uff0d\001\002\000\010" +
    "\054\u01cd\074\306\132\u01ce\001\002\000\042\005\051\006" +
    "\122\007\033\010\054\011\064\012\024\013\127\043\034" +
    "\054\061\055\u01d0\056\121\063\056\064\103\065\u013b\076" +
    "\026\114\u013d\001\002\000\012\017\ufff8\022\ufff8\024\ufff8" +
    "\102\ufff8\001\002\000\004\055\u01d2\001\002\000\004\132" +
    "\u01d1\001\002\000\012\017\ufff9\022\ufff9\024\ufff9\102\ufff9" +
    "\001\002\000\004\132\u01d3\001\002\000\012\017\ufffa\022" +
    "\ufffa\024\ufffa\102\ufffa\001\002\000\070\005\051\006\122" +
    "\007\033\010\054\011\064\012\024\013\127\016\111\021" +
    "\073\023\107\025\031\033\011\034\117\036\100\042\023" +
    "\043\034\045\025\046\022\047\067\053\032\054\061\056" +
    "\121\063\056\064\103\065\066\076\026\132\u01d6\001\002" +
    "\000\126\002\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011" +
    "\uffca\012\uffca\013\uffca\016\uffca\017\uffca\021\uffca\022\uffca" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\042\uffca" +
    "\043\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052" +
    "\uffca\053\uffca\054\uffca\056\uffca\063\uffca\064\uffca\065\uffca" +
    "\076\uffca\102\uffca\132\uffca\134\uffca\001\002\000\126\002" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb" +
    "\013\uffcb\016\uffcb\017\uffcb\021\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\036\uffcb\042\uffcb\043\uffcb\045" +
    "\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb" +
    "\054\uffcb\056\uffcb\063\uffcb\064\uffcb\065\uffcb\076\uffcb\102" +
    "\uffcb\132\uffcb\134\uffcb\001\002\000\006\062\uffc7\132\uffc7" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01d5\000\144\002\101\003\045\004\051\005\047\006" +
    "\067\007\020\011\113\027\011\030\123\031\003\032\122" +
    "\033\027\037\073\040\103\042\075\043\041\044\014\045" +
    "\125\046\111\047\042\050\112\051\015\052\037\053\117" +
    "\054\105\065\026\066\057\067\006\070\056\071\074\072" +
    "\044\074\043\075\100\076\115\100\052\101\062\106\071" +
    "\112\076\113\124\114\040\115\054\117\104\120\013\127" +
    "\012\130\007\131\035\132\005\153\036\164\114\001\001" +
    "\000\002\001\001\000\004\064\u01cb\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\135\u01b1\001\001\000\010" +
    "\055\u019d\056\u0199\064\u019a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\u0197\075\u0198\100" +
    "\u0196\101\062\001\001\000\002\001\001\000\026\106\u0193" +
    "\112\076\113\124\114\040\115\054\120\013\127\012\130" +
    "\007\131\035\132\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\106\u0180\112\076\113" +
    "\124\114\040\115\054\117\u017e\120\013\127\012\130\007" +
    "\131\035\132\005\146\u017a\147\u017c\150\u0179\151\u017b\152" +
    "\u017f\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\117\202\120\200\127\012\130\007\131\035\132\005\142" +
    "\u0175\143\201\001\001\000\034\106\350\112\076\113\124" +
    "\114\040\115\054\120\013\127\012\130\007\131\035\132" +
    "\005\144\u0172\145\347\165\u0173\001\001\000\002\001\001" +
    "\000\020\114\u0170\115\054\120\013\127\012\130\007\131" +
    "\035\132\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\140\004\u014c\005\047\006\067\007\020\011" +
    "\113\027\011\030\123\031\003\032\122\033\027\037\073" +
    "\040\103\042\075\043\041\044\014\045\125\046\111\047" +
    "\042\050\112\051\015\052\037\053\117\054\105\065\026" +
    "\066\057\067\006\070\056\071\074\072\044\074\043\075" +
    "\100\076\115\100\052\101\062\106\071\112\076\113\124" +
    "\114\040\115\054\117\104\120\013\127\012\130\007\131" +
    "\035\132\005\153\036\164\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\116\u012a\001\001" +
    "\000\014\126\u0127\127\270\130\007\131\035\132\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\106\172" +
    "\112\076\113\124\114\040\115\054\117\171\120\013\127" +
    "\012\130\007\131\035\132\005\133\u0120\134\170\164\u0122" +
    "\001\001\000\026\106\u011a\112\076\113\124\114\040\115" +
    "\054\120\013\127\012\130\007\131\035\132\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\117\202\120" +
    "\200\127\012\130\007\131\035\132\005\142\u010e\143\201" +
    "\001\001\000\014\120\u010d\127\012\130\007\131\035\132" +
    "\005\001\001\000\032\106\350\112\076\113\124\114\040" +
    "\115\054\120\013\127\012\130\007\131\035\132\005\144" +
    "\u010c\145\347\001\001\000\012\005\u0107\010\u0106\011\u0108" +
    "\153\u010a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\034\326\035\321\036\317\041\314" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\060\301\063\277\064\276\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\126\272\127\270\130" +
    "\007\131\035\132\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\106" +
    "\232\112\076\113\124\114\040\115\054\120\013\127\012" +
    "\130\007\131\035\132\005\001\001\000\026\106\227\112" +
    "\076\113\124\114\040\115\054\120\013\127\012\130\007" +
    "\131\035\132\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\106\172\112" +
    "\076\113\124\114\040\115\054\117\171\120\013\127\012" +
    "\130\007\131\035\132\005\133\166\134\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\102" +
    "\131\106\130\112\076\113\124\114\040\115\054\120\013" +
    "\127\012\130\007\131\035\132\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\120\133\127\012\130\007" +
    "\131\035\132\005\001\001\000\002\001\001\000\014\120" +
    "\163\127\012\130\007\131\035\132\005\001\001\000\014" +
    "\120\162\127\012\130\007\131\035\132\005\001\001\000" +
    "\014\120\161\127\012\130\007\131\035\132\005\001\001" +
    "\000\014\120\160\127\012\130\007\131\035\132\005\001" +
    "\001\000\014\120\157\127\012\130\007\131\035\132\005" +
    "\001\001\000\014\120\156\127\012\130\007\131\035\132" +
    "\005\001\001\000\014\120\155\127\012\130\007\131\035" +
    "\132\005\001\001\000\014\120\154\127\012\130\007\131" +
    "\035\132\005\001\001\000\014\120\153\127\012\130\007" +
    "\131\035\132\005\001\001\000\014\120\152\127\012\130" +
    "\007\131\035\132\005\001\001\000\014\120\151\127\012" +
    "\130\007\131\035\132\005\001\001\000\014\120\150\127" +
    "\012\130\007\131\035\132\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\114\165\115\054\120\013" +
    "\127\012\130\007\131\035\132\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\161\221\001\001\000\004\161\173\001\001\000" +
    "\002\001\001\000\004\160\176\001\001\000\022\117\202" +
    "\120\200\127\012\130\007\131\035\132\005\142\177\143" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\117" +
    "\205\120\204\127\012\130\007\131\035\132\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\112\207\113" +
    "\124\114\040\115\054\120\013\127\012\130\007\131\035" +
    "\132\005\001\001\000\010\157\210\161\211\162\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\107\217\112\216\113\124\114\040\115\054\120" +
    "\013\127\012\130\007\131\035\132\005\001\001\000\022" +
    "\113\215\114\040\115\054\120\013\127\012\130\007\131" +
    "\035\132\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\157\220\161\211\162\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\106\224\112\076\113\124" +
    "\114\040\115\054\117\223\120\013\127\012\130\007\131" +
    "\035\132\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\106\231\112\076\113\124\114\040\115\054\120\013" +
    "\127\012\130\007\131\035\132\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\104\030\236\031\003\032\122" +
    "\033\027\037\073\040\103\042\075\043\041\044\014\045" +
    "\125\046\111\047\042\050\112\051\015\052\037\053\117" +
    "\054\105\065\026\066\057\067\006\104\234\106\071\112" +
    "\076\113\124\114\040\115\054\117\104\120\013\127\012" +
    "\130\007\131\035\132\005\164\114\001\001\000\004\073" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\140" +
    "\005\047\006\067\007\020\011\113\027\240\030\123\031" +
    "\003\032\122\033\027\037\073\040\103\042\075\043\041" +
    "\044\014\045\125\046\111\047\042\050\112\051\015\052" +
    "\037\053\117\054\105\065\026\066\057\067\006\070\056" +
    "\071\074\072\044\074\043\075\100\076\115\100\052\101" +
    "\062\105\242\106\071\112\076\113\124\114\040\115\054" +
    "\117\104\120\013\127\012\130\007\131\035\132\005\153" +
    "\036\164\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\136\005\047\006\067\007\020\011\113\027\243\030" +
    "\123\031\003\032\122\033\027\037\073\040\103\042\075" +
    "\043\041\044\014\045\125\046\111\047\042\050\112\051" +
    "\015\052\037\053\117\054\105\065\026\066\057\067\006" +
    "\070\056\071\074\072\044\074\043\075\100\076\115\100" +
    "\052\101\062\106\071\112\076\113\124\114\040\115\054" +
    "\117\104\120\013\127\012\130\007\131\035\132\005\153" +
    "\036\164\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\106\257\112\076\113\124\114" +
    "\040\115\054\120\013\127\012\130\007\131\035\132\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\106" +
    "\252\112\076\113\124\114\040\115\054\120\013\127\012" +
    "\130\007\131\035\132\005\001\001\000\002\001\001\000" +
    "\104\030\236\031\003\032\122\033\027\037\073\040\103" +
    "\042\075\043\041\044\014\045\125\046\111\047\042\050" +
    "\112\051\015\052\037\053\117\054\105\065\026\066\057" +
    "\067\006\104\254\106\071\112\076\113\124\114\040\115" +
    "\054\117\104\120\013\127\012\130\007\131\035\132\005" +
    "\164\114\001\001\000\002\001\001\000\104\030\236\031" +
    "\003\032\122\033\027\037\073\040\103\042\075\043\041" +
    "\044\014\045\125\046\111\047\042\050\112\051\015\052" +
    "\037\053\117\054\105\065\026\066\057\067\006\104\256" +
    "\106\071\112\076\113\124\114\040\115\054\117\104\120" +
    "\013\127\012\130\007\131\035\132\005\164\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\104\030\236\031" +
    "\003\032\122\033\027\037\073\040\103\042\075\043\041" +
    "\044\014\045\125\046\111\047\042\050\112\051\015\052" +
    "\037\053\117\054\105\065\026\066\057\067\006\104\261" +
    "\106\071\112\076\113\124\114\040\115\054\117\104\120" +
    "\013\127\012\130\007\131\035\132\005\164\114\001\001" +
    "\000\002\001\001\000\104\030\236\031\003\032\122\033" +
    "\027\037\073\040\103\042\075\043\041\044\014\045\125" +
    "\046\111\047\042\050\112\051\015\052\037\053\117\054" +
    "\105\065\026\066\057\067\006\104\263\106\071\112\076" +
    "\113\124\114\040\115\054\117\104\120\013\127\012\130" +
    "\007\131\035\132\005\164\114\001\001\000\002\001\001" +
    "\000\030\106\266\112\076\113\124\114\040\115\054\117" +
    "\265\120\013\127\012\130\007\131\035\132\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\126\274\127" +
    "\270\130\007\131\035\132\005\001\001\000\002\001\001" +
    "\000\014\126\273\127\270\130\007\131\035\132\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\060\303\064\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\112\311" +
    "\113\124\114\040\115\054\120\013\127\012\130\007\131" +
    "\035\132\005\001\001\000\002\001\001\000\026\106\313" +
    "\112\076\113\124\114\040\115\054\120\013\127\012\130" +
    "\007\131\035\132\005\001\001\000\002\001\001\000\034" +
    "\106\350\112\076\113\124\114\040\115\054\120\013\127" +
    "\012\130\007\131\035\132\005\144\352\145\347\164\351" +
    "\001\001\000\002\001\001\000\036\037\345\040\103\106" +
    "\071\112\076\113\124\114\040\115\054\117\104\120\013" +
    "\127\012\130\007\131\035\132\005\164\346\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\106\337\112\076\113\124\114\040\115" +
    "\054\120\013\127\012\130\007\131\035\132\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\106\341" +
    "\112\076\113\124\114\040\115\054\120\013\127\012\130" +
    "\007\131\035\132\005\001\001\000\002\001\001\000\036" +
    "\037\343\040\103\106\071\112\076\113\124\114\040\115" +
    "\054\117\104\120\013\127\012\130\007\131\035\132\005" +
    "\164\344\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\106" +
    "\354\112\076\113\124\114\040\115\054\120\013\127\012" +
    "\130\007\131\035\132\005\001\001\000\002\001\001\000" +
    "\104\030\236\031\003\032\122\033\027\037\073\040\103" +
    "\042\075\043\041\044\014\045\125\046\111\047\042\050" +
    "\112\051\015\052\037\053\117\054\105\065\026\066\057" +
    "\067\006\104\356\106\071\112\076\113\124\114\040\115" +
    "\054\117\104\120\013\127\012\130\007\131\035\132\005" +
    "\164\114\001\001\000\006\077\362\103\361\001\001\000" +
    "\002\001\001\000\026\106\u0101\112\076\113\124\114\040" +
    "\115\054\120\013\127\012\130\007\131\035\132\005\001" +
    "\001\000\002\001\001\000\004\103\365\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\104\030" +
    "\236\031\003\032\122\033\027\037\073\040\103\042\075" +
    "\043\041\044\014\045\125\046\111\047\042\050\112\051" +
    "\015\052\037\053\117\054\105\065\026\066\057\067\006" +
    "\104\367\106\071\112\076\113\124\114\040\115\054\117" +
    "\104\120\013\127\012\130\007\131\035\132\005\164\114" +
    "\001\001\000\002\001\001\000\104\030\236\031\003\032" +
    "\122\033\027\037\073\040\103\042\075\043\041\044\014" +
    "\045\125\046\111\047\042\050\112\051\015\052\037\053" +
    "\117\054\105\065\026\066\057\067\006\104\371\106\071" +
    "\112\076\113\124\114\040\115\054\117\104\120\013\127" +
    "\012\130\007\131\035\132\005\164\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\104\030\236\031\003\032" +
    "\122\033\027\037\073\040\103\042\075\043\041\044\014" +
    "\045\125\046\111\047\042\050\112\051\015\052\037\053" +
    "\117\054\105\065\026\066\057\067\006\104\374\106\071" +
    "\112\076\113\124\114\040\115\054\117\104\120\013\127" +
    "\012\130\007\131\035\132\005\164\114\001\001\000\002" +
    "\001\001\000\104\030\236\031\003\032\122\033\027\037" +
    "\073\040\103\042\075\043\041\044\014\045\125\046\111" +
    "\047\042\050\112\051\015\052\037\053\117\054\105\065" +
    "\026\066\057\067\006\104\376\106\071\112\076\113\124" +
    "\114\040\115\054\117\104\120\013\127\012\130\007\131" +
    "\035\132\005\164\114\001\001\000\002\001\001\000\104" +
    "\030\236\031\003\032\122\033\027\037\073\040\103\042" +
    "\075\043\041\044\014\045\125\046\111\047\042\050\112" +
    "\051\015\052\037\053\117\054\105\065\026\066\057\067" +
    "\006\104\u0100\106\071\112\076\113\124\114\040\115\054" +
    "\117\104\120\013\127\012\130\007\131\035\132\005\164" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\104\030\236\031\003\032" +
    "\122\033\027\037\073\040\103\042\075\043\041\044\014" +
    "\045\125\046\111\047\042\050\112\051\015\052\037\053" +
    "\117\054\105\065\026\066\057\067\006\104\u0105\106\071" +
    "\112\076\113\124\114\040\115\054\117\104\120\013\127" +
    "\012\130\007\131\035\132\005\164\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\u010b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\106\350\112\076\113\124\114\040\115\054" +
    "\120\013\127\012\130\007\131\035\132\005\144\u0110\145" +
    "\347\001\001\000\002\001\001\000\104\030\236\031\003" +
    "\032\122\033\027\037\073\040\103\042\075\043\041\044" +
    "\014\045\125\046\111\047\042\050\112\051\015\052\037" +
    "\053\117\054\105\065\026\066\057\067\006\104\u0112\106" +
    "\071\112\076\113\124\114\040\115\054\117\104\120\013" +
    "\127\012\130\007\131\035\132\005\164\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\104\030\236\031\003" +
    "\032\122\033\027\037\073\040\103\042\075\043\041\044" +
    "\014\045\125\046\111\047\042\050\112\051\015\052\037" +
    "\053\117\054\105\065\026\066\057\067\006\104\u0115\106" +
    "\071\112\076\113\124\114\040\115\054\117\104\120\013" +
    "\127\012\130\007\131\035\132\005\164\114\001\001\000" +
    "\002\001\001\000\030\102\u0119\106\130\112\076\113\124" +
    "\114\040\115\054\120\013\127\012\130\007\131\035\132" +
    "\005\001\001\000\104\030\236\031\003\032\122\033\027" +
    "\037\073\040\103\042\075\043\041\044\014\045\125\046" +
    "\111\047\042\050\112\051\015\052\037\053\117\054\105" +
    "\065\026\066\057\067\006\104\u0118\106\071\112\076\113" +
    "\124\114\040\115\054\117\104\120\013\127\012\130\007" +
    "\131\035\132\005\164\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\104\030\236\031\003" +
    "\032\122\033\027\037\073\040\103\042\075\043\041\044" +
    "\014\045\125\046\111\047\042\050\112\051\015\052\037" +
    "\053\117\054\105\065\026\066\057\067\006\104\u011c\106" +
    "\071\112\076\113\124\114\040\115\054\117\104\120\013" +
    "\127\012\130\007\131\035\132\005\164\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\104\030\236\031\003" +
    "\032\122\033\027\037\073\040\103\042\075\043\041\044" +
    "\014\045\125\046\111\047\042\050\112\051\015\052\037" +
    "\053\117\054\105\065\026\066\057\067\006\104\u011f\106" +
    "\071\112\076\113\124\114\040\115\054\117\104\120\013" +
    "\127\012\130\007\131\035\132\005\164\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\120\u0134\127\012\130\007\131" +
    "\035\132\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\106" +
    "\u013e\112\076\113\124\114\040\115\054\120\013\127\012" +
    "\130\007\131\035\132\005\154\u0139\155\u013d\156\u013b\001" +
    "\001\000\104\030\236\031\003\032\122\033\027\037\073" +
    "\040\103\042\075\043\041\044\014\045\125\046\111\047" +
    "\042\050\112\051\015\052\037\053\117\054\105\065\026" +
    "\066\057\067\006\104\u0138\106\071\112\076\113\124\114" +
    "\040\115\054\117\104\120\013\127\012\130\007\131\035" +
    "\132\005\164\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\106\u0148\112\076\113\124\114\040\115\054" +
    "\120\013\127\012\130\007\131\035\132\005\001\001\000" +
    "\002\001\001\000\026\106\u0147\112\076\113\124\114\040" +
    "\115\054\120\013\127\012\130\007\131\035\132\005\001" +
    "\001\000\002\001\001\000\004\161\u0142\001\001\000\002" +
    "\001\001\000\104\030\236\031\003\032\122\033\027\037" +
    "\073\040\103\042\075\043\041\044\014\045\125\046\111" +
    "\047\042\050\112\051\015\052\037\053\117\054\105\065" +
    "\026\066\057\067\006\104\u0141\106\071\112\076\113\124" +
    "\114\040\115\054\117\104\120\013\127\012\130\007\131" +
    "\035\132\005\164\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\106\u0144\112\076\113\124\114\040\115" +
    "\054\120\013\127\012\130\007\131\035\132\005\001\001" +
    "\000\002\001\001\000\030\106\u013e\112\076\113\124\114" +
    "\040\115\054\120\013\127\012\130\007\131\035\132\005" +
    "\156\u0146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\104\030\236\031\003" +
    "\032\122\033\027\037\073\040\103\042\075\043\041\044" +
    "\014\045\125\046\111\047\042\050\112\051\015\052\037" +
    "\053\117\054\105\065\026\066\057\067\006\104\u014b\106" +
    "\071\112\076\113\124\114\040\115\054\117\104\120\013" +
    "\127\012\130\007\131\035\132\005\164\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u014f\001\001" +
    "\000\016\013\u015c\014\u0156\015\u0157\016\u0158\017\u015a\020" +
    "\u015d\001\001\000\002\001\001\000\026\106\u0153\112\076" +
    "\113\124\114\040\115\054\120\013\127\012\130\007\131" +
    "\035\132\005\001\001\000\104\030\236\031\003\032\122" +
    "\033\027\037\073\040\103\042\075\043\041\044\014\045" +
    "\125\046\111\047\042\050\112\051\015\052\037\053\117" +
    "\054\105\065\026\066\057\067\006\104\u0152\106\071\112" +
    "\076\113\124\114\040\115\054\117\104\120\013\127\012" +
    "\130\007\131\035\132\005\164\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\104\030\236\031\003\032\122" +
    "\033\027\037\073\040\103\042\075\043\041\044\014\045" +
    "\125\046\111\047\042\050\112\051\015\052\037\053\117" +
    "\054\105\065\026\066\057\067\006\104\u0155\106\071\112" +
    "\076\113\124\114\040\115\054\117\104\120\013\127\012" +
    "\130\007\131\035\132\005\164\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u0166\001\001\000\002\001\001\000\004\020" +
    "\u0165\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\106\u0161\112\076\113" +
    "\124\114\040\115\054\120\013\127\012\130\007\131\035" +
    "\132\005\001\001\000\002\001\001\000\026\106\u0163\112" +
    "\076\113\124\114\040\115\054\120\013\127\012\130\007" +
    "\131\035\132\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\u0169\017\u016a\020\u015d\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\u016c\017\u016d\020\u015d" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\u016f\017\u016a\020\u015d\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\106\u0174\112\076\113\124\114\040\115" +
    "\054\120\013\127\012\130\007\131\035\132\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\120\u0189\127\012\130\007" +
    "\131\035\132\005\001\001\000\004\161\u0188\001\001\000" +
    "\002\001\001\000\004\161\u0181\001\001\000\002\001\001" +
    "\000\026\106\u0183\112\076\113\124\114\040\115\054\120" +
    "\013\127\012\130\007\131\035\132\005\001\001\000\004" +
    "\161\u0184\001\001\000\002\001\001\000\030\106\u0187\112" +
    "\076\113\124\114\040\115\054\117\u0186\120\013\127\012" +
    "\130\007\131\035\132\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\161\u018a\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\106\u018e\112" +
    "\076\113\124\114\040\115\054\120\013\127\012\130\007" +
    "\131\035\132\005\001\001\000\014\120\u0191\127\012\130" +
    "\007\131\035\132\005\001\001\000\002\001\001\000\026" +
    "\106\u0190\112\076\113\124\114\040\115\054\120\013\127" +
    "\012\130\007\131\035\132\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\106\u0195\112\076\113\124\114\040\115\054\120\013" +
    "\127\012\130\007\131\035\132\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\064\u01ac\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\057\u01a1" +
    "\061\u01a4\062\u01a0\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\057\u01a1\061\u01a9\062\u01a0" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\u01a6\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\126\u01c9\127\270\130\007\131\035\132\005\001" +
    "\001\000\034\106\u013e\112\076\113\124\114\040\115\054" +
    "\120\013\127\012\130\007\131\035\132\005\154\u01c6\155" +
    "\u013d\156\u013b\001\001\000\002\001\001\000\034\106\u01b8" +
    "\112\076\113\124\114\040\115\054\120\013\127\012\130" +
    "\007\131\035\132\005\136\u01b9\137\u01b6\140\u01b7\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\106\u01c4\112" +
    "\076\113\124\114\040\115\054\120\013\127\012\130\007" +
    "\131\035\132\005\141\u01c3\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\106\u01be\112\076\113\124\114\040\115" +
    "\054\120\013\127\012\130\007\131\035\132\005\141\u01bd" +
    "\001\001\000\026\106\u01c0\112\076\113\124\114\040\115" +
    "\054\120\013\127\012\130\007\131\035\132\005\001\001" +
    "\000\002\001\001\000\004\141\u01bf\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\106\u01b8\112\076\113\124" +
    "\114\040\115\054\120\013\127\012\130\007\131\035\132" +
    "\005\140\u01c2\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\141\u01c5\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\106\u013e\112" +
    "\076\113\124\114\040\115\054\120\013\127\012\130\007" +
    "\131\035\132\005\154\u01ce\155\u013d\156\u013b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\076\032" +
    "\u01d6\033\027\037\073\040\103\042\075\043\041\044\014" +
    "\045\125\046\111\047\042\050\112\051\015\052\037\053" +
    "\117\054\105\065\026\066\057\067\006\106\071\112\076" +
    "\113\124\114\040\115\054\117\104\120\013\127\012\130" +
    "\007\131\035\132\005\164\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public boolean DEBUG = false;

    public void printTree(Node<String> node, int depth) {
        for (int i = 0; i < depth; ++i)
            if (i == depth - 1)
                System.out.print("|-");//\u22A2');
            else
                System.out.print(' ');
        System.out.println(node.getData());
        List<Node<String>> kids = node.getChilds();
        for (Node<String> kid : kids) {
            printTree(kid, depth + 1);
        }
    }

    public void syntax_error(Symbol cur_token) {
        System.err.println("Syntax error at " + cur_token);
        report_error("Syntax error", cur_token);
    }

    public void Debuglog(String s) {
        if (DEBUG)
            System.out.println(s);
    }

    public Node<String> makeNode(String s, Object... arr) {
        Node<String> List = new Node<String>(s);
        for (Object a: arr) {
            Node<String> tmp = (Node<String>) a;
            List.appendChild(tmp);
        }
        return List;
    }

    public Node<String> makeName(Object name) {
        if (name instanceof String)
            return new Node<String>((String)name);
        Symbol tmp = (Symbol) name;
        return new Node<String>(tmp.toString());
    }

    public Node<String> makeOp(String s) {
        if (s instanceof String)
            return new Node<String>((String)s);
        return new Node<String>("#" + s);
    }

    public Node<String> makeOp(Object op) {
        if (op == null) {
            return new Node<String>("#null at makeOp(Object op)");
        }
        if (DEBUG)
            System.err.println("makeOp: " + op.getClass());
        Symbol tmp = (Symbol) op;
        return new Node<String>("#" + tmp.toString());
    }

    public Node<String> makeNumber(Object nb) {
        if (nb instanceof String)
            return new Node<String>((String)nb);
        Symbol tmp = (Symbol) nb;
        return new Node<String>(tmp.toString());
    }

    public Node<String> makeKeyword(Object kw) {
        if (kw instanceof String)
            return new Node<String>((String)kw);
        Symbol tmp = (Symbol) kw;
        return new Node<String>(tmp.toString());
    }

    public Node<String> makeString(Object s) {
        if (s instanceof String)
            return new Node<String>((String)s);
        //TODO: string
        return new Node<String>("stirng_td");
    }

    public static void main(String args[]) {
        try {
            Lexer lexer = new Lexer(new FileReader(args[0]));
            
            Parser p = new Parser(lexer);
            System.out.println("Parser init\n");

            p.parse();
//            p.debug_parse();

            System.out.println("Finish\n");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public void copyChild(Node<String> a, Node<String> b) {
        List<Node<String>> kids = b.getChilds();
        for (int i = 0; i < kids.size(); ++i) {
            a.appendChild(kids.get(i));
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= file_input 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        printTree(list, 0);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // file_input ::= 
            {
              Node<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file_input",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // file_input ::= file_input file_input_unit 
            {
              Node<String> RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> fi = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fiuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fiuright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> fiu = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        Debuglog("Debug: 1");
        Node<String> List = fi;

        if (fiu != null) {
            List.appendChild(fiu);
        }
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file_input",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // file_input ::= file_input_unit 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        Debuglog("Debug: 2"); 
        Node<String> List = new Node<String>("file_input");
        List.appendChild(a);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file_input",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // file_input_unit ::= NEWLINE 
            {
              Node<String> RESULT =null;
		 RESULT = makeNode("NEWLINE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file_input_unit",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // file_input_unit ::= stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file_input_unit",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decorator ::= AT dotted_name LPAR arglist RPAR NEWLINE 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = makeNode("decorator", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decorator",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decorator ::= AT dotted_name LPAR RPAR NEWLINE 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = makeNode("decorator", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decorator",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decorator ::= AT dotted_name NEWLINE 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = makeNode("decorator", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decorator",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decorators ::= decorator 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("decorators", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decorators",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decorators ::= decorators decorator 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decorators",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decorated ::= decorators classdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("decorated_class", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decorated",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decorated ::= decorators funcdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("decorated_class", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decorated",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decorated ::= decorators async_funcdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("decorated_class", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decorated",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // async_funcdef ::= ASYNC funcdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("async_funcdef", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("async_funcdef",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funcdef ::= DEF NAME parameters RARROW test COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> d = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("funcdef", makeName(a), b, c, d);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdef",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcdef ::= DEF NAME parameters COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("funcdef", makeName(a), b, c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdef",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parameters ::= LPAR typedargslist RPAR 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = makeNode("parameters", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parameters ::= LPAR RPAR 
            {
              Node<String> RESULT =null;
		RESULT = makeNode("parameters");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // typedargslist ::= nonstartypedargslist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("typedargslist", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedargslist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // typedargslist ::= nonstartypedargslist COMMA startypedargslist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("typedargslist", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedargslist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // typedargslist ::= nonstartypedargslist COMMA startypedargslist COMMA doublestartypedargslist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("typedargslist", a, b, c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedargslist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // typedargslist ::= startypedargslist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("typedargslist", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedargslist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // typedargslist ::= startypedargslist COMMA doublestartypedargslist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("typedargslist", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedargslist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // typedargslist ::= doublestartypedargslist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("typedargslist", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedargslist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // nonstartypedargslist ::= probinittfpdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("nonstartypedargslist", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonstartypedargslist",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // nonstartypedargslist ::= nonstartypedargslist COMMA probinittfpdef 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonstartypedargslist",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // startypedargslist ::= STAR 
            {
              Node<String> RESULT =null;
		RESULT = makeNode("startypedargslist");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("startypedargslist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // startypedargslist ::= STAR tfpdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("startypedargslist", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("startypedargslist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // startypedargslist ::= startypedargslist COMMA probinittfpdef 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("startypedargslist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // doublestartypedargslist ::= DOUBLESTAR tfpdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("doublestartypedargslist", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("doublestartypedargslist",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // doublestartypedargslist ::= DOUBLESTAR tfpdef COMMA 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = makeNode("doublestartypedargslist", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("doublestartypedargslist",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // probinittfpdef ::= tfpdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("probinittfpdef", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("probinittfpdef",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // probinittfpdef ::= tfpdef EQUAL test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("probinittfpdef_=", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("probinittfpdef",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tfpdef ::= NAME COLON test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("tfpdef", makeName(a), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tfpdef",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tfpdef ::= NAME 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("tfpdef", makeName(a));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tfpdef",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // varargslist ::= nonstarvarargslist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("varargslist", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varargslist",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // varargslist ::= nonstarvarargslist COMMA starvarargslist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("varargslist", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varargslist",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // varargslist ::= nonstarvarargslist COMMA starvarargslist COMMA doublestarvarargslist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("varargslist", a, b, c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varargslist",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // varargslist ::= starvarargslist COMMA doublestarvarargslist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("varargslist", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varargslist",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // varargslist ::= doublestarvarargslist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("varargslist", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varargslist",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // nonstarvarargslist ::= probinitvfpdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("nonstarvarargslist", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonstarvarargslist",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // nonstarvarargslist ::= nonstarvarargslist COMMA probinitvfpdef 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonstarvarargslist",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // starvarargslist ::= STAR 
            {
              Node<String> RESULT =null;
		RESULT = makeNode("starvarargslist");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("starvarargslist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // starvarargslist ::= STAR vfpdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("starvarargslist", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("starvarargslist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // starvarargslist ::= starvarargslist COMMA probinitvfpdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("starvarargslist", a, b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("starvarargslist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // doublestarvarargslist ::= DOUBLESTAR vfpdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("doublestarvarargslist", a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("doublestarvarargslist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // doublestarvarargslist ::= DOUBLESTAR vfpdef COMMA 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = makeNode("doublestarvarargslist", a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("doublestarvarargslist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // probinitvfpdef ::= vfpdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("probinitvfpdef", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("probinitvfpdef",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // probinitvfpdef ::= vfpdef EQUAL test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("probinitvfpdef", a, b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("probinitvfpdef",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // vfpdef ::= NAME 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeName(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vfpdef",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmt ::= simple_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmt ::= compound_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // simple_stmt ::= small_stmts SEMI NEWLINE 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // simple_stmt ::= small_stmts NEWLINE 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // simple_stmt ::= NEWLINE 
            {
              Node<String> RESULT =null;
		RESULT = makeNode("NEWLINE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // small_stmts ::= small_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        Node<String> List = new Node<String>("small_stmts"); 
        if (a != null)
            List.appendChild(a);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("small_stmts",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // small_stmts ::= small_stmts SEMI small_stmt 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = list;
        if (a != null)
            List.appendChild(a);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("small_stmts",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // small_stmt ::= expr_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("small_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // small_stmt ::= del_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("small_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // small_stmt ::= pass_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("small_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // small_stmt ::= flow_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("small_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // small_stmt ::= import_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("small_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // small_stmt ::= global_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("small_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // small_stmt ::= nonlocal_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("small_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // small_stmt ::= assert_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("small_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr_stmt ::= testlist_star_expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = new Node<String>("expr_stmt");
        List.appendChild(a);
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr_stmt ::= testlist_star_expr expr_rest_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = new Node<String>("expr_stmt");
        List.appendChild(a);
        List.appendChild(b);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr_rest_stmt ::= annassign 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = new Node<String>("expr_rest_stmt");
        List.appendChild(a);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_rest_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr_rest_stmt ::= augassign yield_expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = new Node<String>("expr_rest_stmt");
        List.appendChild(a);
        List.appendChild(b);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_rest_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr_rest_stmt ::= augassign testlist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = new Node<String>("expr_rest_stmt");
        List.appendChild(a);
        List.appendChild(b);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_rest_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr_rest_stmt ::= expr_equal_rest_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = new Node<String>("expr_rest_stmt");
        List.appendChild(a);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_rest_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr_equal_rest_stmt ::= EQUAL yield_expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = new Node<String>("expr_equal_rest_stmt");
        List.appendChild(a);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_equal_rest_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr_equal_rest_stmt ::= EQUAL testlist_star_expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = new Node<String>("expr_equal_rest_stmt");
        List.appendChild(a);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_equal_rest_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr_equal_rest_stmt ::= expr_equal_rest_stmt EQUAL yield_expr 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = list;
        List.appendChild(a);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_equal_rest_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr_equal_rest_stmt ::= expr_equal_rest_stmt EQUAL testlist_star_expr 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = list;
        List.appendChild(a);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_equal_rest_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // annassign ::= COLON test EQUAL test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = new Node<String>("annassign");
        List.appendChild(a);
        List.appendChild(b);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("annassign",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // annassign ::= COLON test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = new Node<String>("annassign");
        List.appendChild(a);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("annassign",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // testlist_star_expr ::= testlist_star_expr_sub 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = new Node<String>("testlist_star_expr");
        parser.copyChild(List, list);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_star_expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // testlist_star_expr ::= testlist_star_expr_sub COMMA 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        Node<String> List = new Node<String>("testlist_star_expr");
        parser.copyChild(List, list);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_star_expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // testlist_star_expr_sub ::= test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = new Node<String>("testlist_star_expr_sub");
        List.appendChild(a);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_star_expr_sub",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // testlist_star_expr_sub ::= star_expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = new Node<String>("testlist_star_expr_sub");
        List.appendChild(a);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_star_expr_sub",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // testlist_star_expr_sub ::= testlist_star_expr_sub COMMA test 
            {
              Node<String> RESULT =null;
		int Listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int Listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> List = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        List.appendChild(a);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_star_expr_sub",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // testlist_star_expr_sub ::= testlist_star_expr_sub COMMA star_expr 
            {
              Node<String> RESULT =null;
		int Listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int Listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> List = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        List.appendChild(a);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_star_expr_sub",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // augassign ::= PLUSEQUAL 
            {
              Node<String> RESULT =null;
		 RESULT = new Node<String>("PLUSEQUAL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("augassign",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // augassign ::= MINEQUAL 
            {
              Node<String> RESULT =null;
		 RESULT = new Node<String>("MINEQUAL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("augassign",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // augassign ::= STAREQUAL 
            {
              Node<String> RESULT =null;
		 RESULT = new Node<String>("STAREQUAL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("augassign",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // augassign ::= ATEQUAL 
            {
              Node<String> RESULT =null;
		 RESULT = new Node<String>("ATEQUAL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("augassign",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // augassign ::= SLASHEQUAL 
            {
              Node<String> RESULT =null;
		 RESULT = new Node<String>("SLASHEQUAL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("augassign",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // augassign ::= PERCENTEQUAL 
            {
              Node<String> RESULT =null;
		 RESULT = new Node<String>("PERCENTEQUAL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("augassign",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // augassign ::= AMPEREQUAL 
            {
              Node<String> RESULT =null;
		 RESULT = new Node<String>("AMPEREQUAL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("augassign",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // augassign ::= VBAREQUAL 
            {
              Node<String> RESULT =null;
		 RESULT = new Node<String>("VBAREQUAL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("augassign",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // augassign ::= CIRCUMFLEXEQUAL 
            {
              Node<String> RESULT =null;
		 RESULT = new Node<String>("CIRCUMFLEXEQUAL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("augassign",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // augassign ::= LEFTSHIFTEQUAL 
            {
              Node<String> RESULT =null;
		 RESULT = new Node<String>("LEFTSHIFTEQUAL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("augassign",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // augassign ::= RIGHTSHIFTEQUAL 
            {
              Node<String> RESULT =null;
		 RESULT = new Node<String>("RIGHTSHIFTEQUAL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("augassign",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // augassign ::= DOUBLESTAREQUAL 
            {
              Node<String> RESULT =null;
		 RESULT = new Node<String>("DOUBLESTAREQUAL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("augassign",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // augassign ::= DOUBLESLASHEQUAL 
            {
              Node<String> RESULT =null;
		 RESULT = new Node<String>("DOUBLESLASHEQUAL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("augassign",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // del_stmt ::= DEL exprlist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Node<String> List = new Node<String>("del_stmt");
            List.appendChild(a);
            RESULT = List;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("del_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // pass_stmt ::= PASS 
            {
              Node<String> RESULT =null;
		 RESULT = new Node<String>("PASS"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pass_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // flow_stmt ::= break_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // flow_stmt ::= continue_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // flow_stmt ::= return_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // flow_stmt ::= raise_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // flow_stmt ::= yield_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // break_stmt ::= BREAK 
            {
              Node<String> RESULT =null;
		 RESULT = new Node<String>("BREAK"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break_stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // continue_stmt ::= CONTINUE 
            {
              Node<String> RESULT =null;
		 RESULT = new Node<String>("CONTINUE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("continue_stmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // return_stmt ::= RETURN 
            {
              Node<String> RESULT =null;
		 RESULT = new Node<String>("RETURN"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // return_stmt ::= RETURN testlist 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        Node<String> List = new Node<String>("return_stmt");
        List.appendChild(a);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // yield_stmt ::= yield_expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yield_stmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // raise_stmt ::= RAISE 
            {
              Node<String> RESULT =null;
		 RESULT = new Node<String>("RAISE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("raise_stmt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // raise_stmt ::= RAISE test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = new Node<String>("raise_stmt");
        List.appendChild(a);
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("raise_stmt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // raise_stmt ::= RAISE test FROM test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = new Node<String>("raise_stmt");
        List.appendChild(a);
        List.appendChild(b);
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("raise_stmt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // import_stmt ::= import_name 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_stmt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // import_stmt ::= import_from 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_stmt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // import_name ::= IMPORT dotted_as_names 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = new Node<String>("import_name");
        List.appendChild(a);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_name",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // import_from ::= FROM import_from_name IMPORT STAR 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        Node<String> List = new Node<String>("import_from_star");
        List.appendChild(a);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_from",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // import_from ::= FROM import_from_name IMPORT LPAR import_as_names RPAR 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        Node<String> List = new Node<String>("import_from");
        List.appendChild(a);
        List.appendChild(b);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_from",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // import_from ::= FROM import_from_name IMPORT import_as_names 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List = new Node<String>("import_from");
        List.appendChild(a);
        List.appendChild(b);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_from",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // import_from_name ::= dotted_name 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("import_from_name", a);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_from_name",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // import_from_name ::= import_from_name_dots 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("import_from_name", a);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_from_name",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // import_from_name ::= import_from_name_dots dotted_name 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("import_from_name", a, b);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_from_name",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // import_from_name_dots ::= DOT 
            {
              Node<String> RESULT =null;
		 RESULT = makeNode("import_from_name_dots", makeNode("DOT")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_from_name_dots",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // import_from_name_dots ::= ELLIPSIS 
            {
              Node<String> RESULT =null;
		 RESULT = makeNode("import_from_name_dots", makeNode("ELLIPSIS")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_from_name_dots",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // import_from_name_dots ::= import_from_name_dots DOT 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 a.appendChild(makeNode("DOT")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_from_name_dots",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // import_from_name_dots ::= import_from_name_dots ELLIPSIS 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 a.appendChild(makeNode("ELLIPSIS")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_from_name_dots",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // import_as_name ::= NAME 
            {
              Node<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_as_name",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // import_as_name ::= NAME AS NAME 
            {
              Node<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_as_name",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // dotted_as_name ::= dotted_name 
            {
              Node<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dotted_as_name",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // dotted_as_name ::= dotted_name AS NAME 
            {
              Node<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dotted_as_name",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // import_as_names ::= import_as_names_sub 
            {
              Node<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_as_names",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // import_as_names ::= import_as_names_sub COMMA 
            {
              Node<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_as_names",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // import_as_names_sub ::= import_as_name 
            {
              Node<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_as_names_sub",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // import_as_names_sub ::= import_as_names COMMA import_as_name 
            {
              Node<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_as_names_sub",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // dotted_as_names ::= dotted_as_name 
            {
              Node<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dotted_as_names",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // dotted_as_names ::= dotted_as_names COMMA dotted_as_name 
            {
              Node<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dotted_as_names",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // dotted_name ::= NAME 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("dotted_name", makeName(a));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dotted_name",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // dotted_name ::= dotted_name DOT NAME 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        a.appendChild(makeName(b));
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dotted_name",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // global_stmt ::= GLOBAL NAME 
            {
              Node<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_stmt",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // global_stmt ::= global_stmt COMMA NAME 
            {
              Node<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_stmt",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // nonlocal_stmt ::= NONLOCAL NAME 
            {
              Node<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonlocal_stmt",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // nonlocal_stmt ::= nonlocal_stmt COMMA NAME 
            {
              Node<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonlocal_stmt",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // assert_stmt ::= ASSERT test COMMA test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("assert_stmt", a, b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assert_stmt",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // assert_stmt ::= ASSERT test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("assert_stmt", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assert_stmt",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // compound_stmt ::= if_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // compound_stmt ::= while_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // compound_stmt ::= for_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // compound_stmt ::= try_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // compound_stmt ::= with_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // compound_stmt ::= funcdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // compound_stmt ::= classdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // compound_stmt ::= decorated 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // compound_stmt ::= async_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // async_stmt ::= ASYNC funcdef 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("async_stmt", a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("async_stmt",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // async_stmt ::= ASYNC with_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("async_stmt", a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("async_stmt",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // async_stmt ::= ASYNC for_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("async_stmt", a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("async_stmt",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // if_stmt ::= IF test COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("if_stmt", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // if_stmt ::= IF test COLON suite ELSE COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("if_stmt", a, b, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // if_stmt ::= IF test COLON suite elif_stmts 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("if_stmt", a, b, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // if_stmt ::= IF test COLON suite elif_stmts ELSE COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> d = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("if_stmt", a, b, c, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // elif_stmts ::= ELIF test COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("elif_stmts", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_stmts",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // elif_stmts ::= elif_stmts ELIF test COLON suite 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        list.appendChild(b);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_stmts",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // while_stmt ::= WHILE test COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("while_stmt", a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // while_stmt ::= WHILE test COLON suite ELSE COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("while_stmt", a, b, c);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // for_stmt ::= FOR exprlist IN testlist COLON suite ELSE COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> d = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("for_stmt", a, b, c, d);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // for_stmt ::= FOR exprlist IN testlist COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("for_stmt", a, b, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // try_stmt ::= TRY COLON suite except_stmts 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("try_stmt", a, b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("try_stmt",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // try_stmt ::= TRY COLON suite except_stmts ELSE COLON suite FINALLY COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> d = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("try_stmt_else_finally", a, b, c, d);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("try_stmt",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // try_stmt ::= TRY COLON suite except_stmts ELSE COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("try_stmt_else", a, b, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("try_stmt",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // try_stmt ::= TRY COLON suite except_stmts FINALLY COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("try_stmt_finally", a, b, c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("try_stmt",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // try_stmt ::= TRY COLON suite FINALLY COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("try_stmt_only_finally", a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("try_stmt",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // except_stmts ::= except_clause COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("except_stmts", a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("except_stmts",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // except_stmts ::= except_stmts except_clause COLON suite 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        list.appendChild(b);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("except_stmts",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // with_stmt ::= with_item_stmts COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("with_stmt", a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("with_stmt",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // with_item_stmts ::= WITH with_item 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("with_item_stmts", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("with_item_stmts",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // with_item_stmts ::= with_item_stmts COMMA with_item 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("with_item_stmts",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // with_item ::= test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("with_item", a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("with_item",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // with_item ::= test AS expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("with_item", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("with_item",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // except_clause ::= EXCEPT 
            {
              Node<String> RESULT =null;
		RESULT = makeNode("except_clause");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("except_clause",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // except_clause ::= EXCEPT test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("except_clause", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("except_clause",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // except_clause ::= EXCEPT test AS NAME 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("except_clause", a, makeName(b));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("except_clause",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // suite ::= simple_stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("suite",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // suite ::= NEWLINE INDENT stmts DEDENT 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("suite",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // stmts ::= stmt 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("stmts", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // stmts ::= stmts stmt 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(b);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // test ::= or_test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("test", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // test ::= or_test IF or_test ELSE test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("test", a, b, c);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // test_nocond ::= or_test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_nocond",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // or_test ::= and_test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("or_test",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // or_test ::= or_test OR and_test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List;
        if (a.getData().equals("or_test"))
            List = a;
        else 
            List = makeNode("or_test", a);
        List.appendChild(b);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("or_test",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // and_test ::= not_test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_test",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // and_test ::= and_test AND not_test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List;
        if (a.getData().equals("and_test"))
            List = a;
        else 
            List = makeNode("and_test", a);
        List.appendChild(b);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_test",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // not_test ::= NOT not_test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("not_test", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("not_test",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // not_test ::= comparison 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("not_test",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // comparison ::= expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // comparison ::= comparison comp_op expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node<String> List;
        if (a.getData().equals("comparison"))
            List = a;
        else
            List = makeNode("comparison", a);
        List.appendChild(b);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // comp_op ::= LESS 
            {
              Node<String> RESULT =null;
		RESULT = makeOp("LESS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_op",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // comp_op ::= GREATER 
            {
              Node<String> RESULT =null;
		RESULT = makeOp("GREATER");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_op",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // comp_op ::= EQEQUAL 
            {
              Node<String> RESULT =null;
		RESULT = makeOp("EQEQUAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_op",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // comp_op ::= GREATEREQUAL 
            {
              Node<String> RESULT =null;
		RESULT = makeOp("GREATEREQUAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_op",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // comp_op ::= LESSEQUAL 
            {
              Node<String> RESULT =null;
		RESULT = makeOp("LESSEQUAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_op",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // comp_op ::= NOTEQUAL 
            {
              Node<String> RESULT =null;
		RESULT = makeOp("NOTEQUAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_op",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // comp_op ::= IN 
            {
              Node<String> RESULT =null;
		RESULT = makeOp("IN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_op",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // comp_op ::= NOT IN 
            {
              Node<String> RESULT =null;
		RESULT = makeOp("NOTIN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_op",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // comp_op ::= IS 
            {
              Node<String> RESULT =null;
		RESULT = makeOp("IS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_op",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // comp_op ::= IS NOT 
            {
              Node<String> RESULT =null;
		RESULT = makeOp("ISNOT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_op",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // star_expr ::= STAR expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("star_expr", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("star_expr",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // expr ::= expr VBAR expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a, makeOp("VBAR"), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // expr ::= expr CIRCUMFLEX expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a, makeOp(o), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // expr ::= expr AMPER expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a, makeOp(o), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // expr ::= expr LEFTSHIFT expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a, makeOp(o), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // expr ::= expr RIGHTSHIFT expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a, makeOp(o), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // expr ::= expr PLUS expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a, makeOp(o), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // expr ::= expr MINUS expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a, makeOp(o), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // expr ::= expr STAR expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a, makeOp(o), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // expr ::= expr AT expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a, makeOp(o), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // expr ::= expr PERCENT expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a, makeOp(o), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // expr ::= expr SLASH expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a, makeOp(o), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // expr ::= expr DOUBLESLASH expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a, makeOp(o), b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // expr ::= PLUS factor 
            {
              Node<String> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", makeOp(o), a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // expr ::= MINUS factor 
            {
              Node<String> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", makeOp(o), a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // expr ::= power 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("expr", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // factor ::= PLUS factor 
            {
              Node<String> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("factor", makeOp(o), a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // factor ::= MINUS factor 
            {
              Node<String> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("factor", makeOp(o), a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // factor ::= power 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNode("factor", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // power ::= atom_expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Debuglog("power --> atom_expr"); RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("power",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // power ::= atom_expr DOUBLESTAR factor 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("power", a, b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("power",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // atom_expr ::= atom 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Debuglog("atom_expr --> atom"); RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom_expr",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // atom_expr ::= atom_expr trailer 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        Debuglog("atom_expr --> atom_expr trailer"); 
        Node<String> List;
        if (a.getData().equals("atom_expr"))
            List = a;
        else
            List = makeNode("atom_expr", a);
        List.appendChild(b);
        RESULT = List;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom_expr",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // atom ::= LPAR RPAR 
            {
              Node<String> RESULT =null;
		RESULT = makeNode("atom_()");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // atom ::= LPAR yield_expr RPAR 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = makeNode("atom_()", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // atom ::= LPAR testlist_comp RPAR 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = makeNode("atom_()", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // atom ::= LSQB RSQB 
            {
              Node<String> RESULT =null;
		RESULT = makeNode("atom_[]");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // atom ::= LSQB testlist_comp RSQB 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = makeNode("atom_[]", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // atom ::= LBRACE RBRACE 
            {
              Node<String> RESULT =null;
		RESULT = makeNode("atom_{}");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // atom ::= LBRACE dictorsetmaker RBRACE 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = makeNode("atom_{}", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // atom ::= NAME 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeName(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // atom ::= NUMBER 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = makeNumber(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // atom ::= strings 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("atom", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // atom ::= ELLIPSIS 
            {
              Node<String> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("atom", makeOp(o));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // atom ::= NONE 
            {
              Node<String> RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("atom", makeKeyword(k));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // atom ::= TRUE 
            {
              Node<String> RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("atom", makeKeyword(k));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // atom ::= FALSE 
            {
              Node<String> RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("atom", makeKeyword(k));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // strings ::= STRING 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("strings", makeString(a));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strings",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // strings ::= strings STRING 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        a.appendChild(makeString(b));
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strings",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // testlist_comp ::= test comp_for 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("testlist_comp", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_comp",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // testlist_comp ::= star_expr comp_for 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("testlist_comp", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_comp",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // testlist_comp ::= testlist_comp_sub 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("testlist_comp", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_comp",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // testlist_comp ::= testlist_comp_sub COMMA 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = makeNode("testlist_comp", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_comp",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // testlist_comp_sub ::= test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("testlist_comp_sub", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_comp_sub",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // testlist_comp_sub ::= star_expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("testlist_comp_sub", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_comp_sub",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // testlist_comp_sub ::= testlist_comp_sub COMMA test 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_comp_sub",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // testlist_comp_sub ::= testlist_comp_sub COMMA star_expr 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_comp_sub",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // trailer ::= LPAR RPAR 
            {
              Node<String> RESULT =null;
		RESULT = makeNode("trailer_()");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailer",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // trailer ::= LPAR arglist RPAR 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = makeNode("trailer_()", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailer",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // trailer ::= LSQB subscriptlist RSQB 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = makeNode("trailer_[]", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailer",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // trailer ::= DOT NAME 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("trailer_.", makeName(a));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailer",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // subscriptlist ::= subscriptlist_sub 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscriptlist",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // subscriptlist ::= subscriptlist_sub COMMA 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscriptlist",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // subscriptlist_sub ::= subscript 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("subscriptlist", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscriptlist_sub",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // subscriptlist_sub ::= subscriptlist_sub COMMA subscript 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscriptlist_sub",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // subscript ::= test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("subscript", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscript",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // subscript ::= test COLON test sliceop 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("subscript_a,bc", a, b, c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscript",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // subscript ::= COLON test sliceop 
            {
              Node<String> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("subscript_,bc", b, c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscript",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // subscript ::= test COLON sliceop 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("subscript_a,c", a, c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscript",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // subscript ::= test COLON test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("subscript_a,b", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscript",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // subscript ::= test COLON 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = makeNode("subscript_a,", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscript",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // subscript ::= COLON sliceop 
            {
              Node<String> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("subscript_,c", c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscript",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // subscript ::= COLON test 
            {
              Node<String> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("subscript_,b", b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscript",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // subscript ::= COLON 
            {
              Node<String> RESULT =null;
		RESULT = makeNode("subscript");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subscript",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // sliceop ::= COLON 
            {
              Node<String> RESULT =null;
		RESULT = makeNode("sliceop");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sliceop",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // sliceop ::= COLON test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("sliceop", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sliceop",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // exprlist ::= exprlist_sub 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // exprlist ::= exprlist_sub COMMA 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // exprlist_sub ::= expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("exprlist_sub", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist_sub",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // exprlist_sub ::= star_expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("exprlist_sub", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist_sub",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // exprlist_sub ::= exprlist_sub COMMA expr 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist_sub",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // exprlist_sub ::= exprlist_sub COMMA star_expr 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist_sub",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // testlist ::= testlist_sub 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // testlist ::= testlist_sub COMMA 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // testlist_sub ::= test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("testlist_sub", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_sub",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // testlist_sub ::= testlist_sub COMMA test 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("testlist_sub",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // dictorsetmaker ::= dictorsetmaker1 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // dictorsetmaker ::= dictorsetmaker2 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // dictorsetmaker1 ::= test COLON test comp_for 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("dictorsetmaker1", a, b, c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker1",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // dictorsetmaker1 ::= DOUBLESTAR expr comp_for 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("dictorsetmaker1_**", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker1",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // dictorsetmaker1 ::= dictorsetmaker1_sub COMMA 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker1",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // dictorsetmaker1 ::= dictorsetmaker1_sub 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker1",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // dictorsetmaker1_sub ::= test COLON test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("dictorsetmaker1_sub", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker1_sub",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // dictorsetmaker1_sub ::= DOUBLESTAR expr 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("dictorsetmaker1_sub", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker1_sub",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // dictorsetmaker1_sub ::= dictorsetmaker1_sub COMMA test COLON test 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        list.appendChild(b);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker1_sub",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // dictorsetmaker1_sub ::= dictorsetmaker1_sub COMMA DOUBLESTAR expr 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker1_sub",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // dictorsetmaker2 ::= test comp_for 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("dictorsetmaker2", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker2",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // dictorsetmaker2 ::= star_expr comp_for 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("dictorsetmaker2", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker2",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // dictorsetmaker2 ::= dictorsetmaker2_sub 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker2",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // dictorsetmaker2 ::= dictorsetmaker2_sub COMMA 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker2",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // dictorsetmaker2_sub ::= test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("dictorsetmaker2_sub", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker2_sub",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // dictorsetmaker2_sub ::= star_expr 
            {
              Node<String> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=  makeNode("dictorsetmaker2_sub", b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker2_sub",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // dictorsetmaker2_sub ::= dictorsetmaker2_sub COMMA test 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker2_sub",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // dictorsetmaker2_sub ::= dictorsetmaker2_sub COMMA star_expr 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker2_sub",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000001(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // classdef ::= CLASS NAME LPAR arglist RPAR COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("classdef", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classdef",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // classdef ::= CLASS NAME COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("classdef", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classdef",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // classdef ::= CLASS NAME LPAR RPAR COLON suite 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=  makeNode("classdef", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classdef",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // arglist ::= arglist_sub 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // arglist ::= arglist_sub COMMA 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // arglist_sub ::= argument 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("arglist_sub", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist_sub",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // arglist_sub ::= arglist_sub COMMA argument 
            {
              Node<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> list = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.appendChild(a);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist_sub",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // argument ::= test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("argument", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // argument ::= test comp_for 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("argument", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // argument ::= test EQUAL test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("argument_=", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // argument ::= DOUBLESTAR test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("argument_**", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // argument ::= STAR test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("argument_*", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // comp_iter ::= comp_for 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("comp_iter", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_iter",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // comp_iter ::= comp_if 
            {
              Node<String> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("comp_iter", b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_iter",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // sync_comp_for ::= FOR exprlist IN or_test comp_iter 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> c = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("sync_comp_for", a, b, c);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sync_comp_for",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // sync_comp_for ::= FOR exprlist IN or_test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = makeNode("sync_comp_for", a, b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sync_comp_for",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // comp_for ::= ASYNC sync_comp_for 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("comp_for", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_for",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // comp_if ::= IF test_nocond 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("comp_if", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_if",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // comp_if ::= IF test_nocond comp_iter 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("comp_if", a, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_if",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // encoding_decl ::= NAME 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeName(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("encoding_decl",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // yield_expr ::= YIELD 
            {
              Node<String> RESULT =null;
		RESULT = makeNode("yield_expr");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yield_expr",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // yield_expr ::= YIELD yield_arg 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("yield_expr", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yield_expr",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // yield_arg ::= FROM test 
            {
              Node<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> a = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("yield_arg_from", a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yield_arg",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // yield_arg ::= testlist 
            {
              Node<String> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node<String> b = (Node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = makeNode("yield_arg", b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yield_arg",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Parser$do_action_part00000001(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}

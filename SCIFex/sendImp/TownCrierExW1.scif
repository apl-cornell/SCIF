import Callback;

contract TownCrier[high] extends BaseContract {
    {trustedSend = high}
    {high => this}
    address{high} requester;
    Callback{high} callback;
    uint{high} FEE;
    address{high} SGX_ADDR;

    void request{BOT >> high; BOT}(address{BOT} cb) {
    	address gUser = caller;
        uint paid = payment;
        clear();
        if {high} (payment < FEE or requester != EMPTY_ADDR) {
            return;
        }

    	Callback gCb = endorse(Callback(cb), BOT->high);
    	
    	requester = gUser;
    	callback = gCb;
    }

    void deliver{high >> high; BOT}(bytes data) {
        address sender = caller;
        clear();
        if {high} (sender != SGX_ADDR or requester == EMPTY_ADDR) {
            return;
        }

        requester = EMPTY_ADDR;
        send(SGX_ADDR, FEE);
        payBeforeCall(0, callback);
        callback.call(data);
    }

    void cancel{BOT >> high; BOT}() {
        address sender = caller;
        clear();
        if {high} (sender != requester) {
            return;
        }

        requester = EMPTY_ADDR;
        send(requester, FEE);
    }
}

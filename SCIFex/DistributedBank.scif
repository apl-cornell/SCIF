contract DistributedBank {
    {high => this}
    DistributedBank{high} otherBank;
    uint{high} balance;
    map(address, uint){high} balances;

    void withdraw{BOT >> high; BOT}(address{BOT} sender, uint{BOT} amount) {

        // ... check if this is the sender

        address{high} gSender = endorse(sender, BOT->high);
        uint{high} gAmount = endorse(amount, BOT->high);

        if{high} (balances[gSender] >= gAmount && balance >= gAmount) {
            balances[gSender] = balances[gSender] - gAmount;
            lock(high) {
                send(gSender, gAmount);
            }
            otherBank.decBal(gSender, gAmount);
        }
    }

    void decBal{high >> high; high}(address user, uint amount) {
        // ... adjust balances
    }
}

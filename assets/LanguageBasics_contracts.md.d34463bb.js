import{_ as s,c as a,o as n,a as e}from"./app.dd2a2f01.js";const h=JSON.parse('{"title":"Contracts","description":"","frontmatter":{},"headers":[{"level":2,"title":"Structure of a contract","slug":"structure-of-a-contract","link":"#structure-of-a-contract","children":[]},{"level":2,"title":"State variables","slug":"state-variables","link":"#state-variables","children":[]},{"level":2,"title":"Exceptions","slug":"exceptions","link":"#exceptions","children":[]},{"level":2,"title":"Local trust relationships","slug":"local-trust-relationships","link":"#local-trust-relationships","children":[]},{"level":2,"title":"Methods","slug":"methods","link":"#methods","children":[{"level":3,"title":"Method labels","slug":"method-labels","link":"#method-labels","children":[]}]},{"level":2,"title":"Inheritance","slug":"inheritance","link":"#inheritance","children":[]},{"level":2,"title":"Interface","slug":"interface","link":"#interface","children":[]}],"relativePath":"LanguageBasics/contracts.md","lastUpdated":1731636311000}'),l={name:"LanguageBasics/contracts.md"},o=e(`<h1 id="contracts" tabindex="-1">Contracts <a class="header-anchor" href="#contracts" aria-hidden="true">#</a></h1><p>Contracts in SCIF contain persistent state variables and methods that perform computations and operations.</p><h2 id="structure-of-a-contract" tabindex="-1">Structure of a contract <a class="header-anchor" href="#structure-of-a-contract" aria-hidden="true">#</a></h2><p>The declaration of a contract starts by specifying its name and label, followed by its body contained in a braces pair.</p><p>The body of a contract may contain the following:</p><ul><li>state variable declarations</li><li>exception definitions</li><li>local trust relationship specifications</li><li>constructor definitions</li><li>method definitions.</li></ul><p>The following example shows a basic contract.</p><div class="language-scif"><button title="Copy Code" class="copy"></button><span class="lang">scif</span><pre><code><span class="line"><span style="color:#D8DEE9FF;">contract ContractName</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">this</span><span style="color:#ECEFF4;">]</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#ECEFF4;">    </span><span style="color:#616E88;">// state variables</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#88C0D0;">map</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">address</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">uint</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9FF;"> balances</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    final address owner</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ECEFF4;">    </span><span style="color:#616E88;">// exceptions</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    exception </span><span style="color:#88C0D0;">TransferFailure</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">address from</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> address to</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">uint</span><span style="color:#D8DEE9FF;"> amount</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ECEFF4;">    </span><span style="color:#616E88;">// local trust relationships</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    localtrust </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        principal high</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> low</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        high </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> low</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        this </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> high</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        owner </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> this</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ECEFF4;">    </span><span style="color:#616E88;">// constructors</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#88C0D0;">constructor</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">address owner</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#D8DEE9;">this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">owner</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> owner</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ECEFF4;">    </span><span style="color:#616E88;">// methods</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    @public </span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">void</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">transfer</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">address to</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">uint</span><span style="color:#D8DEE9FF;"> amount</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">throws</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">TransferFailure</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">balances</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9;">msg</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">sender</span><span style="color:#ECEFF4;">]</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">&gt;=</span><span style="color:#D8DEE9FF;"> amount</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            balances</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9;">msg</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">sender</span><span style="color:#ECEFF4;">]</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> balance</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9;">msg</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">sender</span><span style="color:#ECEFF4;">]</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">-</span><span style="color:#D8DEE9FF;"> amount</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            balances</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">to</span><span style="color:#ECEFF4;">]</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> balance</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">to</span><span style="color:#ECEFF4;">]</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> amount</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">else</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            throw </span><span style="color:#88C0D0;">TransferFailure</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">msg</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">sender</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> to</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> amount</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="state-variables" tabindex="-1">State variables <a class="header-anchor" href="#state-variables" aria-hidden="true">#</a></h2><p>State variables are contract-level variables. They are stored in<code>storage</code> of a contract and thus are persistent. A state variable can be declared as <code>final</code>, similar to Java&#39;s keyword <code>final</code>, meaning that this variable can only be initialized once in constructors and cannot be reassigned later.</p><h2 id="exceptions" tabindex="-1">Exceptions <a class="header-anchor" href="#exceptions" aria-hidden="true">#</a></h2><p>Exceptions are defined by specifying the name and the arguments of the exception. Programmers can use <code>try/catch</code> clause to catch exceptions and use <code>throw</code> statement to throw them.</p><p>An exception must be caught in a method or be specified in the method&#39;s signature.</p><p>There are also some built-in exceptions:</p><ul><li><code>OutOfGasException</code>: a method call throws this exception when the current transaction runs out of gas.</li><li><code>RevertException</code>: <code>revert</code> statement reverts all changes in current transaction and throw this exception.</li></ul><h2 id="local-trust-relationships" tabindex="-1">Local trust relationships <a class="header-anchor" href="#local-trust-relationships" aria-hidden="true">#</a></h2><p>Programmers can declare principals that are not addresses and trust assumptions between principals in <code>localtrust</code> clause of a contract.</p><p>By specifying <code>A =&gt; B</code>, the trust relationship that principal <code>B</code> trusts principal <code>A</code> is put into the local assumptions when typechecking. By specifying <code>A == B</code>, the trust relationship that principal <code>B</code> and principal <code>A</code> are mutually trusted is put into the local assumptions when typechecking.</p><p>Note that it is the programmers&#39; responsibility to ensure the correctness of these assumptions. Failure to do so might result in security vulnerabilities.</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-hidden="true">#</a></h2><p>Programmers declare a method by specifying its return type, name, arguments, and its body.</p><p>In addition, methods can be annotated with decorators to specify their properties:</p><ul><li><code>public</code>: this method is an entry point and can be called by external accounts.</li><li><code>private</code>: this method can only be called by other methods inside this contract.</li><li><code>payable</code>: when called, the caller can send ether associated with this call.</li><li><code>override</code>: meaning that this method is overriding an existing method of the super contract.</li></ul><h3 id="method-labels" tabindex="-1">Method labels <a class="header-anchor" href="#method-labels" aria-hidden="true">#</a></h3><p>Labeling a method is more complicated than labeling a variable.</p><p>A method is labeled as <code>{l1 -&gt; l2; l3}</code> where <code>l1</code> represents the requirement of the caller&#39;s integrity level, <code>l2</code> represents the control flow integrity level at the beginning of the method, and <code>l3</code> represents the lock level this method respects.</p><h2 id="inheritance" tabindex="-1">Inheritance <a class="header-anchor" href="#inheritance" aria-hidden="true">#</a></h2><p>SCIF supports inheritance when defining a contract by using the keyword <code>extends</code>:</p><div class="language-scif"><button title="Copy Code" class="copy"></button><span class="lang">scif</span><pre><code><span class="line"><span style="color:#D8DEE9FF;">contract B extends A </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    ...</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    @override</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    @public </span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">void</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">foo</span><span style="color:#ECEFF4;">()</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        ...</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span></code></pre></div><p>Like in Java, contract <code>B</code> will inherit all state variables, exceptions, and methods from <code>A</code>. <code>B</code> can also override <code>A</code>&#39;s method by decorator <code>override</code>.</p><h2 id="interface" tabindex="-1">Interface <a class="header-anchor" href="#interface" aria-hidden="true">#</a></h2>`,31),t=[o];function p(c,r,i,E,F,d){return n(),a("div",null,t)}const D=s(l,[["render",p]]);export{h as __pageData,D as default};

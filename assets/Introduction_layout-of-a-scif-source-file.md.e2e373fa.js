import{_ as s,c as a,o as n,a as l}from"./app.dd2a2f01.js";const D=JSON.parse('{"title":"Layout of a SCIF source file","description":"","frontmatter":{},"headers":[{"level":2,"title":"Importing from other source files","slug":"importing-from-other-source-files","link":"#importing-from-other-source-files","children":[]},{"level":2,"title":"Structure of a contract","slug":"structure-of-a-contract","link":"#structure-of-a-contract","children":[{"level":3,"title":"contract name, contract label and inheritance","slug":"contract-name-contract-label-and-inheritance","link":"#contract-name-contract-label-and-inheritance","children":[]},{"level":3,"title":"state variables and local principals","slug":"state-variables-and-local-principals","link":"#state-variables-and-local-principals","children":[]},{"level":3,"title":"local trust assumptions","slug":"local-trust-assumptions","link":"#local-trust-assumptions","children":[]},{"level":3,"title":"exceptions","slug":"exceptions","link":"#exceptions","children":[]},{"level":3,"title":"constructor methods","slug":"constructor-methods","link":"#constructor-methods","children":[]},{"level":3,"title":"methods","slug":"methods","link":"#methods","children":[]}]}],"relativePath":"Introduction/layout-of-a-scif-source-file.md","lastUpdated":1731636311000}'),o={name:"Introduction/layout-of-a-scif-source-file.md"},e=l(`<h1 id="layout-of-a-scif-source-file" tabindex="-1">Layout of a SCIF source file <a class="header-anchor" href="#layout-of-a-scif-source-file" aria-hidden="true">#</a></h1><p>A SCIF source file can contain multiple SCIF contracts definitions. This section serves as a quick overview of the SCIF file layout.</p><p>An example:</p><div class="language-scif"><button title="Copy Code" class="copy"></button><span class="lang">scif</span><pre><code><span class="line"><span style="color:#D8DEE9FF;">contract LocalTrust </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    final address addrA </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">0x...</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    final address addrB </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">0x...</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    final address addrC </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">0x...</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    principal high</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    principal low</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    assume </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        high </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> this</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        this </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> low</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        addrA </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> high</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        addrB </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> low</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">uint</span><span style="color:#D8DEE9FF;"> highValue</span><span style="color:#ECEFF4;">{</span><span style="color:#D8DEE9FF;">high</span><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">uint</span><span style="color:#D8DEE9FF;"> lowValue</span><span style="color:#ECEFF4;">{</span><span style="color:#D8DEE9FF;">low</span><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    exception </span><span style="color:#88C0D0;">X</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    exception </span><span style="color:#88C0D0;">Y</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">uint</span><span style="color:#D8DEE9FF;"> aug1</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">bool</span><span style="color:#D8DEE9FF;"> aug2</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">    @public</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">void</span><span style="color:#D8DEE9FF;"> setHigh</span><span style="color:#ECEFF4;">{</span><span style="color:#D8DEE9FF;">high</span><span style="color:#ECEFF4;">}(</span><span style="color:#81A1C1;">uint</span><span style="color:#D8DEE9FF;"> v</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        highValue </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> v</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">    @public</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">void</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">foo</span><span style="color:#ECEFF4;">()</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#88C0D0;">setHigh</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">    @public</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">void</span><span style="color:#D8DEE9FF;"> setLow</span><span style="color:#ECEFF4;">{</span><span style="color:#D8DEE9FF;">low</span><span style="color:#ECEFF4;">}(</span><span style="color:#81A1C1;">uint</span><span style="color:#D8DEE9FF;"> v</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        lowValue </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> v</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="importing-from-other-source-files" tabindex="-1">Importing from other source files <a class="header-anchor" href="#importing-from-other-source-files" aria-hidden="true">#</a></h2><p>SCIF supports import statements. By using an import statement like the following:</p><div class="language-scif"><button title="Copy Code" class="copy"></button><span class="lang">scif</span><pre><code><span class="line"><span style="color:#D8DEE9FF;">import </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path-to-file</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span></code></pre></div><p>All global symbols such as contacts are imported from the specified file.</p><h2 id="structure-of-a-contract" tabindex="-1">Structure of a contract <a class="header-anchor" href="#structure-of-a-contract" aria-hidden="true">#</a></h2><p>Structure of SCIF contracts are similar to classes in object-oriented programming languages such as Java. Each contract can contain declarations of state variables, exceptions, constructors and methods. In addition, a SCIF contract supports declarations of local principals and local trust assumptions that help secure your program from muliple security vulnerabilities such as reentrancy vulnerabilities.</p><h3 id="contract-name-contract-label-and-inheritance" tabindex="-1">contract name, contract label and inheritance <a class="header-anchor" href="#contract-name-contract-label-and-inheritance" aria-hidden="true">#</a></h3><p>Each contract starts with a name, a label (optional), and inheritance declaration (optional).</p><div class="language-scif"><button title="Copy Code" class="copy"></button><span class="lang">scif</span><pre><code><span class="line"><span style="color:#D8DEE9FF;">contract LocalTrust</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">l</span><span style="color:#ECEFF4;">]</span><span style="color:#D8DEE9FF;"> extends BaseContract </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"></span></code></pre></div><p>The label <code>l</code> indicates the trust level of the contract code, and the inheritance declaration above specifies that <code>LocalTrust</code> inherits from <code>BaseContract</code>.</p><h3 id="state-variables-and-local-principals" tabindex="-1">state variables and local principals <a class="header-anchor" href="#state-variables-and-local-principals" aria-hidden="true">#</a></h3><p>State variables are variables that are stored persistently and used globally in the contract.</p><div class="language-scif"><button title="Copy Code" class="copy"></button><span class="lang">scif</span><pre><code><span class="line"><span style="color:#D8DEE9FF;">contract LocalTrust </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    final address addrA </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">0x...</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    final address addrB </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">0x...</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    final address addrC </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">0x...</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    principal high</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    principal low</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span></code></pre></div><p>The above code declare three final addresses state variables.</p><p>Local principals are local labels that can be used in other label declarations and serve as convinient tools to represent local trust entities. The above code declare two local principals <code>high</code> and <code>low</code>.</p><h3 id="local-trust-assumptions" tabindex="-1">local trust assumptions <a class="header-anchor" href="#local-trust-assumptions" aria-hidden="true">#</a></h3><p>Users can declare local trust assumptions to help the compiler better reasoning trust relationships.</p><div class="language-scif"><button title="Copy Code" class="copy"></button><span class="lang">scif</span><pre><code><span class="line"><span style="color:#D8DEE9FF;">    assume </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        high </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> this</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        this </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> low</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        addrA </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> high</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        addrB </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> low</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span></code></pre></div><p>The above clause declares four trust assumptions. <code>A =&gt; B</code> means that <code>A</code> is trusted by <code>B</code>.</p><h3 id="exceptions" tabindex="-1">exceptions <a class="header-anchor" href="#exceptions" aria-hidden="true">#</a></h3><p>Exceptions can be used to indicate special behaviors and scenarios during contract executions.</p><div class="language-scif"><button title="Copy Code" class="copy"></button><span class="lang">scif</span><pre><code><span class="line"><span style="color:#D8DEE9FF;">    exception </span><span style="color:#88C0D0;">X</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    exception </span><span style="color:#88C0D0;">Y</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">uint</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">aug1</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">bool</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">aug2</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span></code></pre></div><p>The above code declare two exceptions <code>X</code> and <code>Y</code>. Notice that exceptions can carry information as parameters.</p><h3 id="constructor-methods" tabindex="-1">constructor methods <a class="header-anchor" href="#constructor-methods" aria-hidden="true">#</a></h3><p>Constructor methods are optional. They provide convenience when creating a new contract and can help build invariants.</p><div class="language-scif"><button title="Copy Code" class="copy"></button><span class="lang">scif</span><pre><code><span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#88C0D0;">constructor</span><span style="color:#ECEFF4;">(...)</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        ...</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span></code></pre></div><p>A constructor carries arbitrary parameters and can manipulate state variables.</p><h3 id="methods" tabindex="-1">methods <a class="header-anchor" href="#methods" aria-hidden="true">#</a></h3><p>Users can define public or private methods as they wish. In the example code, we define three methods <code>setHigh</code>, <code>foo</code> and <code>setLow</code>. They are declared in a way similar to Java and with additional information flow label annotations.</p><p>See the corresponding methods in chapter language basics for more information.</p>`,34),p=[e];function t(c,r,i,E,F,d){return n(),a("div",null,p)}const h=s(o,[["render",t]]);export{D as __pageData,h as default};

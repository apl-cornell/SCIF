import{_ as e,c as s,o as a,a as n}from"./app.dd2a2f01.js";const F=JSON.parse('{"title":"Expressions and Statements","description":"","frontmatter":{},"headers":[{"level":2,"title":"Contract creation","slug":"contract-creation","link":"#contract-creation","children":[]},{"level":2,"title":"Unary expressions","slug":"unary-expressions","link":"#unary-expressions","children":[]},{"level":2,"title":"Binary expressions","slug":"binary-expressions","link":"#binary-expressions","children":[]},{"level":2,"title":"Method calls","slug":"method-calls","link":"#method-calls","children":[{"level":3,"title":"Internal method calls","slug":"internal-method-calls","link":"#internal-method-calls","children":[]},{"level":3,"title":"Extrernal method calls","slug":"extrernal-method-calls","link":"#extrernal-method-calls","children":[]}]},{"level":2,"title":"Assignments","slug":"assignments","link":"#assignments","children":[]},{"level":2,"title":"Control structures","slug":"control-structures","link":"#control-structures","children":[]},{"level":2,"title":"Scoping and declarations","slug":"scoping-and-declarations","link":"#scoping-and-declarations","children":[]},{"level":2,"title":"Exceptions","slug":"exceptions","link":"#exceptions","children":[]}],"relativePath":"LanguageBasics/expressions-and-statements.md","lastUpdated":1735622771000}'),o={name:"LanguageBasics/expressions-and-statements.md"},t=n(`<h1 id="expressions-and-statements" tabindex="-1">Expressions and Statements <a class="header-anchor" href="#expressions-and-statements" aria-hidden="true">#</a></h1><h2 id="contract-creation" tabindex="-1">Contract creation <a class="header-anchor" href="#contract-creation" aria-hidden="true">#</a></h2><p>Like creating a new object in regular object-oriented language, a contract can be created by another contract using <code>new</code> keyword. For example, the following statement creates a contract of type <code>C</code>:</p><div class="language-scif"><button title="Copy Code" class="copy"></button><span class="lang">scif</span><pre><code><span class="line"><span style="color:#D8DEE9FF;">C newContract </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> new </span><span style="color:#88C0D0;">C</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">args</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span></code></pre></div><p>The full code of the contract being created must be provided during compile time to get rid of loop creation-dependencies.</p><h2 id="unary-expressions" tabindex="-1">Unary expressions <a class="header-anchor" href="#unary-expressions" aria-hidden="true">#</a></h2><p>The following unary operators are provided in SCIF: <code>!</code> for logical negation; <code>~</code> for bitwise negation; <code>-</code> for integer negation.</p><p>Unary operators have the highest precedence when evaluating expressions.</p><h2 id="binary-expressions" tabindex="-1">Binary expressions <a class="header-anchor" href="#binary-expressions" aria-hidden="true">#</a></h2><p>Binary operators provided in SCIF for booleans, bytes and integers are like in Java: <code>&amp;</code>, <code>|</code>, for bitewise and and or; <code>&lt;&lt;</code>, <code>&gt;&gt;</code> for bitwise left shift and right shift; <code>&amp;&amp;</code>, <code>||</code> for logical and and or; <code>==</code>, <code>!=</code> for logical equality and inequality. <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, and <code>%</code> for integer addition, subtraction, multiplication, division and modulo operation.</p><p><code>address</code> type and contracts can also be compared using <code>==</code> and <code>!=</code>.</p><h2 id="method-calls" tabindex="-1">Method calls <a class="header-anchor" href="#method-calls" aria-hidden="true">#</a></h2><p>Method calls in SCIF contains internal method calls and external method calls.</p><h3 id="internal-method-calls" tabindex="-1">Internal method calls <a class="header-anchor" href="#internal-method-calls" aria-hidden="true">#</a></h3><p>Methods within the same contract can be called using their names. For example,</p><div class="language-scif"><button title="Copy Code" class="copy"></button><span class="lang">scif</span><pre><code><span class="line"><span style="color:#D8DEE9FF;">contract C </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    @private </span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">uint</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">f</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">uint</span><span style="color:#D8DEE9FF;"> i</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> i </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">1</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">    @public</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">uint</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">g</span><span style="color:#ECEFF4;">()</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">f</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">10</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span></code></pre></div><p>In method <code>g</code> above, method <code>f</code> is called internally.</p><p>Internal method calls are compiled into simple jumps inside the EVM. So they are much more efficient than external method calls.</p><h3 id="extrernal-method-calls" tabindex="-1">Extrernal method calls <a class="header-anchor" href="#extrernal-method-calls" aria-hidden="true">#</a></h3><div class="language-scif"><button title="Copy Code" class="copy"></button><span class="lang">scif</span><pre><code><span class="line"><span style="color:#D8DEE9FF;">contract D </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    C c</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    @private</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">uint</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">h</span><span style="color:#ECEFF4;">()</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">c</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">g</span><span style="color:#ECEFF4;">()</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">10</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span></code></pre></div><p>In contract <code>D</code>, <code>c</code>&#39;s public method <code>g</code> is called by specifying the contract <code>c</code> where the method belongs to. This is an external method call, and a new sub-transaction is created when doing so.</p><p>A contract can also call its own public methods externally by using expressions like <code>this.h()</code>.</p><h2 id="assignments" tabindex="-1">Assignments <a class="header-anchor" href="#assignments" aria-hidden="true">#</a></h2><p>Variables can be assigned values using assignment operator <code>=</code>.</p><h2 id="control-structures" tabindex="-1">Control structures <a class="header-anchor" href="#control-structures" aria-hidden="true">#</a></h2><p>The following contrcol structure keywords are supported in SCIF: <code>if</code>, <code>else</code>, <code>while</code>, <code>for</code>, <code>break</code>, <code>continue</code>, and <code>return</code>. They carry similar semantics from Java.</p><p>SCIF also supports exception handling by providing <code>try</code>/<code>catch</code> statements.</p><h2 id="scoping-and-declarations" tabindex="-1">Scoping and declarations <a class="header-anchor" href="#scoping-and-declarations" aria-hidden="true">#</a></h2><p>Scoping in SCIF is similar to in Java. Variables are visible from the point after their declaration until the end of the smallest scope block (usually a <code>{}</code> block) that contains the declaration.</p><p>Extrenal contracts can be imported by keyword <code>import</code>. For example, the following code imports a new contract <code>ContractD</code> from the specified source file.</p><div class="language-scif"><button title="Copy Code" class="copy"></button><span class="lang">scif</span><pre><code><span class="line"><span style="color:#D8DEE9FF;">import ContractD from </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">./ContractD.scif</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span></code></pre></div><p>Variables have initial default values: <code>false</code> for a <code>bool</code>; <code>0</code> for integers and bytes;</p><h2 id="exceptions" tabindex="-1">Exceptions <a class="header-anchor" href="#exceptions" aria-hidden="true">#</a></h2><p>Exception types are declared at contract level and can be thrown and caught by <code>throw</code> and <code>try</code>/<code>catch</code> statements. Any uncaught exceptions in a method must be specified in the signature of the method.</p>`,34),l=[t];function c(r,p,i,d,h,y){return a(),s("div",null,l)}const u=e(o,[["render",c]]);export{F as __pageData,u as default};

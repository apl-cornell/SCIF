import{_ as e,c as a,o as s,a as t}from"./app.dd2a2f01.js";const m=JSON.parse('{"title":"Types","description":"","frontmatter":{},"headers":[{"level":2,"title":"Primitive types","slug":"primitive-types","link":"#primitive-types","children":[]},{"level":2,"title":"Arrays","slug":"arrays","link":"#arrays","children":[]},{"level":2,"title":"Maps","slug":"maps","link":"#maps","children":[]},{"level":2,"title":"Classes and Contracts","slug":"classes-and-contracts","link":"#classes-and-contracts","children":[]},{"level":2,"title":"Labels","slug":"labels","link":"#labels","children":[]}],"relativePath":"LanguageBasics/types.md","lastUpdated":1735953138000}'),n={name:"LanguageBasics/types.md"},o=t(`<h1 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-hidden="true">#</a></h1><p>SCIF is statically typed, meaning that each variable and method type needs to be specified at compile time. However, SCIF provides inference mechanisms to infer labels for programmer&#39;s convenience.</p><h2 id="primitive-types" tabindex="-1">Primitive types <a class="header-anchor" href="#primitive-types" aria-hidden="true">#</a></h2><ul><li><code>bool</code>: Boolean type where the possible values are <code>true</code> and <code>false</code>.</li><li><code>uint</code>: Unsigned integer type where the possible values are between 0 and 2^256 - 1.</li><li><code>byte</code>: Byte type where the possible values are between 0 and 2^8 - 1.</li><li><code>address</code>: Address type represents an Ethereum account address using a 20-byte value.</li></ul><h2 id="arrays" tabindex="-1">Arrays <a class="header-anchor" href="#arrays" aria-hidden="true">#</a></h2><p><code>T[n]</code> represents the type of an array of fixed size <code>n</code> and element type <code>T</code>. For example, <code>uint[10]</code> represents the type of a <code>uint</code> array of size 10.</p><p>Indices are zero-based.</p><h2 id="maps" tabindex="-1">Maps <a class="header-anchor" href="#maps" aria-hidden="true">#</a></h2><p><code>map(keyType, valueType)</code> represents a map type that maps from <code>keyType</code> to <code>valueType</code>. For example, <code>map(address, uint)</code> maps from <code>address</code> to <code>uint</code>.</p><p><code>keyType</code> can be any primitive type, while <code>valueType</code> can be any type, including maps and user-defined classes.</p><p>Values in a map <code>m</code> can be accessed through expressions <code>m[k]</code>.</p><h2 id="classes-and-contracts" tabindex="-1">Classes and Contracts <a class="header-anchor" href="#classes-and-contracts" aria-hidden="true">#</a></h2><ul><li>Contract Types: Every defined contract can be explicitly converted from and to the <code>address</code> type.</li></ul><h2 id="labels" tabindex="-1">Labels <a class="header-anchor" href="#labels" aria-hidden="true">#</a></h2><p>Each variable type in SCIF is associated with a label representing its integrity level. <code>T{l}</code> describes a type <code>T</code> associated with the label <code>l</code>.</p><p>For example:</p><div class="language-scif"><button title="Copy Code" class="copy"></button><span class="lang">scif</span><pre><code><span class="line"><span style="color:#81A1C1;">uint</span><span style="color:#ECEFF4;">{</span><span style="color:#D8DEE9FF;">trusted</span><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;"> x</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">uint</span><span style="color:#ECEFF4;">{</span><span style="color:#D8DEE9FF;">untrusted</span><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;"> y</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">x </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> y</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // compile error</span></span>
<span class="line"><span style="color:#D8DEE9FF;">y </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> x</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // pass</span></span>
<span class="line"></span></code></pre></div><p><code>x</code> is labeled as <code>trusted</code> while <code>y</code> is labeled as <code>untrusted</code>. So when <code>x</code> is reassigned to <code>y</code>, the compiler will not compile because there is an integrity failure that an untrusted value is assigned to a trusted variable.</p><p>If a label is not specified when declaring a variable, the compiler will either infer a label from the context or assign a default label to it.</p>`,19),l=[o];function c(r,d,i,p,y,h){return s(),a("div",null,l)}const b=e(n,[["render",c]]);export{m as __pageData,b as default};

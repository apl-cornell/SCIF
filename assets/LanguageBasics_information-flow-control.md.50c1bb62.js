import{_ as e,c as a,o as n,a as s}from"./app.dd2a2f01.js";const m=JSON.parse('{"title":"Information Flow Control","description":"","frontmatter":{},"headers":[{"level":2,"title":"Principals","slug":"principals","link":"#principals","children":[]},{"level":2,"title":"Trust relationships","slug":"trust-relationships","link":"#trust-relationships","children":[]},{"level":2,"title":"Labels","slug":"labels","link":"#labels","children":[]}],"relativePath":"LanguageBasics/information-flow-control.md","lastUpdated":1747063539000}'),o={name:"LanguageBasics/information-flow-control.md"},t=s(`<h1 id="information-flow-control" tabindex="-1">Information Flow Control <a class="header-anchor" href="#information-flow-control" aria-hidden="true">#</a></h1><p>SCIF provides the ability to label information manipulated by programs with security policies. The compiler then enforces the security of the program by leveraging information flow control techniques.</p><h2 id="principals" tabindex="-1">Principals <a class="header-anchor" href="#principals" aria-hidden="true">#</a></h2><p>A principal is an entity that represents some power to change certain aspects of the program. In SCIF, a principal can either be an <em>address</em>, representing an on-chain account, or a unique identifier that are defined by the programmer and only carries meaning within the scope of the current contract.</p><h2 id="trust-relationships" tabindex="-1">Trust relationships <a class="header-anchor" href="#trust-relationships" aria-hidden="true">#</a></h2><p>In addtion to the set of principals, SCIF need to know the relationship between principals to detect information flow violations. The relationship between principals are defined by <em>flowsto</em> declarations.</p><p>For example, suppose principal <code>Alice</code> is trusted principal <code>Bob</code> in the program. It can be declared as:</p><div class="language-scif"><button title="Copy Code" class="copy"></button><span class="lang">scif</span><pre><code><span class="line"><span style="color:#D8DEE9FF;">Alice </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> Bob</span></span>
<span class="line"></span></code></pre></div><p>It reads &quot;Alice flows to Bob&quot;, meaning that Alice&#39;s information is allowed to flow to Bob.</p><p>If Alice and Bob are mutually trusted, the following expression captures such a relationship:</p><div class="language-scif"><button title="Copy Code" class="copy"></button><span class="lang">scif</span><pre><code><span class="line"><span style="color:#D8DEE9FF;">Alice </span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;"> Bob</span></span>
<span class="line"></span></code></pre></div><h2 id="labels" tabindex="-1">Labels <a class="header-anchor" href="#labels" aria-hidden="true">#</a></h2><p>In information flow control, integrity and confidentiality are well-known duals. In SCIF, we only focus on the integrity because most smart contracts are currently running on public blockchains, where anyone can see anything of a smart contract.</p><p>In SCIF, an intergity policy is expressed as labels attached to code.</p><p>Here is a quick example:</p><div class="language-scif"><button title="Copy Code" class="copy"></button><span class="lang">scif</span><pre><code><span class="line"><span style="color:#D8DEE9FF;">final address owner</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">uint</span><span style="color:#ECEFF4;">{</span><span style="color:#D8DEE9FF;">owner</span><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;"> trustedCounter</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span></code></pre></div><p><code>trustedCounter</code> is labeled as <code>owner</code>, meaning that the integrity level of <code>trustedCounter</code> is <code>owner</code>. In other words, only principals trusted by address <code>owner</code> can influence its value directly or indirectly.</p><p>A label can be as simple as one single principal. It can also be a complicated combination of multiple principals. See later sections for details.</p>`,18),i=[t];function l(r,c,p,d,h,u){return n(),a("div",null,i)}const y=e(o,[["render",l]]);export{m as __pageData,y as default};

file_input: (NEWLINE | stmt)* ENDMARKER

decorator: '@' NAME NEWLINE
decorators: decorator+
decorated: decorators (classdef | funcdef)

funcdef: 'def' NAME parameters ['->' test] ':' suite

parameters: '(' [typedargslist] ')'
typedargslist: tfpdef ['=' test] (',' tfpdef ['=' test])* 
tfpdef: NAME ':' test

stmt: simple_stmt | compound_stmt
simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE
small_stmt: (expr_stmt | del_stmt | pass_stmt | flow_stmt |
             import_stmt | assert_stmt)
expr_stmt: test annassign 
annassign: ':' test ['=' test]
del_stmt: 'del' expr
pass_stmt: 'pass'
flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt
break_stmt: 'break'
continue_stmt: 'continue'
return_stmt: 'return' [test]
raise_stmt: 'raise' [test ['from' test]]
import_stmt: import_name
import_name: 'import' import_as_name
import_as_name: NAME ['as' NAME]
assert_stmt: 'assert' test [',' test]

compound_stmt: if_stmt | while_stmt | try_stmt | funcdef | classdef | decorated
if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]
while_stmt: 'while' test ':' suite ['else' ':' suite]
try_stmt: ('try' ':' suite
           ((except_clause ':' suite)+
            ['else' ':' suite]
            ['finally' ':' suite] |
           'finally' ':' suite))
except_clause: 'except' [test ['as' NAME]]
suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT

expr: 
    expr ('or' | 'and') expr |
    'not' expr |
    expr comp_op expr |
    expr ('|' | '^' | '&' | '<<' | '>>') expr |
    expr ('+' | '-') expr |
    expr ('*' | '@' | '/' | '%' | '//') expr |
    ('+' | '-' | '~') expr |
    expr '**' expr |
    atom trailer*

atom: ('(' [test] ')' |
       '{' [dictmaker] '}' |
       '{' [setmaker] '}' |
       NAME | NUMBER | STRING+  | 'None' | 'True' | 'False')
trailer: '(' [testlist] ')' | '[' test ']' | '.' NAME
dictmaker: test ':' test (',' test ':' test)* [',']
testlist: test (',' test)* [',']

classdef: 'class' NAME ['(' [testlist] ')'] ':' suite

testlist: test (',' test)*  [',']


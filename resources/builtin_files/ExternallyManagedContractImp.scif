import "./ExternallyManagedContract.scif";

contract ExternallyManagedContractImp implements ExternallyManagedContract {
    address owner;
    address[] trustees;
    map(address, uint) trusteeIndex;
    TrustManager m_trustManager;
    LockManager m_lockManager;

    constructor(TrustManager _trustManager, LockManager _lockManager) {
        owner = sender;
        m_trustManager = _trustManager;
        m_lockManager = _lockManager;
        addTrust(m_trustManager);
        addTrust(m_lockManager);
        addTrust(owner);
    }

    @private
    void addDirectTrust(address trustee) {
        trustees.push(trustee);
        trusteeIndex[trustee] = trustees.length();
    }

    @private
    void revokeDirectTrust(address trustee) {
        uint ind = trusteeIndex[trustee];
        address lastTrustee = trustees[trustees.length() - 1];
        trustees[ind - 1] = lastTrustee;
        trusteeIndex[lastTrustee] = ind;
        trustees.pop();
        trusteeIndex[trustee] = 0;
    }

    @public
    bool addTrust{this}(address trustee) {
        if (sender != owner) {
            return false;
        }
        addDirectTrust(trustee);
        return m_trustManager.addTrust(trustee);
    }

    @public
    bool revokeTrust{this}(address trustee) {
        if (sender != owner) {
            return false;
        }
        revokeDirectTrust(trustee);
        return m_trustManager.revokeTrust(trustee);
    }

    @public
    bool changeOwner{this}(address newOwner) {
        if (sender != owner) {
            return false;
        }
        revokeTrust(owner);
        owner = newOwner;
        addTrust(owner);
        return true;
    }

    @public
    address getOwner() {
        return owner;
    }

    @public
    bool directlyTrusts(address trustee) {
        address _trustee = endorse(trustee, any -> this);
        uint i = 0;
        while (i < trustees.length()) {
            if (trustees[i] == _trustee) {
                return true;
            }
            i = i + 1;
        }
        return false;
    }

    @public
    address[] directTrustees() {
        return trustees;
    }

    @public
    TrustManager trustManager() {
        return m_trustManager;
    }

    @public
    LockManager lockManager() {
        return m_lockManager;
    }

    @public
    @native
    bool trusts(address a, address b) {
        return m_trustManager.trusts(a, b);
    }
    @private
    bool bypassLocks(address l) {
        return m_lockManager.bypassLocks(l);
    }
    @private
    bool acquireLock(address l) {
        return m_lockManager.acquireLock(l);
    }
    @private
    bool releaseLock(address l) {
        return m_lockManager.releaseLock(l);
    }
}

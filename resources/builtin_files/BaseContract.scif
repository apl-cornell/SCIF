import "./IBaseContract.scif";

contract BaseContract implements IBaseContract {
    address owner;
    address[] trustees;
    map(address, uint) trusteeIndex;
    ITrustManager m_trustManager;
    ILockManager m_lockManager;

    constructor(ITrustManager _trustManager, ILockManager _lockManager) {
        owner = sender;
        m_trustManager = _trustManager;
        m_lockManager = _lockManager;
        setTrust(m_trustManager);
        setTrust(m_lockManager);
        setTrust(owner);
    }

    @private
    void setDirectTrust(address trustee) {
        trustees.push(trustee);
        trusteeIndex[trustee] = trustees.length();
    }

    @private
    void revokeDirectTrust(address trustee) {
        uint ind = trusteeIndex[trustee];
        address lastTrustee = trustees[trustees.length() - 1];
        trustees[ind - 1] = lastTrustee;
        trusteeIndex[lastTrustee] = ind;
        trustees.pop();
        trusteeIndex[trustee] = 0;
    }

    @public
    bool setTrust{this}(address trustee) {
        if (sender != owner) {
            return false;
        }
        setDirectTrust(trustee);
        return m_trustManager.setTrust(trustee);
    }

    @public
    bool revokeTrust{this}(address trustee) {
        if (sender != owner) {
            return false;
        }
        revokeDirectTrust(trustee);
        return m_trustManager.revokeTrust(trustee);
    }

    @public
    bool changeOwner{this}(address newOwner) {
        if (sender != owner) {
            return false;
        }
        revokeTrust(owner);
        owner = newOwner;
        setTrust(owner);
        return true;
    }

    @public
    address getOwner() {
        return owner;
    }

    @public
    bool directlyTrusts(address trustee) {
        address _trustee = endorse(trustee, any -> this);
        for (uint i = 0; i < trustees.length(); i += 1) {
            if (trustees[i] == _trustee) {
                return true;
            }
        }
        return false;
    }

    @public
    address[] directTrustees() {
        return trustees;
    }

    @public
    ITrustManager trustManager() {
        return m_trustManager;
    }

    @public
    ILockManager lockManager() {
        return m_lockManager;
    }
}

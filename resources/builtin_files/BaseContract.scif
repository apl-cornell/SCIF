contract BaseContract implements IBaseRuntime {
    address owner;
    address[] trustees;
    map(address, uint) trusteeIndex;
    ITrustManager trustManager;
    ILockManager lockManager;

    constructor(ITrustManager _trustManager, ILockManager _lockManager) {
        owner = sender;
        trustManager = _trustManager;
        lockManager = _lockManager;
        trustManager.register();
        lockManager.register();
        setTrust(trustManager);
        setTrust(lockManager);
        setTrust(owner);
    }

    @private
    void setLocalTrust(address trustee) {
        trustees.push(trustee);
        trusteeIndex[trustee] = trustees.length();
    }

    @private
    void revokeLocalTrust(address trustee) {
        uint ind = trusteeIndex[trustee];
        address lastTrustee = trustees[trustees.length() - 1];
        trustees[ind - 1] = lastTrustee;
        trusteeIndex[lastTrustee] = ind;
        trustees.pop();
        trusteeIndex[trustee] = 0;
    }

    @public
    bool setTrust{this}(address trustee) {
        if (sender != owner) {
            return false;
        }
        setLocalTrust(trustee);
        return trustManager.setTrust(trustee);
    }

    @public
    bool revokeTrust{this}(address trustee) {
        if (sender != owner) {
            return false;
        }
        revokeLocalTrust(trustee);
        return trustManager.revokeTrust(trustee);
    }

    @public
    bool changeOwner{this}(address newOwner) {
        if (sender != owner) {
            return false;
        }
        revokeTrust(owner);
        owner = newOwner;
        setTrust(owner);
        return true;
    }

    @public
    address getOwner() {
        return owner;
    }

    @public
    bool ifDTrust(address trustee) {
        address _trustee = endorse(trustee, any -> this);
        for (uint i = 0; i < trustees.length(); i += 1) {
            if (trustees[i] == _trustee) {
                return true;
            }
        }
        return false;
    }

    @public
    address[] getDTrustList() {
        return trustees;
    }

    @public
    ITrustManager getTrustManager() {
        return trustManager;
    }

    @public
    ILockManager getLockManager() {
        return lockManager;
    }
}

contract ATM :
    balance : map(address{BOT}, uint{this}){this}
    theOtherATMaddress : address{this}
    theOtherATM : ATM{this}

    @public
    def init{this, this -> this}(addr : address{this}) :
        theOtherATMaddress = addr
        theOtherATM = ATM(addr)

    @payable
    @public
    def deposit{sender, sender -> sender}() :
        endorse{sender -> this} :
            balance[msg.sender] = balance[msg.sender] + endorse(msg.value, sender -> this)
            theOtherATM.update(endorse(msg.sender, sender -> this), balance[msg.sender])

    @public
    def withdraw{sender, sender -> sender}(amount : uint{sender}) :
        if balance[msg.sender] < amount :
            return

        endorse{sender -> this} :
            balance[msg.sender] = balance[msg.sender] - endorse(amount, sender -> this)
            theOtherATM.update(endorse(msg.sender, sender -> this), balance[msg.sender])
            send(msg.sender, amount)

    @public
    def update{this, this -> this}(account : address{this}, value : uint{this}) :
        balance[account] = value

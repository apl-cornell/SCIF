contract Wallet [this] {
    map(address, uint) balances;
    error balanceNotEnough();
    error transferFailure();

    Wallet constructor(address trustOracle, address lockOracle) {
        register_runtime(trustOracle, lockOracle); //inheritance
    }

    public void withdraw(uint amount) throw balanceNotEnough(), transferFailure() {
        enforse(amount, msg.sender, BOT->this) if (balances[msg.sender] >= amount) {
            lock(this) {
                try {
                    send(msg.sender, amount);
                } catch (error e) {
                    throw transferFailure();
                }
                balances[msg.sender] -= amount;
            }
        } else {
            throw balanceNotEnough();
        }
    }

    public payable void deposit() {
        endorse(msg.value, msg.sender, BOT->this) {
            balances[msg.sender] += msg.value;
        }
    }
}

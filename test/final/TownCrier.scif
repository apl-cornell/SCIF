contract TownCrier [this]
    where sgx => this
{
    address requester;
    BaseContract callback;
    uint FEE;
    address sgx;
    exception NoPendingRequest();
    exception NotEnoughPayment();
    exception NotRequester();

    public payable void request(address _callback) throw NotEnoughPayment() {
        endorse(msg.sender, _callback, BOT->this) if (msg.value >= FEE) {
            requester = msg.sender;
            callback = _callback;
        } else {
            throw NotEnoughPayment();
        }
    }

    public void deliver{this >> this; BOT}(bytes{this} data) throw (NoPendingRequest) {
        assert requester != 0, NoPendingRequest();
        // require(msg.sender == sgx);

        try {
            callback.call(data);
        } catch (*) {
            // the call reverted but TownCrier still keeps the fee 
            log();
        }
        requester = 0;
        send(sgx, FEE);
    }

    void cancel{BOT >> this; BOT}() throw NotRequester() {
        endorse(msg.sender, BOT->this) if (msg.sender == requester) {
            requester = 0;
            send(requester, FEE);
        } else {
            throw NotRequester();
        }
    }
}

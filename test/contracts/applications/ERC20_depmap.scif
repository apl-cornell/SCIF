contract ERC20 {
    map(address, uint) _balances;
    map(address owner, map(address, uint{owner}){owner}) _allowances;
    uint _burnt;
    uint _totalSupply;
    bytes _name;
    bytes _symbol;

    exception ERC20InsufficientBalance(address owner, uint cur, uint needed);
    exception ERC20InsufficientAllowance(address owner, uint cur, uint needed);

    constructor(bytes name_, bytes symbol_) {
        _name = endorse(name_, sender -> this);
        _symbol = endorse(symbol_, sender -> this);
        super();
    }

    @public bytes name() {
        return _name;
    }

    @public bytes symbol() {
        return _symbol;
    }

    @public uint decimals() {
        return 18;
    }

    @public uint totalSupply() {
        return _totalSupply;
    }

    @public uint balanceOf(address account) {
        return _balances[account];
    }

    @public uint burnt() {
        return _burnt;
    }

    @public void approve(address spender, uint val) {
        address _to = endorse(spender, sender->this);
        uint _val = endorse(val, sender->this);
        _allowances[sender][_to] = _val;
    }

    @public void approveFrom{from->this}(final address from, address spender, uint val) {
        address _from = endorse(from, sender->this);
        address _to = endorse(spender, sender->this);
        uint _val = endorse(val, sender->this);
        _allowances[from][spender] = val;
    }

    @public void transfer{from -> this}(final address from, address to, uint val) throws (ERC20InsufficientBalance{this}) {
        endorse([from, to, val], from -> this)
        if (_balances[from] >= val) {
            _balances[from] -= val;
            _balances[to] += val;
        } else {
            throw ERC20InsufficientBalance(from, _balances[from], val);
        }
    }

    @public uint{owner} allowance(final address owner, final address spender) {
        return _allowances[owner][spender];
    }

    @public void transferFrom{sender -> from; any}(final address from, address to, uint val) throws (ERC20InsufficientAllowance{this}, ERC20InsufficientBalance{this}) {
        endorse([from, to, val], sender -> from)
        if (_allowances[from][sender] >= val) {
            transfer(from, to, val);
            _allowances[from][sender] -= val;
        }
        throw ERC20InsufficientAllowance(to, _allowances[from][sender], val);
    }

    void _spendAllowance{owner}(final address owner, address spender, uint val) throws (ERC20InsufficientAllowance) {
        uint{owner} currentAllowance;
        currentAllowance = allowance(owner, spender);
        if (currentAllowance != UINT_MAX) {
            if (currentAllowance < val) {
                throw ERC20InsufficientAllowance(spender, currentAllowance, val);
            }
            _allowances[owner][spender] = currentAllowance - val;
        }
    }
}
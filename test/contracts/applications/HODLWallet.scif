contract HODLWallet {

    map(address, uint) balances;
    map(address, uint) withdrawalCount;
    map(address, map(address, bool{owner}){owner}) approvals;

    uint MAX_WITHDRAWAL;

    constructor() {
        MAX_WITHDRAWAL = 200000000 * 100000000;
        super();
    }

    @public void doWithdraw{from -> this}(final address from, address to, uint amount) {
        endorse([from, to, amount], from -> this)
        if (amount <= MAX_WITHDRAWAL && balances[from] >= amount && withdrawalCount[from] < 3) {
            unchecked {
                balances[from] = balances[from] - amount;

                withdrawalCount[from] = withdrawalCount[from] + 1; // move counter update before the call
            }
            send(to, amount);

        } else {
            assert false;
        }
    }

    @public void doDeposit(address to) {
        endorse([to, value], sender -> this)
        if (value > 0) {
            unchecked {
                balances[to] = balances[to] + value;
            }
        } else {
            assert false;
        }
    }

    @public void withdrawForTo{sender -> from; sender}(final address from, address to, uint amount) {
        endorse([from, to, amount], sender -> from)
        if (approvals[from][sender]) {
            doWithdraw(from, to, amount);
        } else {
            assert false;
        }
    }

    @public void approve{sender}(address toApprove) {
        // in case you want to do your business from other addresses

        assert (balances[sender] > 0);

        approvals[sender][toApprove] = true;
    }

    @public void unapprove{sender}(address toUnapprove) {
        // in case trusting that address was a bad idea

        assert (balances[sender] > 0);

        approvals[sender][toUnapprove] = false;
    }

    @public uint getBalance(address toCheck) {
        return balances[toCheck];
    }

    @public void addBalance{this}(address addr, uint _balance) {
        // in case more idio^H^H^H^HHODLers want to join

        balances[addr] = _balance;
        withdrawalCount[addr] = 0;
    }
}
import "./IERC20.scif";
import "./IExchange.scif";

contract Dexible {
    exception FailedSwap();

    constructor() {
        super();
    }

    @public void swap{sender}(IERC20 tokenIn, IERC20 tokenOut, IExchange router, uint amount)
        throws (FailedSwap) {
        atomic {
            tokenIn.approveFrom(sender, address(router), amount);
            router.exchange(sender, tokenIn, tokenOut, amount);
        } rescue * {
            throw FailedSwap();
        }
    }

    @public void multiSwap{sender}(IERC20[] tokens, IExchange[] routers, uint[] amounts)
        throws (FailedSwap) {
        atomic {
            uint{sender} i = 0;
            while (i < tokens.length() - 1) {
                swap(tokens[i], tokens[i + 1], routers[i], amounts[i]);
                i += 1;
            }
        } rescue * {
            throw FailedSwap();
        }
    }
}
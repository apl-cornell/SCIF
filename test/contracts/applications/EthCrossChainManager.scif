import "./IPolyCallee.scif";
import "./IECCUtils.scif";
import "./IEthCrossChainData.scif";
contract EthCrossChainManager {

    address EthCrossChainDataAddress;
    address EthECCUtilsAddress;

    constructor(address _eccd, address _cutils) {
        EthCrossChainDataAddress = endorse(_eccd, sender->this);
        EthECCUtilsAddress = endorse(_cutils, sender->this);
        super();
    }

    @public
    void initGenesisBlock(Header@IECCUtils header, bytes pubKeyList) {
        final IEthCrossChainData eccd = IEthCrossChainData(EthCrossChainDataAddress);
        final IECCUtils cutils = IECCUtils(EthECCUtilsAddress);
        address[] keepers = eccd.getCurEpochConPubKeys();
        assert(keepers.length() == 0);

        // Parse header and convit the public keys into nextBookKeeper and compare it with header.nextBookKeeper to verify the validity of signature
        address nextBookkeeper = cutils.verifyPubkey(keepers);
        endorse([header], sender->this)
        if (header.nextBookkeeper == nextBookkeeper) {
            // Record current epoch start height and public keys (by storing them in address format)
            eccd.putCurEpochStartHeight(header.height);
            eccd.putCurEpochConPubKeys(keepers);
        } else {
            assert(false);
        }
    }

    @public
    void changeBookKeeper(Header@IECCUtils header, address[] polyChainBKs, bytes sigList) {
        final IEthCrossChainData eccd = IEthCrossChainData(EthCrossChainDataAddress);
        final IECCUtils cutils = IECCUtils(EthECCUtilsAddress);
        // Make sure rawHeader.height is higher than recorded current epoch start height
        uint curEpochStartHeight = eccd.getCurEpochStartHeight();

        // Verify signature of rawHeader comes from pubKeyList
        endorse([header, polyChainBKs], sender -> this)
        if ((header.height > curEpochStartHeight) &&
            (header.nextBookkeeper != address(0)) &&
            (cutils.verifySig(header, sigList, polyChainBKs, polyChainBKs.length() - (polyChainBKs.length() - 1) / 3))) {

            // Convert pubKeyList into ethereum address format and make sure the compound address from the converted ethereum addresses
            // equals passed in header.nextBooker
            address nextBookKeeper = cutils.verifyPubkey(polyChainBKs);
            assert(header.nextBookkeeper == nextBookKeeper);

            // update current epoch start height of Poly chain and current epoch consensus peers book keepers addresses
            eccd.putCurEpochStartHeight(header.height);
            eccd.putCurEpochConPubKeys(polyChainBKs);
        } else {
            assert(false);
        }
    }

    @public
    void crossChain(uint toChainId, address toContract, bytes txData) {
        final IEthCrossChainData eccd = IEthCrossChainData(EthCrossChainDataAddress);
        final IECCUtils cutils = IECCUtils(EthECCUtilsAddress);
        // To help differentiate two txs, the ethTxHashIndex is increasing automatically
        uint txHashIndex = eccd.getEthTxHashIndex();

        uint paramTxHash = txHashIndex;

        // Construct the makeTxParam, and put the hash info storage, to help provide proof of tx existence
        bytes rawParam = cutils.encodeParam(paramTxHash, address(this), sender, toChainId, toContract, txData);

        // Must save it in the storage to be included in the proof to be verified.
        eccd.putEthTxHash(cutils.keccak256(rawParam));
    }

    @public
    void verifyHeaderAndExecuteTx(bytes proof, Header@IECCUtils header, bytes headerProof, Header@IECCUtils curHeader, bytes headerSig) {
        // Load ehereum cross chain data contract
        // Get stored consensus public key bytes of current poly chain epoch and deserialize Poly chain consensus public key bytes to address[]
        final IEthCrossChainData eccd = IEthCrossChainData(EthCrossChainDataAddress);
        final IECCUtils cutils = IECCUtils(EthECCUtilsAddress);

        assert eccd => this;
        assert cutils => this;
        address[] keepers = eccd.getCurEpochConPubKeys();

        uint curEpochStartHeight = eccd.getCurEpochStartHeight();

        uint n = keepers.length();
        if (endorse(header.height, sender->this) >= curEpochStartHeight) {
//          It's enough to verify rawHeader signature
            assert(cutils.verifySig(header, headerSig, keepers, n - ( n - 1) / 3));
        } else {
//          We need to verify the signature of curHeader
            assert(cutils.verifySig(curHeader, headerSig, keepers, n - ( n - 1) / 3));

            uint proveValue = cutils.merkleProveValue(headerProof, curHeader.blockRoot);
            assert(cutils.getHeaderHash(header) == proveValue);
        }

        // Parse the toMerkleValue struct and make sure the tx has not been processed, then mark this tx as processed
        ToMerkleValue@IECCUtils toMerkleValue = cutils.merkleProve(proof, header.crossStatesRoot);
        assert(!eccd.checkIfFromChainTxExist(toMerkleValue.fromChainID, toMerkleValue.txHash));
        eccd.markFromChainTxExist(toMerkleValue.fromChainID, toMerkleValue.txHash);

        // Ethereum ChainId is 2, we need to check the transaction is for Ethereum network
        assert(toMerkleValue.toChainId == 2);

        // Obtain the targeting contract, so that Ethereum cross chain manager contract can trigger the executation of cross chain tx on Ethereum side
        address toContract = toMerkleValue.toContract;

        IPolyCallee callee = IPolyCallee(toContract);
        callee.polyCallback(sender, toMerkleValue.args, toMerkleValue.fromContract, toMerkleValue.fromChainID);
    }
}
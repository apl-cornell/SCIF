import "./IERC20_noe.scif";
import "./IDODOApprove.scif";

contract DODOV2Proxy01 {
    address ETH_ADDRESS;
    IDODOApprove DODO_APPROVE;

    // exception SwapFailedException();
    // exception ERC20InsufficientBalance(address owner, uint cur, uint needed);

    constructor(IDODOApprove dodoApprove, address ethAddress) {
        super();
        ETH_ADDRESS = endorse(ethAddress, sender->this);
        DODO_APPROVE = endorse(dodoApprove, sender->this);
    }

    @public uint{sender} externalSwap{sender}(
        final IERC20{sender} fromToken,
        final IERC20{sender} toToken,
        address{sender} approveTarget,
        address{sender} to,
        uint{sender} fromTokenAmount,
        uint{sender} minReturnAmount
    )
    // throws (SwapFailedException)
    {
            // Record the original balance of toToken
//            assert sender => this;
//            assert toToken => sender;
//            assert fromToken => sender;
            uint{sender} toTokenOriginBalance = endorse(toToken.balanceOf(sender), any->sender);
//            }

            // If fromToken is not ETH, approve the transfer
            if (address(fromToken) != ETH_ADDRESS) {
//                DODO_APPROVE.claimTokens(fromToken, sender, address(this), fromTokenAmount);
                fromToken.approveFrom(sender, approveTarget, fromTokenAmount);
            }

            // Perform the external call
            // bool success = to.call{value: (fromToken == ETH_ADDRESS) ? msg.value : 0}(callDataConcat);
            // if (!success) {
            //     throw SwapFailedException();
            // }

            // Transfer any remaining fromToken and toToken back to the sender
            IERC20{sender} fromTokenLeft = endorse(fromToken.balanceOf(address(this)), any -> sender);
            IERC20{sender} toTokenLeft = endorse(toToken.balanceOf(address(this)), any -> sender);
            fromToken.transfer(address(this), sender, fromTokenLeft);
            toToken.transfer(address(this), sender, toTokenLeft);

            // Calculate the return amount
//            uint{sender} returnAmount = 0;
            uint{sender} returnAmount = endorse(toToken.balanceOf(sender), any->sender) - toTokenOriginBalance;

            // Ensure the return amount meets the minimum requirement
//            assert(returnAmount >= minReturnAmount);

            // Return the amount received
            return returnAmount;
    }
}
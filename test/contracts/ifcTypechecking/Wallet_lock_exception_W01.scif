contract Wallet {
    map(address, uint) balances;
    exception balanceNotEnough();
    exception transferFailure();

    constructor() { super(); }

    @public
    void withdraw{any -> this; this}(uint _amount) throws (balanceNotEnough, transferFailure) {
        uint amount = endorse(_amount, any -> this);
        if (balances[sender] >= amount) {
            atomic {
                if (amount > 0) {
                    send(sender, amount);
                }
            } rescue * {
                // any
                throw transferFailure();
            }
            balances[sender] = balances[sender] - amount;
        } else {
            throw balanceNotEnough();
        }
    }

    @public
    @payable
    void deposit() {
        balances[sender] = balances[sender] + value;
    }
}

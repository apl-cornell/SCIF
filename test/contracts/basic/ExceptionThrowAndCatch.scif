contract ExceptionDefinition {
    exception X();
    exception Y(uint x, uint y);
    exception Z();

    // CA.
    @public
    void foo{sender -> this; any}(uint a, uint b) throws (Z, Y) {
        try {
            bar(a, b);
            //chigh.f(); // f throws (Y);
            //clow.g(); // g throws (X{this}); THROWS Z SECRETLY
            //clow2.g(); // throws (X{this});
            // return (true, SUCC, T), (true, EID, T),
            //  or (false, bytes)
            //chigh.g(); // g throws (X{this});
            // Path set P: E->pc
        } catch (Y excY) {
            throw Y(excY.x, excY.y);
        } catch (X excX) {
            throw Z();
        }
    }

    @public
    void bar(uint a, uint b) throws (Y, X) {
        if (a > b) {
            throw Y(a, b);
        } else {
            if (a < b) {
                throw X();
            }
        }
    }
}
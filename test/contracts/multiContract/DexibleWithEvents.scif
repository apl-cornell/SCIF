interface IERC20 {
    exception ERC20InsufficientBalance(address owner, uint cur, uint needed);
    exception ERC20InsufficientAllowance(address owner, uint cur, uint needed);
    @public uint balanceOf(address account);
    @public void approve{sender}(address allowed, uint amount);
    @public void approveFrom{from}(final address from, address spender, uint val);
    @public void transfer{from -> this}(final address from, address to, uint amount) throws (ERC20InsufficientBalance{this});
    @public void transferFrom{sender -> from; sender}(final address from, address to, uint amount) throws (ERC20InsufficientAllowance{this}, ERC20InsufficientBalance{this});
}

interface IExchange {
    @public void exchange{user -> this}(
        final address user,
        IERC20{user} tokenIn, IERC20{user} tokenOut, uint{user} amount
        );
}

contract Dexible {
    exception FailedSwap();

    event Swap(IERC20 tokenIn, IERC20 tokenOut, IExchange router, uint amount);

    constructor() { super(); }

    @public void swap{sender}(IERC20 tokenIn, IERC20 tokenOut, IExchange router, uint amount)
        throws (FailedSwap) {
        emit Swap(tokenIn, tokenOut, router, amount);
        atomic {
            tokenIn.approveFrom(sender, address(router), amount);
            router.exchange(sender, tokenIn, tokenOut, amount);
        } rescue * {
            throw FailedSwap();
        }
    }

    @public void multiSwap{sender}(IERC20[] tokens, IExchange[] routers, uint[] amounts)
        throws (FailedSwap) {
        atomic {
            uint{sender} i = 0;
            while (i < tokens.length() - 1) {
                try {
                    emit Swap(tokens[i], tokens[i + 1], routers[i], amounts[i]);
                    swap(tokens[i], tokens[i + 1], routers[i], amounts[i]);
                } catch (FailedSwap e) {
                    assert false;
                }
                i += 1;
            }
        } rescue * {
            throw FailedSwap();
        }
    }
}
import "./IERC20.scif";

contract ERC20 implements IERC20 {
    map(address, uint) balances;
    map(address owner, map(address, uint{owner}){owner}) allowances;
    constructor() { super(); }
    @public
    void approve{sender}(address allowed, uint amount) {
        allowances[sender][allowed] = amount;
    }

    //
    //  dynamically check that (msg.sender join l_deputy) => from
    @public
    bool{this} transfer{from -> this}(final address from, address to, uint amount) {
    // bool transfer{from -> this; 1}(final address from, address to, uint amount) {
        endorse([from, to, amount], from -> this)
        if (balances[from] >= amount) {
            balances[from] -= amount;
            balances[to] += amount;
            return true;
        } else {
            return false;
        }
    }

    @public
    bool{from} transferAllowed{sender -> from; any}(final address from, address to, uint amount) {
        endorse([from, to, amount], sender -> from)
        if (allowances[from][sender] >= amount) {
            if (transfer(from, to, amount)) {
                allowances[from][sender] -= amount;
                return true;
            }
        }
        return false;
    }

    @public
    void deposit() {
        balances[sender] += value;
    }

    @public
    uint getBalance() {
        return balances[sender];
    }
}
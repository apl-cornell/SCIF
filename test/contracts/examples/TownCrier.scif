contract TownCrier {
    address requester;
    BaseContract callback;
    final address sgx;
    uint FEE;
    exception NoPendingRequest();
    exception NotEnoughPayment();
    // exception InformationFlowViolation(); Should we throw an exception when failing runtime ifc/lock checks?

    TownCrier(address trustOracle, address lockOracle, address _sgx, uint _FEE) {
        register_runtime(trustOracle, lockOracle);
        sgx = _sgx; // should update dynamic trust accordingly
        FEE = _FEE;
    }

    @public
    void request(address _callback) throw NotEnoughPayment() {
        endorse(sender, _callback, BOT => this) if (value >= FEE) {
            requester = sender;
            callback = _callback;
        } else {
            throw NotEnoughPayment();
        }
    }

    @public
    void deliver{this; any}(bytes data) throws (NoPendingRequest) {
        if (requester == 0) {
            throw NoPendingRequest();
        }
        atomic {
            requester.callback(data);
        } rescue (*) {
            // pass, the call reverted but TownCrier still keeps the fee
        }
        requester = 0;
        send(sgx, FEE);
    }

    void cancel{requester -> this; BOT}() throw {
        requester = 0;
        send(requester, FEE);
    }
}

/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.*;
import java.util.Stack;
import java.util.HashMap;


/**
 * token : (https://github.com/python/cpython/blob/master/Parser/tokenizer.c)
    "ENDMARKER",
    "NAME",
    "NUMBER",
    "STRING",
    "NEWLINE",
    "INDENT",
    "DEDENT",
    "LPAR",
    "RPAR",
    "LSQB",
    "RSQB",
    "COLON",
    "COMMA",
    "SEMI",
    "PLUS",
    "MINUS",
    "STAR",
    "SLASH",
    "VBAR",
    "AMPER",
    "LESS",
    "GREATER",
    "EQUAL",
    "DOT",
    "PERCENT",
    "LBRACE",
    "RBRACE",
    "EQEQUAL",
    "NOTEQUAL",
    "LESSEQUAL",
    "GREATEREQUAL",
    "TILDE",
    "CIRCUMFLEX",
    "LEFTSHIFT",
    "RIGHTSHIFT",
    "DOUBLESTAR",
    "PLUSEQUAL",
    "MINEQUAL",
    "STAREQUAL",
    "SLASHEQUAL",
    "PERCENTEQUAL",
    "AMPEREQUAL",
    "VBAREQUAL",
    "CIRCUMFLEXEQUAL",
    "LEFTSHIFTEQUAL",
    "RIGHTSHIFTEQUAL",
    "DOUBLESTAREQUAL",
    "DOUBLESLASH",
    "DOUBLESLASHEQUAL",
    "AT",
    "ATEQUAL",
    "RARROW",
    "ELLIPSIS",
    "OP",
    "<ERRORTOKEN>",
    "COMMENT",
    "NL",
    "ENCODING",
    "<N_TOKENS>"
 */



class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INDENTATION = 2;
  public static final int DEDENTATION = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\1\1\6\1\6\1\2\22\0\1\10\1\56\1\0"+
    "\1\7\1\0\1\50\1\45\1\0\1\33\1\34\1\42\1\31\1\40"+
    "\1\32\1\30\1\43\1\24\1\27\6\21\2\3\1\37\1\41\1\46"+
    "\1\17\1\47\1\0\1\55\1\23\1\25\2\23\1\23\1\23\3\4"+
    "\1\4\4\4\1\26\10\4\1\22\2\4\1\35\1\0\1\36\1\53"+
    "\1\5\1\0\1\23\1\25\1\11\1\13\1\23\1\23\1\16\1\4"+
    "\1\14\1\4\3\4\1\15\1\12\5\4\1\4\2\4\1\22\2\4"+
    "\1\51\1\44\1\52\1\54\6\0\1\6\u1fa2\0\1\6\1\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\6\1\3\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\1\2\36\1\37\1\40\2\0\1\6\1\0\1\41"+
    "\3\0\1\3\2\0\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\2\0\1\6\1\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\63\1\64\1\65\1\66"+
    "\1\67\2\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[95];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\215\0\274\0\353\0\215"+
    "\0\u011a\0\u0149\0\u0178\0\215\0\u01a7\0\u01d6\0\u0205\0\u0234"+
    "\0\215\0\215\0\215\0\215\0\215\0\215\0\215\0\u0263"+
    "\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\215\0\215"+
    "\0\u03ac\0\215\0\u03db\0\u040a\0\215\0\u0439\0\215\0\215"+
    "\0\u0468\0\u0497\0\u04c6\0\u04f5\0\215\0\u0524\0\u0553\0\u0582"+
    "\0\u05b1\0\u05e0\0\u060f\0\215\0\215\0\215\0\215\0\u063e"+
    "\0\215\0\u066d\0\215\0\215\0\215\0\u069c\0\215\0\215"+
    "\0\u06cb\0\215\0\215\0\215\0\u06fa\0\u0729\0\u0758\0\u0787"+
    "\0\u07b6\0\u07e5\0\u0553\0\u0582\0\u0814\0\u0843\0\u05e0\0\215"+
    "\0\215\0\215\0\215\0\215\0\u0872\0\u08a1\0\u08d0\0\u08ff"+
    "\0\u092e\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[95];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\2\7\1\10\1\11\1\12\6\7"+
    "\1\13\1\14\1\6\2\7\1\15\2\7\1\6\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\2\14"+
    "\3\45\1\10\1\45\1\46\7\45\1\47\36\45\1\50"+
    "\2\10\3\50\1\10\50\50\62\0\1\6\1\0\1\51"+
    "\13\0\1\6\2\0\1\6\2\0\1\6\32\0\3\7"+
    "\3\0\6\7\2\0\7\7\27\0\1\11\1\0\1\52"+
    "\3\11\1\52\2\11\1\53\45\11\10\0\1\54\65\0"+
    "\1\55\44\0\1\56\4\0\1\57\7\0\1\60\1\0"+
    "\1\61\1\62\1\57\60\0\1\63\45\0\1\64\56\0"+
    "\1\65\27\0\1\66\26\0\1\67\22\0\1\70\33\0"+
    "\1\71\23\0\1\72\32\0\1\73\56\0\1\74\56\0"+
    "\1\75\26\0\1\76\1\77\26\0\1\100\27\0\1\101"+
    "\26\0\1\102\56\0\1\103\56\0\1\104\56\0\1\77"+
    "\47\0\1\105\51\0\1\6\15\0\1\6\2\0\1\6"+
    "\2\0\1\6\27\0\1\52\1\0\7\52\1\106\45\52"+
    "\1\11\1\0\1\52\3\11\1\52\2\11\1\53\1\107"+
    "\44\11\10\0\1\110\72\0\1\111\37\0\1\112\13\0"+
    "\1\113\2\0\1\113\2\0\1\113\32\0\1\114\1\0"+
    "\1\115\3\0\1\114\1\0\1\114\5\0\1\114\1\0"+
    "\3\114\1\0\1\114\34\0\1\56\16\0\1\61\37\0"+
    "\1\116\16\0\1\117\2\0\1\117\57\0\1\120\45\0"+
    "\1\121\56\0\1\122\56\0\1\123\56\0\1\124\47\0"+
    "\1\125\46\0\1\52\1\0\7\52\1\106\1\126\44\52"+
    "\1\11\1\0\1\52\3\11\1\52\2\11\1\53\1\11"+
    "\1\127\43\11\10\0\1\14\53\0\1\56\72\0\1\113"+
    "\2\0\1\113\2\0\1\113\32\0\1\114\5\0\1\114"+
    "\1\0\1\114\5\0\1\114\1\0\3\114\1\0\1\114"+
    "\53\0\1\117\2\0\1\117\37\0\1\47\46\0\1\52"+
    "\1\0\7\52\1\106\1\52\1\130\43\52\1\11\1\0"+
    "\1\52\3\11\1\52\2\11\1\53\2\11\1\131\42\11"+
    "\1\52\1\0\7\52\1\106\2\52\1\132\42\52\1\11"+
    "\1\0\1\52\3\11\1\52\2\11\1\53\3\11\1\133"+
    "\41\11\1\52\1\0\7\52\1\106\3\52\1\134\41\52"+
    "\1\11\1\0\1\52\3\11\1\52\2\11\1\53\4\11"+
    "\1\135\40\11\1\52\1\0\7\52\1\106\4\52\1\136"+
    "\40\52\1\11\1\0\1\52\3\11\1\52\2\11\1\53"+
    "\5\11\1\137\17\11\1\137\17\11\1\52\1\0\7\52"+
    "\1\106\5\52\1\137\17\52\1\137\17\52\1\137\1\0"+
    "\55\137";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2679];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\1\11\3\1\1\11\4\1\7\11"+
    "\7\1\2\11\1\1\1\11\2\1\1\11\1\1\2\11"+
    "\2\0\1\1\1\0\1\11\3\0\1\1\2\0\4\11"+
    "\1\1\1\11\1\1\3\11\1\1\2\11\1\1\3\11"+
    "\2\0\1\1\1\0\1\1\1\0\2\1\2\0\1\1"+
    "\5\11\2\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[95];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer sb = new StringBuffer();
    HashMap<String, Integer> keywords;
    Stack<Integer> indentStack = new Stack<Integer>();
    int tabn;
    int inbrace;
    int inpar;
    int insqb;

    Symbol op(int tokenId) {
        return new Symbol(tokenId, yyline, yycolumn); 
    }

    Symbol op(int tokenId, Object value) {
        return new Symbol(tokenId, yyline, yycolumn, value);
    }

    Symbol id() {
        return new Symbol(sym.NAME, yyline, yycolumn, yytext());
    }
   
    Symbol key(int symbolId) {
        return new Symbol(keywords.get(yytext()), yyline, yycolumn, yytext());
    }

    protected void init_keywords() {
        keywords.put("False",   new Integer(sym.FALSE));
        keywords.put("None",    new Integer(sym.NONE));
        keywords.put("True",    new Integer(sym.TRUE));
        keywords.put("and",     new Integer(sym.AND));
        keywords.put("as",      new Integer(sym.AS));
        keywords.put("assert",  new Integer(sym.ASSERT));
        keywords.put("async",   new Integer(sym.ASYNC));
        keywords.put("await",   new Integer(sym.AWAIT));
        keywords.put("break",   new Integer(sym.BREAK));
        keywords.put("class",   new Integer(sym.CLASS));
        keywords.put("continue",new Integer(sym.CONTINUE));
        keywords.put("def",     new Integer(sym.DEF));
        keywords.put("del",     new Integer(sym.DEL));
        keywords.put("elif",    new Integer(sym.ELIF));
        keywords.put("else",    new Integer(sym.ELSE));
        keywords.put("except",  new Integer(sym.EXCEPT));
        keywords.put("finally", new Integer(sym.FINALLY));
        keywords.put("for",     new Integer(sym.FOR));
        keywords.put("from",    new Integer(sym.FROM));
        keywords.put("global",  new Integer(sym.GLOBAL));
        keywords.put("if",      new Integer(sym.IF));
        keywords.put("import",  new Integer(sym.IMPORT));
        keywords.put("in",      new Integer(sym.IN));
        keywords.put("is",      new Integer(sym.IS));
        keywords.put("lambda",  new Integer(sym.LAMBDA));
        keywords.put("nonlocal",new Integer(sym.NONLOCAL));
        keywords.put("not",     new Integer(sym.NOT));
        keywords.put("or",      new Integer(sym.OR));
        keywords.put("pass",    new Integer(sym.PASS));
        keywords.put("raise",   new Integer(sym.RAISE));
        keywords.put("return",  new Integer(sym.RETURN));
        keywords.put("try",     new Integer(sym.TRY));
        keywords.put("while",   new Integer(sym.WHILE));
        keywords.put("with",    new Integer(sym.WITH));
        keywords.put("yield",   new Integer(sym.YIELD));
    }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
      this.keywords = new HashMap<>();
    init_keywords();
    indentStack.push(0);
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              if (indentStack.empty()) {
            return op(sym.EOF);
        }
        else {
            indentStack.pop();
            if (indentStack.empty()) {
                return op(sym.EOF);
            }
            else {
                return op(sym.DEDENT);
            }
        }
            }
            case 96: break;
            case INDENTATION: {
              yybegin(YYINITIAL);
            }
            case 97: break;
            default:
          { return new java_cup.runtime.Symbol(sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return op(sym.ERROR, yytext());
            }
          case 56: break;
          case 2: 
            { if (inbrace <= 0 && inpar <= 0 && insqb <= 0) {
            yybegin(INDENTATION);
            tabn = 0;
            return op(sym.NEWLINE);
        }
            }
          case 57: break;
          case 3: 
            { return op(sym.NUMBER, yytext());
            }
          case 58: break;
          case 4: 
            { Integer i = keywords.get(yytext());
            if (i == null) return id();
            else return key(i.intValue());
            }
          case 59: break;
          case 5: 
            { return op(sym.ERROR, "Unrecognizable char: " + yytext());
            }
          case 60: break;
          case 6: 
            { 
            }
          case 61: break;
          case 7: 
            { return op(sym.EQUAL);
            }
          case 62: break;
          case 8: 
            { return op(sym.DOT);
            }
          case 63: break;
          case 9: 
            { return op(sym.PLUS);
            }
          case 64: break;
          case 10: 
            { return op(sym.MINUS);
            }
          case 65: break;
          case 11: 
            { ++inpar;
            return op(sym.LPAR);
            }
          case 66: break;
          case 12: 
            { --inpar;
            return op(sym.RPAR);
            }
          case 67: break;
          case 13: 
            { ++insqb;
            return op(sym.LSQB);
            }
          case 68: break;
          case 14: 
            { --insqb;
            return op(sym.RSQB);
            }
          case 69: break;
          case 15: 
            { return op(sym.COLON);
            }
          case 70: break;
          case 16: 
            { return op(sym.COMMA);
            }
          case 71: break;
          case 17: 
            { return op(sym.SEMI);
            }
          case 72: break;
          case 18: 
            { return op(sym.STAR);
            }
          case 73: break;
          case 19: 
            { return op(sym.SLASH);
            }
          case 74: break;
          case 20: 
            { return op(sym.VBAR);
            }
          case 75: break;
          case 21: 
            { return op(sym.AMPER);
            }
          case 76: break;
          case 22: 
            { return op(sym.LESS);
            }
          case 77: break;
          case 23: 
            { return op(sym.GREATER);
            }
          case 78: break;
          case 24: 
            { return op(sym.PERCENT);
            }
          case 79: break;
          case 25: 
            { ++inbrace;
            return op(sym.LBRACE);
            }
          case 80: break;
          case 26: 
            { --inbrace;
            return op(sym.RBRACE);
            }
          case 81: break;
          case 27: 
            { return op(sym.CIRCUMFLEX);
            }
          case 82: break;
          case 28: 
            { return op(sym.TILDE);
            }
          case 83: break;
          case 29: 
            { return op(sym.AT);
            }
          case 84: break;
          case 30: 
            { yypushback(1);
        if (indentStack.peek() > tabn) {
            indentStack.pop();
            yybegin(DEDENTATION);
            return op(sym.DEDENT);
        }
        else if (indentStack.peek() < tabn) {
            indentStack.push(tabn);
            yybegin(YYINITIAL);
            return op(sym.INDENT);
        }
        else {
            yybegin(YYINITIAL);
        }
            }
          case 85: break;
          case 31: 
            { ++tabn;
            }
          case 86: break;
          case 32: 
            { yypushback(1);
        if (indentStack.peek() > tabn) {
            indentStack.pop();
            return op(sym.DEDENT);
        }
        else if (indentStack.peek() == tabn) {
            yybegin(YYINITIAL);
        }
        else {
            yybegin(YYINITIAL);
            return op(sym.ERROR, "Inconsistent dedent");
        }
            }
          case 87: break;
          case 33: 
            { return op(sym.EQEQUAL);
            }
          case 88: break;
          case 34: 
            { return op(sym.PLUSEQUAL);
            }
          case 89: break;
          case 35: 
            { return op(sym.MINEQUAL);
            }
          case 90: break;
          case 36: 
            { return op(sym.RARROW);
            }
          case 91: break;
          case 37: 
            { return op(sym.STAREQUAL);
            }
          case 92: break;
          case 38: 
            { return op(sym.DOUBLESTAR);
            }
          case 93: break;
          case 39: 
            { return op(sym.SLASHEQUAL);
            }
          case 94: break;
          case 40: 
            { return op(sym.DOUBLESLASH);
            }
          case 95: break;
          case 41: 
            { return op(sym.VBAREQUAL);
            }
          case 96: break;
          case 42: 
            { return op(sym.AMPEREQUAL);
            }
          case 97: break;
          case 43: 
            { return op(sym.LESSEQUAL);
            }
          case 98: break;
          case 44: 
            { return op(sym.LEFTSHIFT);
            }
          case 99: break;
          case 45: 
            { return op(sym.NOTEQUAL);
            }
          case 100: break;
          case 46: 
            { return op(sym.GREATEREQUAL);
            }
          case 101: break;
          case 47: 
            { return op(sym.RIGHTSHIFT);
            }
          case 102: break;
          case 48: 
            { return op(sym.PERCENTEQUAL);
            }
          case 103: break;
          case 49: 
            { return op(sym.CIRCUMFLEXEQUAL);
            }
          case 104: break;
          case 50: 
            { return op(sym.ATEQUAL);
            }
          case 105: break;
          case 51: 
            { return op(sym.ELLIPSIS);
            }
          case 106: break;
          case 52: 
            { return op(sym.DOUBLESTAREQUAL);
            }
          case 107: break;
          case 53: 
            { return op(sym.DOUBLESLASHEQUAL);
            }
          case 108: break;
          case 54: 
            { return op(sym.LEFTSHIFTEQUAL);
            }
          case 109: break;
          case 55: 
            { return op(sym.RIGHTSHIFTEQUAL);
            }
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
